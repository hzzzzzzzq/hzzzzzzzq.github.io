<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>深入理解JavaScript系列（10）：new</title>
      <link href="//Blog/3a5c2743.html"/>
      <url>//Blog/3a5c2743.html</url>
      
        <content type="html"><![CDATA[<p>new 操作，我们在类对象，函数中都会使用到，那么它到底是用来干什么的呢？又是怎么实现的呢？</p><h2 id="第一版-基础完成"><a href="#第一版-基础完成" class="headerlink" title="第一版 - 基础完成"></a>第一版 - 基础完成</h2><p>我们先看看 MDN 的定义：</p><blockquote><p>new 运算符创建一个用户定义的对象类型的实例或具有构造函数的内置对象的实例。</p></blockquote><p>我们先来举个例子吧</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.weight = <span class="number">70</span>;</span><br><span class="line">Person.prototype.getInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name, <span class="built_in">this</span>.age, <span class="built_in">this</span>.weight);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;hzzzzzzzq&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// hzzzzzzzq</span></span><br><span class="line"><span class="built_in">console</span>.log(person.age); <span class="comment">// 18</span></span><br><span class="line"><span class="built_in">console</span>.log(person.weight); <span class="comment">// 70</span></span><br><span class="line">person.getInfo(); <span class="comment">// hzzzzzzzq 18 70</span></span><br></pre></td></tr></table></figure><p>我们从例子中来看，我们创建的实例 person 可以做到</p><ul><li>获取构建函数里的属性</li><li>获取构建函数的原型里的属性</li></ul><p>所以由此我们来推断 new 操作做了什么。</p><ul><li>new 的返回时一个对象</li><li>需要为对象添加属性</li><li>需要将对象原型指向构造函数的原型</li></ul><p>但是由于 <code>new</code> 操作是关键字，所以就是用一个创建方法 <code>objectFactory</code> 来替代了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> pserson = <span class="keyword">new</span> Person(...arguments);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价我们创建的方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = objectFactory(Person, ...arguments);</span><br></pre></td></tr></table></figure><p>由此，我们来看第一版代码吧。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objectFactory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;; <span class="comment">// 创建一个新对象，也可以使用 new Object()</span></span><br><span class="line">  <span class="keyword">const</span> Constructor = [].shift.call(<span class="built_in">arguments</span>); <span class="comment">// 获取构造函数，传入参数的第一个值</span></span><br><span class="line">  obj.__proto__ = Constructor.prototype; <span class="comment">// 将对象的原型指向构造函数的原型</span></span><br><span class="line">  Constructor.apply(obj, <span class="built_in">arguments</span>); <span class="comment">// 绑定对象，为对象添加属性</span></span><br><span class="line">  <span class="keyword">return</span> obj; <span class="comment">// 返回对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来，我们来测试一下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.weight = <span class="number">70</span>;</span><br><span class="line">Person.prototype.getInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name, <span class="built_in">this</span>.age, <span class="built_in">this</span>.weight);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objectFactory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;; <span class="comment">// 创建一个新对象，也可以使用 new Object()</span></span><br><span class="line">  <span class="keyword">const</span> Constructor = [].shift.call(<span class="built_in">arguments</span>); <span class="comment">// 获取构造函数，传入参数的第一个值</span></span><br><span class="line">  obj.__proto__ = Constructor.prototype; <span class="comment">// 将对象的原型指向构造函数的原型</span></span><br><span class="line">  Constructor.apply(obj, <span class="built_in">arguments</span>); <span class="comment">// 绑定对象，为对象添加属性</span></span><br><span class="line">  <span class="keyword">return</span> obj; <span class="comment">// 返回对象</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// const person = new Person(&#x27;hzzzzzzzq&#x27;, 18);</span></span><br><span class="line"><span class="keyword">const</span> person = objectFactory(Person, <span class="string">&#x27;hzzzzzzzq&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// hzzzzzzzq</span></span><br><span class="line"><span class="built_in">console</span>.log(person.age); <span class="comment">// 18</span></span><br><span class="line"><span class="built_in">console</span>.log(person.weight); <span class="comment">// 70</span></span><br><span class="line">person.getInfo(); <span class="comment">// hzzzzzzzq 18 70</span></span><br></pre></td></tr></table></figure><p>发现，结果是一样的，这样就实现了吗？<br>当然不是，我们的构造函数如果有返回值呢？那会怎么样呢？</p><h2 id="第二版-返回值"><a href="#第二版-返回值" class="headerlink" title="第二版 - 返回值"></a>第二版 - 返回值</h2><p>我们来看看例子，由此，我们可以看见，如果构造函数带有返回值，则会导致返回值以外定义的值无效。</p><ul><li>如果是函数，则返回类型错误</li><li>如果是变量，返回 undefined</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.weight = <span class="number">70</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">name</span>: name,</span><br><span class="line">    <span class="attr">age</span>: age,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype.getInfo = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name, <span class="built_in">this</span>.age, <span class="built_in">this</span>.weight);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;hzzzzzzzq&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// hzzzzzzzq</span></span><br><span class="line"><span class="built_in">console</span>.log(person.age); <span class="comment">// 18</span></span><br><span class="line"><span class="built_in">console</span>.log(person.weight); <span class="comment">// undefined</span></span><br><span class="line">person.getInfo(); <span class="comment">// TypeError: person.getInfo is not a function</span></span><br></pre></td></tr></table></figure><p>但是返回值就一定是对象吗？结果显然是不一定。</p><p>所有，我们来看看不是对象时是什么情况：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.name = name;</span><br><span class="line">  <span class="built_in">this</span>.age = age;</span><br><span class="line">  <span class="built_in">this</span>.weight = <span class="number">70</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> person = <span class="keyword">new</span> Person(<span class="string">&#x27;hzzzzzzzq&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// hzzzzzzzq</span></span><br><span class="line"><span class="built_in">console</span>.log(person.age); <span class="comment">// 18</span></span><br><span class="line"><span class="built_in">console</span>.log(person.weight); <span class="comment">// 70</span></span><br></pre></td></tr></table></figure><p>我们发现，都正确返回了，所以我们需要进行判断</p><ul><li>构造函数返回的是一个对象，则返回这个对象</li><li>返回的是一个值，则忽略</li></ul><p>接下来我们来更改我们的代码.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">objectFactory</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">  <span class="keyword">const</span> Constructor = [].shift.call(<span class="built_in">arguments</span>);</span><br><span class="line">  obj.__proto__ = Constructor.prototype;</span><br><span class="line">  <span class="keyword">const</span> result = Constructor.apply(obj, <span class="built_in">arguments</span>); <span class="comment">// 获取 返回值</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">typeof</span> result === <span class="string">&#x27;object&#x27;</span> ? result : obj; <span class="comment">// typeof 进行判读</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>我们来小结一下 new 做的事情。</p><ul><li>创建一个空的简单 <code>JavaScript</code> 对象（即<code>&#123;&#125;</code>)</li><li>为对象添加属性<code>__proto__</code>，将该属性链接至构造函数的原型对象</li><li>将该对象作为 <code>this</code> 的上下文 ；</li><li>如果该函数没有返回对象，则返回 <code>this</code>。</li></ul><p>到此，我们就完美复刻出了 <code>new</code> 操作喽。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入系列 </tag>
            
            <tag> new </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JavaScript系列（9）：bind</title>
      <link href="//Blog/585a8d2f.html"/>
      <url>//Blog/585a8d2f.html</url>
      
        <content type="html"><![CDATA[<p><code>bind</code> 函数与 <code>call</code>,<code>apply</code> 的区别是什么呢？</p><ul><li><code>bind</code> 函数并不是直接调用的，且返回函数可以参数</li><li>参数一 与 <code>call、apply</code> 同样，指定的对象（该函数的执行上下文</li><li>其他参数与 <code>call</code> 相同，都作为参数传入，但是 <code>apply</code> 只传入一个数组参数</li></ul><p>具体对照，可以看我上面的一篇文章，<a href="https://hzzzzzzzq.github.io/Blog/e7d07533.html">《深入理解 JavaScript 系列（8）：call/apply》</a>。</p><p>我们来看 <code>bind</code> 的特点</p><ul><li>返回函数</li><li>返回函数可以传参数</li></ul><h2 id="第一版-返回函数"><a href="#第一版-返回函数" class="headerlink" title="第一版 - 返回函数"></a>第一版 - 返回函数</h2><p>我们来看一下 <code>bind</code> 执行的返回效果吧：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;hzzzzzzzq&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name, <span class="built_in">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> print = log.bind(obj);</span><br><span class="line">print();</span><br><span class="line"><span class="comment">// hzzzzzzzq 18</span></span><br></pre></td></tr></table></figure><p>由此，我们来写文吗的第一版代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> self.apply(context);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>我们来看看结果，是不是一样了呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;hzzzzzzzq&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.name, <span class="built_in">this</span>.age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> print = log.myBind(obj);</span><br><span class="line">print();</span><br><span class="line"><span class="comment">// hzzzzzzzq 18</span></span><br></pre></td></tr></table></figure><p>这时候，我们得到了一个返回值，并且绑定。</p><h2 id="第二版-传入参数"><a href="#第二版-传入参数" class="headerlink" title="第二版 - 传入参数"></a>第二版 - 传入参数</h2><p>我们来看看，不仅在 <code>bind</code> 函数中可以传入参数，其返回的函数也可以传入参数。<br>我们看下面的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.value, name, age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> print = log.bind(obj, <span class="string">&#x27;hzzzzzzzq&#x27;</span>);</span><br><span class="line">print(<span class="number">18</span>);</span><br><span class="line"><span class="comment">// 1 hzzzzzzzq 18</span></span><br></pre></td></tr></table></figure><p>我们怎么加入参数呢？</p><ol><li>我们要获取调用 bind 函数时除了第一个绑定对象以外的参数</li><li>我们要获取内部返回函数的参数</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">const</span> args = [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>); <span class="comment">// 获取从第二个开始的全部参数</span></span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> subArgs = [].slice.call(<span class="built_in">arguments</span>); <span class="comment">// 获取 bind 返回函数的内部参数</span></span><br><span class="line">    <span class="keyword">return</span> self.apply(context, args.concat(subArgs));</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>第二版写完了。</p><h2 id="第三版-作为构造函数使用的绑定函数"><a href="#第三版-作为构造函数使用的绑定函数" class="headerlink" title="第三版 - 作为构造函数使用的绑定函数"></a>第三版 - 作为构造函数使用的绑定函数</h2><p>接下来就是构造函数啦，最难的部分了。</p><blockquote><p>绑定函数自动适应于使用 <code>new</code> 操作符去构造一个由目标函数创建的新实例。当一个绑定函数是用来构建一个值的，原来提供的 <code>this</code> 就会被忽略</p></blockquote><p>我们来举个例子，看一下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">log</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">this</span>.sport = <span class="string">&#x27;playing&#x27;</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.value, name, age);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> print = log.bind(obj, <span class="string">&#x27;hzzzzzzzq&#x27;</span>);</span><br><span class="line"><span class="keyword">let</span> obj2 = <span class="keyword">new</span> print(<span class="string">&#x27;18&#x27;</span>);</span><br><span class="line"><span class="comment">// undefined hzzzzzzzq 18</span></span><br><span class="line"><span class="built_in">console</span>.log(obj2.sport); <span class="comment">// playing</span></span><br></pre></td></tr></table></figure><p>从上面结果，我们可以看出，使用 <code>new</code> 进行创建新实例时，<code>this</code> 指向绑定的 <code>obj</code> 已经失效了，返回 <code>undefined</code>。</p><p>但是为什么不会指向全局变量呢？其实就是 <code>new</code> 操作，让现在的 <code>this</code> 指向了 <code>obj2</code>。</p><p>可以来看看 <code>new</code> 操作是怎么实现的，参考我的这篇文章 - <a href="https://hzzzzzzzq.github.io/Blog/3a5c2743.html">《深入理解 JavaScript 系列（10）：new》</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> self = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">const</span> args = [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>); <span class="comment">// 获取从第二个开始的全部参数</span></span><br><span class="line">  <span class="keyword">const</span> resultFn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> subArgs = [].slice.call(<span class="built_in">arguments</span>); <span class="comment">// 获取调用时传入的参数</span></span><br><span class="line">    <span class="keyword">return</span> self.apply(</span><br><span class="line">      <span class="built_in">this</span> <span class="keyword">instanceof</span> resultFn ? <span class="built_in">this</span> : context,</span><br><span class="line">      args.concat(subArgs) <span class="comment">// 拼接参数</span></span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">  resultFn.prototype = <span class="built_in">this</span>.prototype;</span><br><span class="line">  <span class="keyword">return</span> resultFn;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>肯定有人会对这句代码有疑问 <code>this instanceof resultFn ? this : context</code>，我们来解释一下。</p><p>这里我们根据 <code>this</code> 与 <code>resultFn</code> 进行 <code>instanceof</code> 来判断是构造函数还是普通函数调用。</p><ul><li>构造函数，<code>this</code> 指向实例，判断结果为 <code>true</code>，将绑定函数的 <code>this</code> 指向该实例，可以让实例获得来自绑定函数的值。</li><li>普通函数，<code>this</code> 指向 <code>window</code>，结果为 <code>false</code>，绑定函数的 <code>this</code> 指向 <code>context</code></li></ul><p>上面的代码真的实现了吗？</p><p>好像还不够，存在问题，那就是返回函数的值修改时，也会导致原函数值的修改。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> bindObj = log.myBind(<span class="literal">null</span>);</span><br><span class="line">bindObj.prototype.name = <span class="string">&#x27;hzzzzzzzq&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.prototype.name); <span class="comment">// hzzzzzzzq</span></span><br></pre></td></tr></table></figure><h2 id="第四版-汇总"><a href="#第四版-汇总" class="headerlink" title="第四版 - 汇总"></a>第四版 - 汇总</h2><p>我们来汇总一下，我们实现 <code>bind</code> 函数的步骤。</p><p>我们还会对上面的问题进行优化 - 就是通过一个额外的函数进行中转。</p><blockquote><ol><li>判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 <code>call</code> 等方式调用的情况</li><li>保存当前函数的引用，获取其余传入参数值</li><li>创建一个函数返回</li><li>函数内部使用 <code>apply</code> 来绑定函数调用，需要判断函数作为构造函数的情况，这个时候需要传入当前函数的 <code>this</code> 给 <code>apply</code> 调用，其余情况都传入指定的上下文对象</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myBind = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;只有函数可以调用 myBind&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> self = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">const</span> args = [].slice.call(<span class="built_in">arguments</span>, <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">const</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// 中转函数</span></span><br><span class="line">  <span class="keyword">const</span> resultFn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> subArgs = [].slice.call(<span class="built_in">arguments</span>); <span class="comment">// 获取调用时传入的参数</span></span><br><span class="line">    <span class="keyword">return</span> self.apply(</span><br><span class="line">      <span class="built_in">this</span> <span class="keyword">instanceof</span> fn ? <span class="built_in">this</span> : context,</span><br><span class="line">      args.concat(subArgs) <span class="comment">// 拼接参数</span></span><br><span class="line">    );</span><br><span class="line">  &#125;;</span><br><span class="line">  fn.prototype = self.prototype;</span><br><span class="line">  resultFn.prototype = <span class="keyword">new</span> fn();</span><br><span class="line">  <span class="keyword">return</span> resultFn;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入系列 </tag>
            
            <tag> call </tag>
            
            <tag> apply </tag>
            
            <tag> bind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JavaScript系列（8）：call/apply</title>
      <link href="//Blog/e7d07533.html"/>
      <url>//Blog/e7d07533.html</url>
      
        <content type="html"><![CDATA[<h2 id="call-bind-apply-的区别"><a href="#call-bind-apply-的区别" class="headerlink" title="call bind apply 的区别"></a>call bind apply 的区别</h2><p>首先，我们先来了解一下 <code>call</code>,<code>apply</code>,<code>bind</code> 的区别，方便我们去手写实现自己的 <code>call、apply、bind</code>。</p><table><thead><tr><th>区别</th><th>bind</th><th>call</th><th>apply</th></tr></thead><tbody><tr><td>是否立即调用</td><td>否</td><td>是</td><td>是</td></tr><tr><td>参数一</td><td>指定的对象（该函数的执行上下文</td><td>指定的对象（该函数的执行上下文</td><td>指定的对象（该函数的执行上下文</td></tr><tr><td>其他参数</td><td>后面的参数都是传入函数的值</td><td>后面的参数都是传入函数的值</td><td>只有两个参数，第二个参数是数组</td></tr></tbody></table><h2 id="call-实现"><a href="#call-实现" class="headerlink" title="call 实现"></a>call 实现</h2><p>我们可以分为七个步骤：</p><blockquote><ol><li>判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 <code>call</code> 等方式调用的情况</li><li>判断传入上下文对象是否存在，如果不存在，则设置为 <code>window</code></li><li>处理传入的参数，截取第一个参数后的所有参数</li><li>将函数作为上下文对象的一个属性</li><li>使用上下文对象来调用这个方法，并保存返回结果</li><li>删除刚才新增的属性</li><li>返回结果</li></ol></blockquote><h3 id="第一版"><a href="#第一版" class="headerlink" title="第一版"></a>第一版</h3><p><code>call</code> 在使用一个指定的 <code>this</code> 值和若干个指定的参数值的前提下调用某个参数或方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> foo = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line">fn.call(foo); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>我们来看看步骤：</p><ul><li>第一步就不用多说了，你可以直接使用一个 <code>Object</code> 对象去调用试一下，是抛出了一个错误的，这里我们用打印来表示。</li><li>第二步就是获取该方法的上下文对象，并调用这个方法了。</li><li>第三步就是删除新增的属性。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;只有函数可以调用 myCall&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  context.fn = <span class="built_in">this</span>;</span><br><span class="line">  context.fn();</span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这时候我们会发现打印结果对上了，也是 <code>2</code>。</p><h3 id="第二版"><a href="#第二版" class="headerlink" title="第二版"></a>第二版</h3><p>接下来就是处理参数了，从区别可以知道，<code>call</code> 是可以有无数参数的，我们在第二步之前添加一个步骤。</p><p>先来看看真实 <code>call</code> 的测试。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> value = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> foo = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.value);</span><br><span class="line">  <span class="built_in">console</span>.log(name);</span><br><span class="line">  <span class="built_in">console</span>.log(age);</span><br><span class="line">&#125;</span><br><span class="line">fn.call(foo, <span class="string">&#x27;hzzzzzzzq&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// hzzzzzzzq</span></span><br><span class="line"><span class="comment">// 18</span></span><br></pre></td></tr></table></figure><ul><li>获取第二个参数开始的全部参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;只有函数可以调用 myCall&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">let</span> args = [...arguments].slice(<span class="number">1</span>); <span class="comment">// 截取参数</span></span><br><span class="line">  context.fn = <span class="built_in">this</span>;</span><br><span class="line">  context.fn(...args); <span class="comment">// 给函数传入参数</span></span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>使用我们的 <code>myCall</code> 执行，发现结果是相同的。</p><h3 id="最后版"><a href="#最后版" class="headerlink" title="最后版"></a>最后版</h3><p>在这里我们需要注意两个问题</p><ul><li>传入的对象是 <code>null</code></li></ul><p>注意，我将外层的定义 <code>let</code> 改成了 <code>var</code>，因为 <code>var</code> 设置了全局变量，如果设置 <code>let</code> 则会打印 <code>undefined</code>，并没有在 <code>window</code> 对象中定义。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> foo = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.value);</span><br><span class="line">&#125;</span><br><span class="line">fn.call(<span class="literal">null</span>); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>执行代码，可以知道，传入 <code>null</code> 时，指向了我们的 <code>window</code> 对象。</p><ul><li>对象可以有返回值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> foo = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="built_in">this</span>.value,</span><br><span class="line">    name,</span><br><span class="line">    age,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> result = fn.call(foo, <span class="string">&#x27;hzzzzzzzq&#x27;</span>, <span class="number">18</span>);</span><br><span class="line"><span class="built_in">console</span>.log(result);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   value: 2,</span></span><br><span class="line"><span class="comment">//   name: &#x27;hzzzzzzzq&#x27;,</span></span><br><span class="line"><span class="comment">//   age: 18</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><ul><li>最后代码全代码</li></ul><p>首先处理传入 null 的时候，判断传入上下文对象是否存在，如果不存在，则设置为 <code>window</code>。<br>处理第二个问题则是将方法执行结果进行保留，返回结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myCall = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="comment">// 判断，在手写过程中 可以不需要</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;只有函数可以调用 myCall&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  context = context || <span class="built_in">window</span>; <span class="comment">// 判断上下文对象是否存在</span></span><br><span class="line">  context.fn = <span class="built_in">this</span>; <span class="comment">// 将函数作为上下文的一个属性</span></span><br><span class="line">  <span class="keyword">let</span> args = [...arguments].slice(<span class="number">1</span>); <span class="comment">// 获取传入的参数，从第二个参数起的所有参数</span></span><br><span class="line">  <span class="keyword">const</span> result = context.fn(...args); <span class="comment">// 执行该函数，并使用上面的参数</span></span><br><span class="line">  <span class="keyword">delete</span> context.fn; <span class="comment">// 删除新增对象</span></span><br><span class="line">  <span class="keyword">return</span> result; <span class="comment">// 返回结果</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>测试一下我们自己写的 <code>call</code> 代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.value);</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">    <span class="attr">value</span>: <span class="built_in">this</span>.value,</span><br><span class="line">    <span class="attr">name</span>: name,</span><br><span class="line">    <span class="attr">age</span>: age,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(test.myCall(obj, <span class="string">&#x27;hzq&#x27;</span>, <span class="number">18</span>));</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   &quot;value&quot;: 1,</span></span><br><span class="line"><span class="comment">//   &quot;name&quot;: &quot;hzq&quot;,</span></span><br><span class="line"><span class="comment">//   &quot;age&quot;: 18</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h2 id="apply-实现"><a href="#apply-实现" class="headerlink" title="apply 实现"></a>apply 实现</h2><p>我们首先了解了三者的区别，我们发现 <code>apply</code> 与 <code>call</code> 的区别，就在于传入的参数，针对这一区别，我们开始实现 <code>apply</code>，就只需要对 <code>call</code> 的代码进行部分修改即可。</p><blockquote><ol><li>判断调用对象是否为函数，即使我们是定义在函数的原型上的，但是可能出现使用 <code>call</code> 等方式调用的情况</li><li>判断传入上下文对象是否存在，如果不存在，则设置为 <code>window</code></li><li>将函数作为上下文对象的一个属性</li><li>判断参数值是否传入</li><li>使用上下文对象来调用这个方法，并保存返回结果</li><li>删除刚才新增的属性</li><li>返回结果</li></ol></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.myApply = <span class="function"><span class="keyword">function</span> (<span class="params">context, arr</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">typeof</span> <span class="built_in">this</span> !== <span class="string">&#x27;function&#x27;</span>) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;只有函数可以调用 myApply&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  context = context || <span class="built_in">window</span>;</span><br><span class="line">  context.fn = <span class="built_in">this</span>;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">if</span> (!arr) &#123;</span><br><span class="line">    <span class="comment">// 数组没有值时，直接调用</span></span><br><span class="line">    result = context.fn();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="comment">// 数组有值，传入参数</span></span><br><span class="line">    result = context.fn(...arr);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> context.fn;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>测试与 <code>call</code> 类似，只是修改了传入参数为数组, 打印结果相同。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(test.myApply(obj, [<span class="string">&#x27;hzq&#x27;</span>, <span class="number">18</span>]));</span><br></pre></td></tr></table></figure><h2 id="文章参考"><a href="#文章参考" class="headerlink" title="文章参考"></a>文章参考</h2><p><a href="https://github.com/mqyqingfeng/Blog/issues/11">JavaScript 深入之 call 和 apply 的模拟实现</a></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入系列 </tag>
            
            <tag> call </tag>
            
            <tag> apply </tag>
            
            <tag> bind </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JavaScript系列（7）：闭包</title>
      <link href="//Blog/37b21b75.html"/>
      <url>//Blog/37b21b75.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>闭包，在外面介绍了前面的之后，就可以了解我们的闭包了。</p><p><strong>概念</strong></p><blockquote><p>一个函数和对其周围状态（lexical environment，词法环境）的引用捆绑在一起（或者说函数被引用包围），这样的组合就是闭包（closure）。也就是说，闭包让你可以在一个内层函数中访问到其外层函数的作用域</p></blockquote><p>我们先来简单回顾一下执行上下文的第二个例子吧。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;hzq&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;hzzzzzzzq&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">checkName()(); <span class="comment">// hzzzzzzzq</span></span><br></pre></td></tr></table></figure><p>我们这上面这段代码来看一下执行上下文栈和执行上下文的情况。</p><ol><li>进入全局代码创建全局上下文，<code>globalContext</code> 入栈</li><li>全局代码执行</li><li>执行 <code>checkName</code> 函数，创建 <code>checkName</code> 函数执行上下文，<code>checkNameContext</code> 入栈</li><li><code>checkName</code> 执行上下文初始化，创建变量对象、作用域链、<code>this</code> 等</li><li><code>checkName</code> 函数执行完毕，出栈</li><li>执行 <code>fn</code> 函数，创建 <code>fn</code> 函数执行上下文，<code>fn</code> 函数上下文入栈</li><li><code>fn</code> 执行上下文初始化，创建变量对象、作用域链、<code>this</code> 等</li><li><code>fn</code> 函数执行完毕，<code>fn</code> 函数上下文弹出</li><li>执行其他全局代码，代码执行完毕，全局上下文弹出</li></ol><p>我们看这个过程时，发现 <code>checkName</code> 函数已经不在执行上下文栈中，为什么还可以取到 <code>name</code> 的值呢？</p><p>从 <a href="https://hzzzzzzzq.github.io/Blog/ba016a6f.html">《深入理解 JavaScript 系列（4）：作用域链》</a> 中，我们了解到，<code>fn</code> 函数，其实维护了一个作用域链，可以看看。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fnContext = &#123;</span><br><span class="line">  <span class="attr">Scope</span>: [AO, fnContext.AO, globalContext.VO],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>所有，其实 <code>fn1</code> 取到的就是上层的函数。就是因为作用域链，实现了父级函数即使被销毁，也可以取到值。</p><p>我们先举一个简单的闭包使用方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> count = <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> ++count;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn1 = fn();</span><br><span class="line"><span class="built_in">console</span>.log(fn1()); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(fn1()); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(fn1()); <span class="comment">// 4</span></span><br><span class="line"><span class="built_in">console</span>.log(fn1()); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(fn1()); <span class="comment">// 6</span></span><br></pre></td></tr></table></figure><p>我们的执行过程类似，但是在作用域链中保存着值，可以进行修改，也导致了一个问题，也就是内存删除不干净，内存泄露。</p><h2 id="必刷面试题"><a href="#必刷面试题" class="headerlink" title="必刷面试题"></a>必刷面试题</h2><p>我们来看一道经典的闭包面试题。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  data[i] = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line">data[<span class="number">2</span>](); <span class="comment">// 5</span></span><br><span class="line">data[<span class="number">3</span>](); <span class="comment">// 5</span></span><br><span class="line">data[<span class="number">4</span>](); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>这题是我们经常遇到的题目，为什么打印的全是 <code>5</code> 呢？</p><p>我们来看一下全局上下文中，执行函数之前的 <code>globalContext</code>，如果对此有问题，可以去看一下前面的几篇文章。<a href="https://hzzzzzzzq.github.io/Blog/38c87206.html">《深入理解 JavaScript 系列（2）：执行上下文栈》</a>、<a href="https://hzzzzzzzq.github.io/Blog/2d9b7c22.html">《深入理解 JavaScript 系列（3）：变量对象》</a>、<a href="https://hzzzzzzzq.github.io/Blog/ba016a6f.html">《深入理解 JavaScript 系列（4）：作用域链》</a>、<a href="https://hzzzzzzzq.github.io/Blog/ea626e9c.html">《深入理解 JavaScript 系列（5）：this》</a>。</p><p>我们来看一下上面代码的全局上下文(<code>globalContext</code>) 的内容是什么。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">globalContext = &#123;</span><br><span class="line">  <span class="attr">VO</span>: &#123;</span><br><span class="line">    <span class="attr">data</span>: [...], <span class="comment">// item =&gt; function</span></span><br><span class="line">    <span class="attr">i</span>: <span class="number">5</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">Scope</span>: [globalContext.VO],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样就一定都打印 <code>5</code> 了吗？ 不是的，我们还需要看看 <code>data</code> 中函数的上下文。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="number">0</span>]Context = &#123;</span><br><span class="line">  <span class="attr">AO</span>: &#123;</span><br><span class="line">    <span class="attr">arguments</span>: &#123;</span><br><span class="line">      <span class="attr">length</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">Scope</span>: [AO, globalContext.VO],</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，我们在 <code>data[0]</code> 函数中没有找到结果 <code>i</code>，于是从 <code>global</code> 中寻找，于是找到结果为 <code>5</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> data = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  data[i] = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(i);</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;)();</span><br><span class="line">&#125;</span><br><span class="line">data[<span class="number">2</span>](); <span class="comment">// 2</span></span><br><span class="line">data[<span class="number">3</span>](); <span class="comment">// 3</span></span><br><span class="line">data[<span class="number">4</span>](); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><p>这变成了一个立即执行函数。</p><p>我们在全局上下文的 VO 是没有变化的。</p><p>但是我们来看看 <code>data[0]</code> 函数执行时，其中有一个是匿名函数，我们假设为 <code>NoName</code> 函数，我们来看一下 <code>data[0]</code> 的上下文</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data[<span class="number">0</span>]Context = &#123;</span><br><span class="line">  <span class="attr">AO</span>: &#123;</span><br><span class="line">    <span class="attr">arguments</span>: &#123;</span><br><span class="line">        <span class="attr">length</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">Scope</span>: [AO, NoNameContext.AO, globalContext.VO]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在来看看匿名函数的上下文</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">NoNameContext = &#123;</span><br><span class="line">  <span class="attr">AO</span>: &#123;</span><br><span class="line">    <span class="attr">arguments</span>: &#123;</span><br><span class="line">      <span class="attr">length</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">i</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">Scope</span>: [AO, globalContext.VO],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>所以，这时候执行时，找到了 <code>i = 0</code>，返回结果。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入系列 </tag>
            
            <tag> 闭包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JavaScript系列（6）：执行上下文</title>
      <link href="//Blog/8208289.html"/>
      <url>//Blog/8208289.html</url>
      
        <content type="html"><![CDATA[<p>在<a href="https://hzzzzzzzq.github.io/Blog/38c87206.html">《深入理解 JavaScript 系列（2）：执行上下文栈》</a>中提到，当 JavaScript 代码执行代码时，就会创建一个执行上下文。</p><p>对于执行上下文，都有三个重要属性：</p><ul><li>变量对象 (Variable Object - VO)</li><li>作用域链</li><li>this</li></ul><p>分别单独介绍了三个属性 - <a href="https://hzzzzzzzq.github.io/Blog/2d9b7c22.html">《深入理解 JavaScript 系列（3）：变量对象》</a>、<a href="https://hzzzzzzzq.github.io/Blog/ba016a6f.html">《深入理解 JavaScript 系列（4）：作用域链》</a>、<a href="https://hzzzzzzzq.github.io/Blog/ea626e9c.html">《深入理解 JavaScript 系列（5）：this》</a>。</p><p>我们在上面的文章中，不止一次提到过执行上下文这个东西，然后每次都是分开介绍的，并不完全，现在我们就来整合一下执行上下文吧。</p><h2 id="执行上下文-例子一"><a href="#执行上下文-例子一" class="headerlink" title="执行上下文 - 例子一"></a>执行上下文 - 例子一</h2><p>我们直接给出一个例子吧，然后来看看什么是执行上下文吧。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;hzq&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;hzzzzzzzq&#x27;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fn();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(checkName()); <span class="comment">// hzzzzzzzq</span></span><br></pre></td></tr></table></figure><h3 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h3><p><strong>1. 执行全局代码，创建全局上下文，并压入执行上下文栈</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [globalContext];</span><br></pre></td></tr></table></figure><p><strong>2. 全局上下文初始化，同时创建 <code>checkName</code> 函数，保存作用域链到函数内部属性 <code>[[scope]]</code></strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">globalContext = &#123;</span><br><span class="line">  <span class="attr">VO</span>: [<span class="built_in">global</span>],</span><br><span class="line">  <span class="attr">Scope</span>: [globalContext.VO],</span><br><span class="line">  <span class="attr">this</span>: globalContext.VO,</span><br><span class="line">&#125;;</span><br><span class="line">checkName.[[scope]] = [</span><br><span class="line">  globalContext.VO</span><br><span class="line">];</span><br></pre></td></tr></table></figure><p><strong>3. 执行 checkName 函数，创建函数上下文，并压入栈</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [checkNameContext, globalContext];</span><br></pre></td></tr></table></figure><p><strong>4. checkName 函数执行上下文初始化: | 这时候 <code>fn</code> 函数也被创建，保存 <code>[[scope]]</code></strong></p><ul><li>复制函数 <code>[[scope]]</code> 属性</li><li>arguments 创建活动对象</li><li>初始化活动对象，加入形参、函数声明、变量声明</li><li>将活动对象压入函数作用域链顶端</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">checkNameContext = &#123;</span><br><span class="line">  <span class="attr">AO</span>: &#123;</span><br><span class="line">    <span class="attr">arguments</span>: &#123;</span><br><span class="line">      <span class="attr">length</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">name</span>: <span class="literal">undefined</span>,</span><br><span class="line">    <span class="attr">fn</span>: reference to <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">Scope</span>: [AO, globalContext.VO],</span><br><span class="line">  <span class="attr">this</span>: <span class="literal">undefined</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn 函数保存 [[scope]]</span></span><br><span class="line"></span><br><span class="line">fn.[[scope]] = [</span><br><span class="line">  checkNameContext.AO, gloablContext.VO</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p><strong>5. 执行 <code>fn</code> 函数，创建上下文，压入栈</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [fnContext, checkNameContext, globalContext];</span><br></pre></td></tr></table></figure><p><strong>6. <code>fn</code> 函数执行上下文初始化</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fnContext = &#123;</span><br><span class="line">  <span class="attr">AO</span>: &#123;</span><br><span class="line">    <span class="attr">arguments</span>: &#123;</span><br><span class="line">      <span class="attr">length</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">Scope</span>: [AO, checkNameContext.AO, globalContext.VO],</span><br><span class="line">  <span class="attr">this</span>: <span class="literal">undefined</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>7. <code>fn</code> 通过作用域链查找 <code>name</code> 属性，并返回</strong></p><p><strong>8. fn 函数指向完毕，出栈</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [checkNameContext, globalContext];</span><br></pre></td></tr></table></figure><p><strong>9. <code>checkName</code> 函数执行完毕，出栈</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [globalContext];</span><br></pre></td></tr></table></figure><p><strong>10. 继续执行其他全局代码，直到其他代码执行完毕，全局上下文出栈</strong></p><h2 id="执行上下文-例子二"><a href="#执行上下文-例子二" class="headerlink" title="执行上下文 - 例子二"></a>执行上下文 - 例子二</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;hzq&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;hzzzzzzzq&#x27;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> fn;</span><br><span class="line">&#125;</span><br><span class="line">checkName()(); <span class="comment">// hzzzzzzzq</span></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">let</span> fn = checkName();</span><br><span class="line">fn();</span><br></pre></td></tr></table></figure><h3 id="执行过程-变化点"><a href="#执行过程-变化点" class="headerlink" title="执行过程 - 变化点"></a>执行过程 - 变化点</h3><p>我们直接来看看例子二与例子一的不同点。</p><p><strong>5. <code>checkName</code> 函数执行完毕，出栈</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [globalContext];</span><br></pre></td></tr></table></figure><p><strong>6. 执行 <code>fn</code> 函数，创建上下文，压入栈</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [fnContext, globalContext];</span><br></pre></td></tr></table></figure><p><strong>7. <code>fn</code> 函数执行上下文初始化</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fnContext = &#123;</span><br><span class="line">  <span class="attr">AO</span>: &#123;</span><br><span class="line">    <span class="attr">arguments</span>: &#123;</span><br><span class="line">      <span class="attr">length</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">Scope</span>: [AO, checkNameContext.AO, globalContext.VO],</span><br><span class="line">  <span class="attr">this</span>: <span class="literal">undefined</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>8. <code>fn</code> 函数执行完毕，出栈</strong></p><p><strong>9. 执行全局其他代码，执行完毕，全局上下文出栈</strong></p><p>是不是很简单呢？</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入系列 </tag>
            
            <tag> 执行上下文 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JavaScript系列（5）：this</title>
      <link href="//Blog/ea626e9c.html"/>
      <url>//Blog/ea626e9c.html</url>
      
        <content type="html"><![CDATA[<p>在<a href="https://hzzzzzzzq.github.io/Blog/38c87206.html">《深入理解 JavaScript 系列（2）：执行上下文栈》</a>中提到，当 JavaScript 代码执行代码时，就会创建一个执行上下文。</p><p>对于执行上下文，都有三个重要属性：</p><ul><li>变量对象 (Variable Object - VO)</li><li>作用域链</li><li>this</li></ul><p>我们来介绍一下 this。</p><h2 id="this"><a href="#this" class="headerlink" title="this"></a>this</h2><p>什么是 this 呢？我们可以把 this 的指向当作执行时所指向的执行上下文。在不同的上下文中，this 的确定经常会发生问题。</p><p>this 是执行上下文中的一个属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">globalContext = &#123;</span><br><span class="line">  <span class="attr">VO</span>: &#123;...&#125;,</span><br><span class="line">  <span class="attr">this</span>: globalContext.VO,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>VO 就是上一节讲到的变量对象了。</p><p><strong>this 与上下文中可执行代码的类型有直接关系，this 值在进入上下文时确定，并且在上下文运行期间永久不变</strong></p><h2 id="全局代码中的-this"><a href="#全局代码中的-this" class="headerlink" title="全局代码中的 this"></a>全局代码中的 this</h2><p>全局代码中的 this 始终是全局对象本身。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">this</span>.a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.b); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c = <span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.c); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>那么全局对象本身是什么呢？在浏览器中就是我们经常使用的 <code>window</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// window 对象</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>); <span class="comment">// window 对象</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span> === <span class="built_in">window</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="函数中的-this"><a href="#函数中的-this" class="headerlink" title="函数中的 this"></a>函数中的 this</h2><p>函数中的 this 是很奇特的，也是很有趣的。它的指向并不是固定的，而且可以通过手动进行修改。</p><p>我们在上面介绍到，<strong>this 是进入上下文时确定</strong>，所以在一个函数代码中，这个值在每一次完全不同。</p><p>注意：任何时候不能改变 this 的值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> objBind = &#123; <span class="attr">value</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">test</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span> === obj);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.value);</span><br><span class="line">    <span class="comment">// this = objBind; // 报错，任何时候不能改变 this 的值</span></span><br><span class="line">    <span class="comment">// console.log(this.value);</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们来执行一下</span></span><br><span class="line">obj.test(); <span class="comment">// true, 1</span></span><br><span class="line"></span><br><span class="line">objBind.test = obj.test;</span><br><span class="line"></span><br><span class="line">objBind.test(); <span class="comment">// false, 2</span></span><br></pre></td></tr></table></figure><p>我们看到结果的结果是不同的。<br>发现，指向的结果是不是跟调用它的对象有关呢？事实就是这样，<strong>谁调用就指向谁</strong>。</p><p>我们使用 <code>obj</code> 来调用 <code>test</code> 方法时，指向了 <code>obj</code>，打印 <code>true</code>，而我们将方法赋给 <code>objBind</code> 之后，<code>objBind</code> 来调用时，指向了 <code>objBind</code>。</p><p>我们来看一下执行 <code>test</code> 方法时，<code>test</code> 上下文：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// obj 调用执行</span></span><br><span class="line">testContext = &#123;</span><br><span class="line">  <span class="attr">AO</span>: &#123;...&#125;,</span><br><span class="line">  <span class="attr">this</span>: obj,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// objBind 调用执行</span></span><br><span class="line">testContext = &#123;</span><br><span class="line">  <span class="attr">AO</span>: &#123;...&#125;,</span><br><span class="line">  <span class="attr">this</span>: objBind,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上下文，我们可以清楚的了解到 <code>this</code> 在运行中的指向。</p><p>我们来看一下还有一种方式，指向了全局对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> test = obj.test;</span><br><span class="line">test(); <span class="comment">// false, undefined</span></span><br></pre></td></tr></table></figure><p>这时候执行 test 时的上下文：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">testContext = &#123;</span><br><span class="line">  <span class="attr">AO</span>: &#123;...&#125;,</span><br><span class="line">  <span class="attr">this</span>: <span class="built_in">window</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="作为构造函数下的-this"><a href="#作为构造函数下的-this" class="headerlink" title="作为构造函数下的 this"></a>作为构造函数下的 this</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Constructor</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// &quot;a&quot;对象下创建一个新属性</span></span><br><span class="line">  <span class="built_in">this</span>.value = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> x = <span class="keyword">new</span> Constructor();</span><br><span class="line"><span class="built_in">console</span>.log(x.value); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   &quot;value&quot;: 1</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h2 id="函数调用时，手动设置-this"><a href="#函数调用时，手动设置-this" class="headerlink" title="函数调用时，手动设置 this"></a>函数调用时，手动设置 this</h2><p>在这里就要使用到 <code>Function.prototype.apply</code> 或 <code>Function.prototype.call</code> 了。</p><p>在这里也介绍了 <code>apply</code> 和 <code>call</code> 以及 <code>bind</code>，可以看我的这两篇文章 - <a href="https://hzzzzzzzq.github.io/Blog/e7d07533.html">《深入理解 JavaScript 系列（8）： call/apply 函数》</a> 与 <a href="https://hzzzzzzzq.github.io/Blog/585a8d2f.html">《深入理解 JavaScript 系列（9）： bind 函数》</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">a</span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="built_in">this</span>.value);</span><br><span class="line">  <span class="built_in">console</span>.log(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(<span class="number">2</span>); <span class="comment">// undefined, 2</span></span><br><span class="line">fn.call(obj, <span class="number">20</span>); <span class="comment">// 1, 20</span></span><br><span class="line">fn.apply(obj, [<span class="number">20</span>]); <span class="comment">// 1, 20</span></span><br></pre></td></tr></table></figure><h2 id="多言一句-箭头函数指向"><a href="#多言一句-箭头函数指向" class="headerlink" title="多言一句 - 箭头函数指向"></a>多言一句 - 箭头函数指向</h2><p>箭头函数的 <code>this</code> 指向，不能按照上面的任何一种来。</p><p>箭头函数的 <code>this</code> 指向，<strong>是在定义时决定的，而不是在调用时决定</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> value = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">value</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">test</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// window 对象</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="built_in">this</span>.value); <span class="comment">// 1</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 按照上面的想法，打印出来的应该是 2，而实际打印的是 1</span></span><br><span class="line">obj.test();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入系列 </tag>
            
            <tag> 执行上下文 </tag>
            
            <tag> this </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JavaScript系列（4）：作用域链</title>
      <link href="//Blog/ba016a6f.html"/>
      <url>//Blog/ba016a6f.html</url>
      
        <content type="html"><![CDATA[<p>在<a href="https://hzzzzzzzq.github.io/Blog/38c87206.html">《深入理解 JavaScript 系列（2）：执行上下文栈》</a>中提到，当 JavaScript 代码执行代码时，就会创建一个执行上下文。</p><p>对于执行上下文，都有三个重要属性：</p><ul><li>变量对象 (Variable Object - VO)</li><li>作用域链</li><li>this</li></ul><p>我们来介绍一下作用域链。</p><h2 id="作用域链"><a href="#作用域链" class="headerlink" title="作用域链"></a>作用域链</h2><p>在查找变量的时候，会先从当前上下文的变量对象中查找，如果没找到，就会从上一级的执行上下文的变量对象中查找，直到找到全局对象为止。</p><p>而这样由多个执行上下文的变量对象构成的链表就时作用域链。</p><h2 id="函数创建"><a href="#函数创建" class="headerlink" title="函数创建"></a>函数创建</h2><p>每一个函数都有自己的作用域，内部有一个 <code>[[scope]]</code> 属性，当函数创建时，就会保存所有父级变量对象到其中，简单来说，<code>[[scope]]</code> 就是所有父级变量对象的层级链。<br>注意：<code>[[scope]]</code> 并不能代表完整的作用域链。</p><p>我们来看一个例子吧</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>函数创建时，我们来看看每一个函数的 <code>[[scope]]</code> 为：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">fn1.[[scope]] = [</span><br><span class="line">  globalContext.VO</span><br><span class="line">];</span><br><span class="line">fn2.[[scope]] = [</span><br><span class="line">  fn1Context.AO,</span><br><span class="line">  globalContext.VO</span><br><span class="line">];</span><br><span class="line">fn3.[[scope]] = [</span><br><span class="line">  fn2Context.AO,</span><br><span class="line">  fn1Context.AO,</span><br><span class="line">  globalContext.VO</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="函数激活"><a href="#函数激活" class="headerlink" title="函数激活"></a>函数激活</h2><p>当函数激活时，进入函数上下文，创建 <code>VO/AO</code> 后，就会将活动对象添加到作用域链的前端。</p><p>在执行上下文中，我们将作用域链命名为 <code>Scope</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Scope = [AO].concat([[Scope]]);</span><br></pre></td></tr></table></figure><p>我们来举个例子吧，对《JavaScript 权威指南》 中的例子进行修改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> name = <span class="string">&#x27;hzq&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkname</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;hzzzzzzzq&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line">checkname();</span><br></pre></td></tr></table></figure><p>来看看执行过程吧</p><ul><li>创建 checkname 函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">checkname.[[scope]] = [</span><br><span class="line">  globalContext.VO</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>创建 checkname 函数执行上下文，并将 checkname 函数执行上下文压入执行上下文栈</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [checknameContext, globalContext];</span><br></pre></td></tr></table></figure><ul><li>checkname 函数分析阶段 - 复制函数[[scope]]属性创建作用域链，并进行 <code>AO</code> 的创建。如何创建看<a href="https://hzzzzzzzq.github.io/Blog/2d9b7c22.html">《深入理解 JavaScript 系列（3）：变量对象》</a>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">checknameContext = &#123;</span><br><span class="line">    <span class="attr">AO</span>: &#123;</span><br><span class="line">      <span class="attr">arguments</span>: &#123;</span><br><span class="line">        <span class="attr">length</span>: <span class="number">0</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">name</span>: <span class="literal">undefined</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">Scope</span>: checkname.[[scope]]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>将活动对象压入 checkname 作用域链顶端</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">checknameContext = &#123;</span><br><span class="line">  <span class="attr">AO</span>: &#123;</span><br><span class="line">    <span class="attr">arguments</span>: &#123;</span><br><span class="line">      <span class="attr">length</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">name</span>: <span class="literal">undefined</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">Scope</span>: [AO, [[Scope]]],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>开始执行函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">checknameContext = &#123;</span><br><span class="line">  <span class="attr">AO</span>: &#123;</span><br><span class="line">    <span class="attr">arguments</span>: &#123;</span><br><span class="line">      <span class="attr">length</span>: <span class="number">0</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&#x27;hzzzzzzzq&#x27;</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">Scope</span>: [AO, [[Scope]]],</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>返回 <code>name</code>，在一开始就找到了，所有直接返回该值，函数执行完毕。函数上下文弹出执行上下文栈。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ECStack = [globalContext];</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入系列 </tag>
            
            <tag> 执行上下文 </tag>
            
            <tag> 作用域 </tag>
            
            <tag> 作用域链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JavaScript系列（3）：变量对象</title>
      <link href="//Blog/2d9b7c22.html"/>
      <url>//Blog/2d9b7c22.html</url>
      
        <content type="html"><![CDATA[<p>在<a href="https://hzzzzzzzq.github.io/Blog/38c87206.html">《深入理解 JavaScript 系列（2）：执行上下文栈》</a>中提到，当 JavaScript 代码执行代码时，就会创建一个执行上下文。</p><p>对于执行上下文，都有三个重要属性：</p><ul><li>变量对象 (Variable Object - VO)</li><li>作用域链</li><li>this</li></ul><p>我们先来介绍一下变量对象。</p><h2 id="变量对象"><a href="#变量对象" class="headerlink" title="变量对象"></a>变量对象</h2><p>变量对象是与执行上下文相关的数据作用域，存储了在上下文中定义的变量和函数声明。</p><p>然而，由于不同执行上下文的变量对象都存在不同，所以今天我们分不同模块来聊一下不同的变量对象。</p><ul><li><p>全局上下文的变量对象</p></li><li><p>函数上下文的变量对象</p></li></ul><h2 id="全局对象"><a href="#全局对象" class="headerlink" title="全局对象"></a>全局对象</h2><p>全局上下文中的变量对象就是全局对象。全局变量是在所有作用域都可访问的变量，与之对应的是局部变量</p><blockquote><p>全局对象预定义的对象，作为 JavaScript 的全局函数和全局属性的占位符。通过使用全局对象，可以访问所有其他。</p></blockquote><ul><li>可以通过 <code>this</code> 引用，在客户端中，全局对象就是 <code>Window</code> 对象，可以通过浏览器查看。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>); <span class="comment">// window 对象</span></span><br></pre></td></tr></table></figure><ul><li>全局对象是由 <code>Object</code> 构造函数实例化的一个对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span> <span class="keyword">instanceof</span> Obejct); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>全局对象中预定义了一堆函数和属性，比如 <code>Math</code> 的一些方法。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.pow(<span class="number">2</span>, <span class="number">2</span>)); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><ul><li>作为全局变量的存储对象。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.a); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><ul><li>客户端中，全局对象有 <code>window</code> 属性指向自身</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">window</span>.a); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">this</span>.window.b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">this</span>.b); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h2 id="函数上下文"><a href="#函数上下文" class="headerlink" title="函数上下文"></a>函数上下文</h2><p>函数上下文中，<code>VO</code> 时不能直接访问的，所以用活动对象(<code>Activation Object，OA</code>)来表示变量对象。<br>但是其实是一个东西，只不过在变量对象的规范上来说，是有区别的。<br><code>AO</code> 是在进入函数上下文时才被创建的，它通过 <code>arguments</code> 属性来初始化。<code>arguments</code> 属性就是 <code>Argumens</code> 对象。</p><p><code>Arguments</code> 对象是 <code>AO</code> 对象的一个属性，它包括如下属性：</p><ul><li><code>callee</code> - 指向参数所属的当前执行的函数，指向调用当前函数的函数</li><li><code>length</code> - 传递给函数的参数数量</li><li><code>arguments[@@iterator]</code> - 返回一个新的 Array 迭代器对象，该对象包含参数中每个索引的值</li></ul><h2 id="执行过程"><a href="#执行过程" class="headerlink" title="执行过程"></a>执行过程</h2><p>执行上下文，会分为两个阶段，分析阶段和执行阶段。</p><ul><li>进入执行上下文</li><li>执行代码</li></ul><h3 id="分析阶段"><a href="#分析阶段" class="headerlink" title="分析阶段"></a>分析阶段</h3><p>当进入分析阶段时，这时候还没有执行代码。</p><p>变量对象包括：</p><ul><li><p>函数的所有形参 (如果是函数上下文)<br>由名称和对应值组成的一个变量对象的属性被创建，属性值为 undefined</p></li><li><p>函数声明<br>由名称和对应值(函数对象)组成一个变量对象的属性被创建，如果变量对象已经存在相同名称的属性，则完全替换这个属性</p></li><li><p>变量声明</p><ul><li>由名称和对应值(<code>undefined</code>)组成一个变量对象的属性被创建</li><li><strong>如果变量对象名称跟已经声明的形式参数或函数相同，则声明变量不会干扰已经存在的这类属性</strong></li></ul></li></ul><p>我们来举个例子</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params">age</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name = <span class="string">&#x27;hzzzzzzzq&#x27;</span>;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">  <span class="keyword">var</span> fn3 = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;&#125;; <span class="comment">// 其实也算是一个变量</span></span><br><span class="line"></span><br><span class="line">  name = <span class="string">&#x27;hzq&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(<span class="number">18</span>);</span><br></pre></td></tr></table></figure><p>我们来看看进入执行上下文的分析阶段的 AO 是</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">AO = &#123;</span><br><span class="line">  <span class="comment">// 函数的形参</span></span><br><span class="line">  <span class="attr">arguments</span>: &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="literal">undefined</span>, <span class="comment">// 变量声明</span></span><br><span class="line">  <span class="attr">fn2</span>: reference to <span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;&#125;, <span class="comment">// 函数声明</span></span><br><span class="line">  <span class="attr">fn3</span>: <span class="literal">undefined</span> <span class="comment">// 变量声明</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="执行阶段"><a href="#执行阶段" class="headerlink" title="执行阶段"></a>执行阶段</h3><p>在代码执行阶段中，会顺序来执行代码，根据代码，修改变量对象的值。</p><p>我们将上面的代码执行完毕后，来看看 AO ：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">AO = &#123;</span><br><span class="line">  <span class="attr">arguments</span>: &#123;</span><br><span class="line">    <span class="number">0</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">length</span>: <span class="number">1</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;hzq&#x27;</span>,</span><br><span class="line">  <span class="attr">fn2</span>: reference to <span class="function"><span class="keyword">function</span> <span class="title">fun2</span>(<span class="params"></span>) </span>&#123;&#125;,</span><br><span class="line">  <span class="attr">fn3</span>: reference to FunctionExpression <span class="string">&quot;fn3&quot;</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其实到目前为止，我们的介绍已经结束了。但是肯定不过瘾，或许还不太懂，所以我们…</p><h2 id="再来个例子"><a href="#再来个例子" class="headerlink" title="再来个例子"></a>再来个例子</h2><p>再来看个例子吧。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">  x = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">fn1();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  x = <span class="number">1</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">fn1();</span><br></pre></td></tr></table></figure><p>可以来看看上面的代码，打印的是什么呢？<br>第一个打印 <code>Uncaught ReferenceError: x is not defined</code><br>第二个打印 <code>1</code></p><p>这又是为什么呢？</p><p>第一个例子中，我们来看看执行上下文时的 <code>AO</code>，因为我们在创建时 <code>AO</code> 对象中没有找到 <code>x</code> 变量，并且往全局变量中找也没有找到，所以报错。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">AO = &#123;</span><br><span class="line">  <span class="attr">arguments</span>: &#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>第二个例子中，我们来看看执行上下文时的 <code>AO</code>，我们在创建时找到了 <code>x</code>，所以会打印结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">AO = &#123;</span><br><span class="line">  <span class="attr">arguments</span>: &#123;</span><br><span class="line">    <span class="attr">length</span>: <span class="number">0</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入系列 </tag>
            
            <tag> 执行上下文 </tag>
            
            <tag> 变量对象 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JavaScript系列（2）：执行上下文栈</title>
      <link href="//Blog/38c87206.html"/>
      <url>//Blog/38c87206.html</url>
      
        <content type="html"><![CDATA[<h2 id="JS-是否是顺序执行？"><a href="#JS-是否是顺序执行？" class="headerlink" title="JS 是否是顺序执行？"></a>JS 是否是顺序执行？</h2><p>JavaScript 代码的执行顺序，在写过该语言的人眼中，都会认为是顺序执行的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;first function&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">fn(); <span class="comment">// first function</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> fn = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;second function&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line">fn(); <span class="comment">// second function</span></span><br></pre></td></tr></table></figure><p>完美的顺序执行，但是我们稍微修改一下呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;first function&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fn(); <span class="comment">// second function</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;second function&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">fn(); <span class="comment">// second function</span></span><br></pre></td></tr></table></figure><p>打印结果真的是出人意料啊，两个都为 <code>second function</code>。这又是为什么呢？</p><p>因为我们的 <code>JavaScript</code> 引擎执行代码是通过一段一段的执行，而不是一行一行的执行。所以当执行一段代码时，就会进入一个准备工作，比如变量提升或函数提升。</p><p>现在我们了解到了，执行方式，那我们再来看看，<code>JS</code> 是怎么一段一段的执行的。</p><h2 id="执行上下文"><a href="#执行上下文" class="headerlink" title="执行上下文"></a>执行上下文</h2><p>我们先了解一下执行上下文，执行上下文就是当前 JavaScript 代码被解析和执行时所在环境的抽象概念，JavaScript 中运行任何的代码都是在执行上下文中运行。</p><p>JavaScript 中的运行环境包括三种情况：</p><ul><li>全局环境：JavaScript 代码运行首先会进入该环境</li><li>函数环境：当函数被调用执行时，就会进入该环境</li><li>eval：运行在 eval 函数中的代码创建的自己的执行上下文(不建议使用，基本上算作是一个作废的东西)</li></ul><p>举一个小例子，当执行一个函数时，就会进行准备工作，而这个准备工作，专业一点的说法就是执行上下文。</p><h2 id="什么是执行上下文栈？"><a href="#什么是执行上下文栈？" class="headerlink" title="什么是执行上下文栈？"></a>什么是执行上下文栈？</h2><p>那么函数多了，如何来管理这么多执行上下文呢？</p><p><strong>所以 JavaScript 引擎创建了执行上下文栈来管理执行上下文</strong>。</p><p>我们使用一个 <code>ECStack</code> 数组，作为执行上下文栈的行为模拟工具。</p><p>首先，当 <code>JavaScript</code> 开始解析执行代码时，先遇到一个<strong>全局代码</strong>，所以在初始化我们的执行栈时，就会向执行上下文栈压入一个全局执行栈(<code>globalContext</code>)。<br>并且只有整个程序执行结束时，<code>ECStack</code> 才会被清空，所以在程序结束之前，<code>globalContext</code> 会一直存在于 <code>ECStack</code> 的最底部。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ECStack = []; <span class="comment">// 创建</span></span><br><span class="line">ECStack = [globalContext]; <span class="comment">// 压入全局执行栈</span></span><br></pre></td></tr></table></figure><p>我们写一段代码，来测试我们的执行栈。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;fn1 code&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn2</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fn1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">fn3</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  fn2();</span><br><span class="line">&#125;</span><br><span class="line">fn3();</span><br></pre></td></tr></table></figure><p>当执行函数时，就会创建一个执行上下文，并且压入栈，执行完毕，就会从栈中弹出。我们用数组来模拟栈，所以是先进后出。</p><p>所以我们来看看时怎么执行栈的吧：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一开始执行时，栈中有全局执行栈</span></span><br><span class="line">ECStack = [</span><br><span class="line">  globalContext,</span><br><span class="line">]</span><br><span class="line"><span class="comment">// 首先</span></span><br><span class="line"><span class="comment">// fn3() 执行，压入栈</span></span><br><span class="line">ECStack.push(&lt;fn3&gt; functionContext);</span><br><span class="line">ECStack = [</span><br><span class="line">  globalContext,</span><br><span class="line">  &lt;fn3&gt; functionContext</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn3 函数中 执行了 fn2</span></span><br><span class="line">ECStack.push(&lt;fn2&gt; functionContext);</span><br><span class="line">ECStack = [</span><br><span class="line">  &lt;fn2&gt; functionContext</span><br><span class="line">  &lt;fn3&gt; functionContext,</span><br><span class="line">  globalContext</span><br><span class="line">]</span><br><span class="line"><span class="comment">// fn2 函数中执行了 fn1</span></span><br><span class="line">ECStack.push(&lt;fn1&gt; functionContext);</span><br><span class="line">ECStack = [</span><br><span class="line">  &lt;fn1&gt; functionContext,</span><br><span class="line">  &lt;fn2&gt; functionContext,</span><br><span class="line">  &lt;fn3&gt; functionContext,</span><br><span class="line">  globalContext</span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn1 执行完毕</span></span><br><span class="line">ECStack.pop();</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn2 执行完毕</span></span><br><span class="line">ECStack.pop();</span><br><span class="line"></span><br><span class="line"><span class="comment">// fn3 执行完毕</span></span><br><span class="line">ECStack.pop();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 最后就是继续执行 JavaScript 代码，知道全部执行完毕，才弹出 globalContext</span></span><br></pre></td></tr></table></figure><p>深入执行上下文栈，就介绍到这里了。</p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入系列 </tag>
            
            <tag> 执行上下文 </tag>
            
            <tag> 执行上下文栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入理解JavaScript系列（1）：原型与原型链</title>
      <link href="//Blog/3b195c9b.html"/>
      <url>//Blog/3b195c9b.html</url>
      
        <content type="html"><![CDATA[<h2 id="原型"><a href="#原型" class="headerlink" title="原型"></a>原型</h2><h3 id="构造函数创建对象"><a href="#构造函数创建对象" class="headerlink" title="构造函数创建对象"></a>构造函数创建对象</h3><p>我们来写一个构造函数用来创建一个对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">person.name = <span class="string">&#x27;hzzzzzzzq&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(person.name); <span class="comment">// hzzzzzzzq</span></span><br></pre></td></tr></table></figure><p>从例子中，我们使用 <code>new</code> 创建了一个实例对象 <code>person</code>。</p><p>这我们都是可以理解的，<code>new</code> 创建实例对象。</p><h3 id="prototype"><a href="#prototype" class="headerlink" title="prototype"></a>prototype</h3><p>每一个函数都有一个 <code>prototype</code> 属性，那么这个属性指向什么呢？</p><p>其实，函数的 <code>prototype</code> 属性指向了一个对象，这个对象就是调用该构造函数而创建的实例的原型，也就是例子中，<code>person</code> 的原型。</p><p>我们来打印一下 <code>Person</code> 的 <code>prototype</code>，来看看是什么。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype);</span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/js/prototype1.png" alt="prototype1"></p><p>说了这么多，还是不知道什么是原型(0_o)。我们可以这样来理解原型：每一个 JS 对象(null 除外)在创建的时候就会有一个与之关联的另一个对象，而这个对象就是我们所说的原型，每一个对象都会从原型”继承”属性。</p><p>我们简单来表示一下构造函数与实例原型之间的关系：</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/js/prototype2.png" alt="prototype2"></p><p>我们从这张图中，可以看出，<code>Object.prototype</code> 表示实例原型。<br>那么我们该怎么表示实例(<code>person</code>)与实例原型(<code>Person.prototype</code>)之间的关系呢？所以我们来看看第二个属性</p><h3 id="proto"><a href="#proto" class="headerlink" title="__proto__"></a><code>__proto__</code></h3><p>这是每一个 JS 对象(除了 <code>null</code>) 都具有的一个属性，叫 <code>__proto__</code>，这个属性会指向该对象的原型。</p><p>我们来验证一下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person.__proto__ === Person.prototype);</span><br><span class="line"><span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(person.__proto__ === <span class="built_in">Object</span>.getPrototypeOf(person)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><strong>注意: 当然，在这里我们要提一嘴，<code>__proto__</code> 在 <code>web</code> 标准中，以及删除，但是一些浏览器目前还是支持的。</strong></p><blockquote><p>所以在这里，我顺便提一个 <code>Object.getPrototypeOf(Object)</code>，用来获取实例的原型。</p></blockquote><p>于是，我们可以将图进行更新了：</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/js/prototype3.png" alt="prototype3"></p><p>我们现在，构造函数指向原型，实例指向原型，那么原型能否指向构造函数或者指向实例呢？</p><p>其实这时候我们就要提到下一个属性了，但是，指向实例的是没有的，因为一个构造函数可以生成多个实例。</p><h3 id="constructor-NaN"><a href="#constructor-NaN" class="headerlink" title="constructor"></a>constructor</h3><p>这是我们提到的第三个属性了，而这个属性，就是用来实现由原型指向构造函数，每一个原型都会有一个 <code>constructor</code> 属性来指向关联的构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(Person === Person.prototype.constructor);</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>所以我们继续更新关系图：</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/js/prototype4.png" alt="prototype4"></p><p>到目前为止，我们已经得出来一些结论了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"><span class="built_in">console</span>.log(person.__protp__ === Person.prototype); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.constructor === Person); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>了解了构造函数、实例原型和实例之间的关系后，我们来看看实例和原型的关系：</p><h3 id="实例与原型"><a href="#实例与原型" class="headerlink" title="实例与原型"></a>实例与原型</h3><p>在我们读取实例的属性时，如果找不到，就会查找与对象关联的原型中的属性，如果还查不到，就会去找原型的原型，直到最顶层为止。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line">Person.prototype.name = <span class="string">&#x27;hzzzzzzzq&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> person = <span class="keyword">new</span> Person();</span><br><span class="line"></span><br><span class="line">person.name = <span class="string">&#x27;qzzzzzzzh&#x27;</span>;</span><br><span class="line">coonsole.log(person.name); <span class="comment">// qzzzzzzzh</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> person.name;</span><br><span class="line">coonsole.log(person.name); <span class="comment">// hzzzzzzzq</span></span><br></pre></td></tr></table></figure><p>从例子来看，我们给原型对象添加了 <code>name</code> 属性，然后在给实例对象添加了 <code>name</code> 属性，而首先打印时，打印了实例对象的 <code>name</code>。</p><p>但是当我们删除了实例对象的 <code>name</code> 属性时，在实例中就找不到该属性，则会从实例的原型是那个去查找，所以在 <code>Person.prototype</code> 中找到。</p><p>但是，如果我们的原型中没找到呢？原型的原型又是什么呢？</p><h3 id="原型的原型"><a href="#原型的原型" class="headerlink" title="原型的原型"></a>原型的原型</h3><p>原型是什么？其实原型也是一个对象，既然是对象，那我们就可以用 <code>new Object()</code> 来创建它：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">obj.name = <span class="string">&#x27;hzzzzzzzq&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.name); <span class="comment">// hzzzzzzzq</span></span><br></pre></td></tr></table></figure><p>而我们再来看一下，Person.prototype 与 Object 的关系.</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person.prototype.__proto__ === <span class="built_in">Object</span>.prototype); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>其实原型对象就是通过 <code>Object</code> 构造函数生成的，实例的 <code>__proro__</code> 指向构造函数的 <code>prototype</code>，现在我们再来更新一下关系图：</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/js/prototype5.png" alt="prototype5"></p><h2 id="原型链"><a href="#原型链" class="headerlink" title="原型链"></a>原型链</h2><p>其实，看完原型的原型，还是会有疑问，Object.prototype 的原型是什么呢？</p><p>其实就是 <code>null</code>，我们可以来验证一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(Obejct.prototype.__proto__ === <span class="literal">null</span>);</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>而 <code>null</code> 是什么呢？</p><blockquote><p>null 就是表示”没有对象”，即在这里不应该有值。</p></blockquote><p>因为 <code>Object.prototype.__proto__</code> 的值为 <code>null</code>。所以查找属性的时候其实查到 <code>Object.prototype</code> 就可以停止了。</p><p>我们在来更新一下关系图：</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/js/prototype6.png" alt="prototype6"></p><p>那什么是原型链呢？相互关联的原型组成的链状结构就是原型链，也就是这条红色的线。</p><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><p>你以为这就结束了吗？</p><p>我们来看看在来补充一些神奇的事情，我们来看看打印。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"><span class="built_in">console</span>.log(Person.__proto__ === <span class="built_in">Function</span>.prototype); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.constructor.__proto__ === <span class="built_in">Function</span>.prototype); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype === <span class="built_in">Function</span>.prototype.__proto__); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p>经过测试我们会发现，都会 <code>true</code>。</p><p>这意味着什么呢？</p><ul><li><code>Person</code> 函数的原型是 <code>Function.prototype</code></li><li><code>Function.prototype</code> 也是 <code>Object</code> 构造函数的 <code>__proto__</code></li><li><code>Function.prototype.__proto__</code> 就是 <code>Object.prorotype</code></li></ul><p>于是，我们的图就可以更新为如下关系图：</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/js/prototype7.png" alt="prototype7"></p><p>至此，我们的关系图已经基本完善。</p><p>再次，我也需要补充一张找到的图，应该说，真的很好，因为我自己画的比较乱。(0_o)</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/jsprototype8.png" alt="prototype8"></p>]]></content>
      
      
      <categories>
          
          <category> JavaScript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深入系列 </tag>
            
            <tag> 原型 </tag>
            
            <tag> 原型链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建之 Hexo - NexT 主题下配置 Gitalk/Disqus 评论系统</title>
      <link href="//Blog/dd03fa62.html"/>
      <url>//Blog/dd03fa62.html</url>
      
        <content type="html"><![CDATA[<p>因为在 next 主题下，都已经带有 gitalk 和 Disques 的配置了，所以不需要我们去修改主题内的文件，只与主题编辑文件有关。</p><h2 id="gitalk-设置-不需要科学上网"><a href="#gitalk-设置-不需要科学上网" class="headerlink" title="gitalk 设置 - 不需要科学上网"></a>gitalk 设置 - 不需要科学上网</h2><h3 id="主要流程"><a href="#主要流程" class="headerlink" title="主要流程"></a>主要流程</h3><ul><li>需要创建一个 Github 账号 - <a href="https://github.com/signup?source=login">创建地址</a></li><li>创建一个 OAuth application - <a href="https://github.com/settings/applications/new">创建地址</a></li><li>创建一个仓库用来放置评论内容</li><li>修改主题配置文件下的 gitalk</li></ul><h3 id="我们现在开始分步操作教学"><a href="#我们现在开始分步操作教学" class="headerlink" title="我们现在开始分步操作教学"></a>我们现在开始分步操作教学</h3><ul><li><p>创建账号就不用我多说啦。</p></li><li><p>创建一个 OAuth application</p><p><code>Application name</code>：根据你自己来填即可</p><p><code>Homepage URL</code>：填写你的博客域名</p><p><code>Authorization callback URL</code>：还是填写你博客的域名</p></li></ul><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220119171611982.png" alt="image-20220119171611982"></p><p>点击 Register application 之后，会进入这个页面，在这里 <code>Client ID</code> 和 <code>Client secrets</code> 两个值，是需要存下来的，一会儿要用。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220119172332985.png" alt="image-20220119172332985"></p><p>Client secrets 是需要自己创建一个的不会给你自动创建的，点击之后，就会创建一个。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220119172501736.png" alt="image-20220119172501736"></p><ul><li>创建一个仓库 - <a href="https://github.com/new">地址</a></li></ul><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220120083817190.png" alt="image-20220120083817190"></p><p><code>Repository name</code> 仓库名称</p><p>添加一个 <code>README file</code>，点击创建就可以了。</p><p>如果你看过我的第一篇文章<a href="">《hexo-githubPages》</a>，你就可以直接用你 <code>githubpages</code> 的仓库(<code>yourname.github.io</code>)，不需要新建一个仓库了。</p><ul><li><p>我们来修改主题编辑文件-进行配置</p><p><code>enable</code>： 打开 gitalk 评论。</p><p><code>github_id</code>：就是仓库的拥有者，也就是你的 github 名称。</p><p><code>repo</code>：就是仓库，输入你的仓库名。</p><p><code>client_id</code>：就是我们刚刚创建 <code>OAuth Application</code> 之后，拿到的值。</p><p><code>client_secret</code>：也是我们刚刚拿到的值。</p><p><code>admin_user</code>：是你的仓库拥有者。</p><p><code>language</code>：修改语言。</p></li></ul><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220120084754458.png"></p><p>配置完成之后，执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo g -d <span class="comment"># 清理缓存并发布</span></span><br><span class="line">$ hexo s <span class="comment"># 查看本地情况</span></span><br></pre></td></tr></table></figure><p>你在本地或者你部署的网站，找到一篇文章，拉到底部，会看到这样的情况。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220123104356814.png" alt="image-20220123104356814"></p><p>点击登陆 <code>github</code> 即可。</p><ul><li>可能遇到错误</li></ul><blockquote><p>error=redirect_uri_mismatch&amp;error_description=The+redirect_uri+MUST+match+the+registered+callback+URL+for+this+application.&amp;error_uri=https%3A%2F%2Fdocs.github.com%2Fapps%2Fmanaging-oauth-apps%2Ftroubleshooting-authorization-request-errors%2F%23redirect-uri-mismatch</p></blockquote><p>首先，确认是不是在本地点击的 <code>使用 Github 登陆</code>，如果本地，请先执行 <code>hexo d</code>，然后去部署的网站上点击登陆。如果还会有其他问题，<a href="https://developer.github.com/apps/managing-oauth-apps/troubleshooting-authorization-request-errors/#redirect-uri-mismatch">可以看一下 gitalk 可能出现问题的解决方案</a>。</p><ul><li>最后成功结果</li></ul><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220125135325746.png" alt="image-20220125135325746"></p><h2 id="Disqus-设置-需要科学上网才能显示"><a href="#Disqus-设置-需要科学上网才能显示" class="headerlink" title="Disqus 设置 - 需要科学上网才能显示"></a>Disqus 设置 - 需要科学上网才能显示</h2><ul><li><a href="https://disqus.com/">Disqus 评论系统官网</a></li></ul><p>如果您的评论会有许多人，可以选择一个订阅购买，但是如果人数较少，可以选择底下的 <code>Basic</code>.</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220119141616333.png" alt="image-20220119141616333"></p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220119141706654.png" alt="image-20220119141706654"></p><ul><li>下一步，会让我们选择在哪个平台，而我们会发现没有 hexo，所以我们选择 <code>I don&#39;t see...</code></li></ul><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220119142042285.png" alt="image-20220119142042285"></p><ul><li>选择之后，就会出现 2.2 步骤，教您怎么安装程式码</li></ul><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220119142214404.png" alt="image-20220119142214404"></p><ul><li>因为，我们需要的是 short-name，我们跳过这一步，直接来到第三步，是设置一些您要应用的网站留言板的相关设定，填写您想填的资料或是都不填也可以，但要记得 <code>Website Name</code> 不要改动，或是再另外改成你想要的即可</li></ul><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220119142457348.png" alt="image-20220119142457348"></p><ul><li>然后我们点击 next 就来到最后一步了，选择评论的审核机制，具体的可以根据翻译选择。我们可以选择 <code>Balanced</code>。</li></ul><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220119142532859.png" alt="image-20220119142532859"></p><ul><li>到此，我们已经完成 <a href="https://disqus.com/">Disqus</a> <code>site</code> 的配置了，接下来，就是进入我们的 <code>next</code> 主题中的配置了。</li></ul><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220119142808820.png"></p><h2 id="hexo-next-主题设置"><a href="#hexo-next-主题设置" class="headerlink" title="hexo - next 主题设置"></a>hexo - next 主题设置</h2><p>在 next 主题中，以及为我们提供了 <a href="https://theme-next.iissnan.com/third-party-services.html#disqus">next 主题下 Disqus 相关配置</a>。</p><p>我们只需要编辑<strong>主题配置文件</strong>下的内容就可以了 ，在配置文件中，搜索 Disques，找到下面的代码。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220119143343104.png" alt="image-20220119143343104"></p><ul><li><p>将配置的 shortname 内容输入，并将 enable 修改为 true 即可</p></li><li><p>然后我们执行 <code>hexo g -d</code> 就可以查看效果了，选择一篇文章，看最底部，就出现评论功能了。</p></li></ul><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220119144044662.png" alt="image-20220119144044662"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> NexT </tag>
            
            <tag> Gitalk </tag>
            
            <tag> Disqus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建之 NexT 主题功能页面相关设置</title>
      <link href="//Blog/6cc26e1f.html"/>
      <url>//Blog/6cc26e1f.html</url>
      
        <content type="html"><![CDATA[<h2 id="站点数据统计"><a href="#站点数据统计" class="headerlink" title="站点数据统计"></a>站点数据统计</h2><h3 id="文章字数-阅读时间"><a href="#文章字数-阅读时间" class="headerlink" title="文章字数/阅读时间"></a>文章字数/阅读时间</h3><ul><li>先下载一个额外的插件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-word-counter</span><br></pre></td></tr></table></figure><p>我们在根目录中配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post wordcount display settings</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/next-theme/hexo-word-counter</span></span><br><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">symbols:</span> <span class="literal">true</span> <span class="comment"># 是否开启字符计数</span></span><br><span class="line">  <span class="attr">time:</span> <span class="literal">true</span> <span class="comment"># 是否显示阅读时间</span></span><br><span class="line">  <span class="attr">total_symbols:</span> <span class="literal">false</span> <span class="comment"># 是否开启博客总字符数</span></span><br><span class="line">  <span class="attr">total_time:</span> <span class="literal">false</span> <span class="comment"># 是否开启博客总阅读时间</span></span><br><span class="line">  <span class="attr">exclude_codeblock:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">awl:</span> <span class="number">2</span> <span class="comment"># 平均单词长度，默认 - 4</span></span><br><span class="line">  <span class="attr">wpm:</span> <span class="number">200</span> <span class="comment"># 每分钟平均阅读单词数目，默认 - 275</span></span><br><span class="line">  <span class="attr">suffix:</span> <span class="string">&#x27;mins.&#x27;</span></span><br></pre></td></tr></table></figure><p>在 <code>NexT</code> 主题配置文件中设置。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">symbols_count_time:</span></span><br><span class="line">  <span class="attr">separated_meta:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">item_text_total:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="不蒜子-站点访问量-文章访问量统计"><a href="#不蒜子-站点访问量-文章访问量统计" class="headerlink" title="不蒜子 - 站点访问量/文章访问量统计"></a>不蒜子 - 站点访问量/文章访问量统计</h3><p><code>NexT</code> 主题以及集成了不蒜子的访客人数和文章阅读统计功能，所以我们只需要在主题的配置文件中进行设置即可。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">busuanzi_count:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 改为 true</span></span><br><span class="line">  <span class="attr">total_visitors:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_visitors_icon:</span> <span class="string">fa</span> <span class="string">fa-user</span></span><br><span class="line">  <span class="attr">total_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">total_views_icon:</span> <span class="string">fa</span> <span class="string">fa-eye</span></span><br><span class="line">  <span class="attr">post_views:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">post_views_icon:</span> <span class="string">far</span> <span class="string">fa-eye</span></span><br></pre></td></tr></table></figure><h2 id="页面相关设置"><a href="#页面相关设置" class="headerlink" title="页面相关设置"></a>页面相关设置</h2><h3 id="返回顶部以及阅读进度条"><a href="#返回顶部以及阅读进度条" class="headerlink" title="返回顶部以及阅读进度条"></a>返回顶部以及阅读进度条</h3><p><code>NexT</code> 主题，在主题配置文件中，找到 <code>back2top</code> 和 <code>reading_progress</code> 并进行配置即可。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">back2top:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># true 开启返回顶部</span></span><br><span class="line">  <span class="comment"># Back to top in sidebar.</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment"># Scroll percent label in b2t button.</span></span><br><span class="line">  <span class="attr">scrollpercent:</span> <span class="literal">false</span> <span class="comment"># 是否显示滚动百分比</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Reading progress bar</span></span><br><span class="line"><span class="attr">reading_progress:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># 关闭阅读进度条</span></span><br><span class="line">  <span class="comment"># Available values: left | right</span></span><br><span class="line">  <span class="attr">start_at:</span> <span class="string">left</span> <span class="comment"># 进度条从哪侧开始</span></span><br><span class="line">  <span class="comment"># Available values: top | bottom</span></span><br><span class="line">  <span class="attr">position:</span> <span class="string">top</span> <span class="comment"># 进度条设置位置</span></span><br><span class="line">  <span class="attr">reversed:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">color:</span> <span class="string">&#x27;#37c6c0&#x27;</span> <span class="comment"># 进度条颜色</span></span><br><span class="line">  <span class="attr">height:</span> <span class="string">3px</span> <span class="comment"># 进度条的宽度</span></span><br></pre></td></tr></table></figure><h3 id="Github-图标显示"><a href="#Github-图标显示" class="headerlink" title="Github 图标显示"></a>Github 图标显示</h3><p><code>Github</code> 图标默认显示在右上方。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># `Follow me on GitHub` banner in the top-right corner.</span></span><br><span class="line"><span class="attr">github_banner:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># 是否显示</span></span><br><span class="line">  <span class="attr">permalink:</span> <span class="string">https://github.com/yourname</span> <span class="comment"># github 地址</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">Follow</span> <span class="string">me</span> <span class="string">on</span> <span class="string">GitHub</span> <span class="comment"># title 名称</span></span><br></pre></td></tr></table></figure><h3 id="个人头像"><a href="#个人头像" class="headerlink" title="个人头像"></a>个人头像</h3><p>设置个人头像，只要在主题配置文件中，找到 <code>avatar</code> 即可，但是这样要注意 <strong><code>url</code> 获取到的地址。可以是 http/https/本地文件，但是本地文件的目录是主题文件下的 source/images，并不是根目录下的。</strong></p><p>我们使用的是 <code>npm</code> 下载的主题，则是在 <code>node_modules/hexo-theme-next/source/images</code>文件中，添加图片去修改。</p><p>如果是 <code>clone</code> 下来的主题，则是在根目录下的 <code>themes/next/source/imagse</code> 文件中添加。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Sidebar Avatar</span></span><br><span class="line"><span class="attr">avatar:</span></span><br><span class="line">  <span class="comment"># Replace the default image and set the url here.</span></span><br><span class="line">  <span class="attr">url:</span> <span class="comment">#/images/avatar.gif</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be displayed in circle.</span></span><br><span class="line">  <span class="attr">rounded:</span> <span class="literal">false</span> <span class="comment"># 是否使用圆形</span></span><br><span class="line">  <span class="comment"># If true, the avatar will be rotated with the cursor.</span></span><br><span class="line">  <span class="attr">rotated:</span> <span class="literal">false</span> <span class="comment"># 是否在鼠标放置时旋转图片</span></span><br></pre></td></tr></table></figure><h3 id="首页背景"><a href="#首页背景" class="headerlink" title="首页背景"></a>首页背景</h3><p>修改主题配置文件，去除 <code>style</code> 前面的 <code>#</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Define custom file paths.</span></span><br><span class="line"><span class="comment"># Create your custom files in site directory `source/_data` and uncomment needed files below.</span></span><br><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.njk</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.njk</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.njk</span></span><br><span class="line">  <span class="comment">#variable: source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure><p>我们在根目录下的 <code>source</code> 下新建一个 <code>_data</code> 的文件下，然后新建 <code>styles.styl</code> 文件。</p><p>根据 <code>css</code> 的方式来添加背景图片就可以了，我这里，没有使用图片，使用了渐变。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">body</span> &#123;</span><br><span class="line">  <span class="attribute">background-image</span>: <span class="built_in">linear-gradient</span>(<span class="number">#e66465</span>, <span class="number">#9198e5</span>);</span><br><span class="line">  <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">  <span class="attribute">background-attachment</span>: fixed;</span><br><span class="line">  <span class="attribute">background-position</span>: <span class="number">50%</span> <span class="number">50%</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="圆角"><a href="#圆角" class="headerlink" title="圆角"></a>圆角</h3><p>修改主题配置文件，去除 <code>variable</code> 前面的 <code>#</code>。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">custom_file_path:</span></span><br><span class="line">  <span class="comment">#head: source/_data/head.njk</span></span><br><span class="line">  <span class="comment">#header: source/_data/header.njk</span></span><br><span class="line">  <span class="comment">#sidebar: source/_data/sidebar.njk</span></span><br><span class="line">  <span class="comment">#postMeta: source/_data/post-meta.njk</span></span><br><span class="line">  <span class="comment">#postBodyEnd: source/_data/post-body-end.njk</span></span><br><span class="line">  <span class="comment">#footer: source/_data/footer.njk</span></span><br><span class="line">  <span class="comment">#bodyEnd: source/_data/body-end.njk</span></span><br><span class="line">  <span class="attr">variable:</span> <span class="string">source/_data/variables.styl</span></span><br><span class="line">  <span class="comment">#mixin: source/_data/mixins.styl</span></span><br><span class="line">  <span class="attr">style:</span> <span class="string">source/_data/styles.styl</span></span><br></pre></td></tr></table></figure><p>我们在根目录下的 <code>source</code> 下新建一个 <code>_data</code> 的文件下，然后新建 <code>variables.styl</code> 文件，添加以下代码，即可完成圆角设置。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$<span class="attribute">border-radius</span>-inner = <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span> <span class="number">20px</span>;</span><br><span class="line">$<span class="attribute">border-radius</span> = <span class="number">20px</span>;</span><br></pre></td></tr></table></figure><h3 id="透明度"><a href="#透明度" class="headerlink" title="透明度"></a>透明度</h3><p>在 <code>source/_data_styles.styl</code> 文件下，添加背景透明设置。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">//博客内容透明化</span><br><span class="line">//文章内容的透明度设置</span><br><span class="line"><span class="selector-class">.main-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.8</span>) none repeat scroll <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 侧边栏的透明度设置</span><br><span class="line"><span class="selector-class">.sidebar-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.8</span>) none repeat scroll <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 菜单栏的透明度设置</span><br><span class="line">// 这里的设置要注意，直接使用 <span class="attribute">opacity</span> 会影响到 搜索框的透明度</span><br><span class="line">// 所以使用设置背景颜色的透明度</span><br><span class="line"><span class="selector-class">.header-inner</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.8</span>) none repeat scroll <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 搜索框透明度设置</span><br><span class="line"><span class="selector-class">.popup</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0.9</span>;</span><br><span class="line">&#125;</span><br><span class="line">// 评论区</span><br><span class="line"><span class="selector-class">.comments</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, <span class="number">0.8</span>) none repeat scroll <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="侧边栏添加社交链接-微博-知乎-github"><a href="#侧边栏添加社交链接-微博-知乎-github" class="headerlink" title="侧边栏添加社交链接(微博/知乎/github)"></a>侧边栏添加社交链接(微博/知乎/github)</h3><p>在主题配置文件下，修改，打开想要显示的即可。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Social Links</span></span><br><span class="line"><span class="comment"># Usage: `Key: permalink || icon`</span></span><br><span class="line"><span class="comment"># Key is the link label showing to end users.</span></span><br><span class="line"><span class="comment"># Value before `||` delimiter is the target permalink, value after `||` delimiter is the name of Font Awesome icon.</span></span><br><span class="line"><span class="attr">social:</span></span><br><span class="line">  <span class="attr">GitHub:</span> <span class="string">https://github.com/hzzzzzzzq</span> <span class="string">||</span> <span class="string">fab</span> <span class="string">fa-github</span></span><br><span class="line">  <span class="attr">E-Mail:</span> <span class="string">mailto:hzzzzzzzq@gmail.com</span> <span class="string">||</span> <span class="string">fa</span> <span class="string">fa-envelope</span></span><br><span class="line">  <span class="comment">#Weibo: https://weibo.com/yourname || fab fa-weibo</span></span><br><span class="line">  <span class="comment">#Google: https://plus.google.com/yourname || fab fa-google</span></span><br><span class="line">  <span class="comment">#Twitter: https://twitter.com/yourname || fab fa-twitter</span></span><br><span class="line">  <span class="comment">#FB Page: https://www.facebook.com/yourname || fab fa-facebook</span></span><br><span class="line">  <span class="comment">#StackOverflow: https://stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line">  <span class="comment">#YouTube: https://youtube.com/yourname || fab fa-youtube</span></span><br><span class="line">  <span class="comment">#Instagram: https://instagram.com/yourname || fab fa-instagram</span></span><br><span class="line">  <span class="comment">#Skype: skype:yourname?call|chat || fab fa-skype</span></span><br><span class="line"></span><br><span class="line"><span class="attr">social_icons:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">icons_only:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">transition:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>我这边打开了两个，所以显示如下：</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220124115032597.png" alt="image-20220124115032597"></p><h2 id="文章相关设置"><a href="#文章相关设置" class="headerlink" title="文章相关设置"></a>文章相关设置</h2><h3 id="首页显示部分或摘要，设置阅读全文"><a href="#首页显示部分或摘要，设置阅读全文" class="headerlink" title="首页显示部分或摘要，设置阅读全文"></a>首页显示部分或摘要，设置阅读全文</h3><ul><li>我们在每篇文章的顶部添加字段 <code>description</code>，这样就不会显示全部了</li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: title</span><br><span class="line"><span class="section">description: description</span></span><br><span class="line"><span class="section">---</span></span><br></pre></td></tr></table></figure><ul><li>使用 <code>&lt;!-- more --&gt;</code></li></ul><p>在文章中，使用 <code>&lt;!-- more --&gt;</code> 即可，但是不能在顶部的 <code>---</code> 下使用。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="section">title: title</span></span><br><span class="line"><span class="section">---</span></span><br><span class="line"></span><br><span class="line"><span class="strong">**中间必须有内容**</span></span><br><span class="line"></span><br><span class="line">&lt;!-- more --&gt;</span><br></pre></td></tr></table></figure><p>修改我们的主题配置文件，添加以下内容。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首页不显示全文</span></span><br><span class="line"><span class="attr">auto_excerpt:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment">#length: 150 # 截取长度 默认150</span></span><br></pre></td></tr></table></figure><p>我们来看显示结果：</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220124161311114.png" alt="image-20220124161311114"></p><h3 id="文章顶部-meta-修改"><a href="#文章顶部-meta-修改" class="headerlink" title="文章顶部 meta 修改"></a>文章顶部 meta 修改</h3><p>修改文章是否显示创建时间、更新时间、是否显示分类等内容。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Post meta display settings</span></span><br><span class="line"><span class="attr">post_meta:</span></span><br><span class="line">  <span class="attr">item_text:</span> <span class="literal">true</span> <span class="comment"># 文字信息</span></span><br><span class="line">  <span class="attr">created_at:</span> <span class="literal">true</span> <span class="comment"># 创建时间</span></span><br><span class="line">  <span class="attr">updated_at:</span> <span class="comment"># 文章顶部内容 - 更新时间</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="attr">another_day:</span> <span class="literal">true</span> <span class="comment"># 只有更新时间不是同一天时显示</span></span><br><span class="line">  <span class="attr">categories:</span> <span class="literal">true</span> <span class="comment"># 是否显示分类</span></span><br></pre></td></tr></table></figure><h3 id="文章底部添加结束语（最新，手动修改"><a href="#文章底部添加结束语（最新，手动修改" class="headerlink" title="文章底部添加结束语（最新，手动修改"></a>文章底部添加结束语（最新，手动修改</h3><p>在主题配置文件中，添加下面的语句。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 是否添加文章结束</span></span><br><span class="line"><span class="attr">post_end_tag:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否显示文章结束</span></span><br><span class="line">  <span class="attr">icon:</span> <span class="string">heart</span> <span class="comment"># 中间</span></span><br></pre></td></tr></table></figure><p>我们在自己的主题文件目录下，找到 <code>next/layout/_macro/post.njk</code>，并将以下该代码，添加到 <code>body</code> 之后，<code>footer</code> 之前。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;#####################&#125; &#123;### END POST BODY ###&#125; &#123;#####################&#125; &#123;%- if</span><br><span class="line">theme.post_end_tag.enable and not is_index %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align:center;color:#bfbfbf;font-size:16px;&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span>-------------------- 本文结束 <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-&#123;&#123; theme.post_end_tag.icon &#125;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">span</span>&gt;</span> 感谢阅读 --------------------<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure><p>我们来看效果：</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220124173335773.png" alt="image-20220124173335773"></p><h3 id="打赏功能"><a href="#打赏功能" class="headerlink" title="打赏功能"></a>打赏功能</h3><p>我们打开配置页面，并找到 <code>reward</code>。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">reward_settings:</span></span><br><span class="line">  <span class="comment"># If true, a donate button will be displayed in every article by default.</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否开启打赏 默认 - false</span></span><br><span class="line">  <span class="attr">animation:</span> <span class="literal">true</span> <span class="comment"># 是否有动画 默认 - false</span></span><br><span class="line">  <span class="attr">comment:</span> <span class="string">Buy</span> <span class="string">me</span> <span class="string">a</span> <span class="string">coffee</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 图片是主题目录下的图片  node_modules/hexo-theme-next/source/images</span></span><br><span class="line"><span class="attr">reward:</span></span><br><span class="line">  <span class="attr">wechatpay:</span> <span class="string">/images/my_avatar.png</span></span><br><span class="line">  <span class="attr">alipay:</span> <span class="string">/images/my_avatar.png</span></span><br><span class="line">  <span class="comment">#paypal: /images/paypal.png</span></span><br><span class="line">  <span class="comment">#bitcoin: /images/bitcoin.png</span></span><br></pre></td></tr></table></figure><p>我们来看看效果吧，首先会是折叠效果，点击之后，才会展示支付图片。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220123185803404.png" alt="image-20220123185803404"></p><h3 id="底部添加版权"><a href="#底部添加版权" class="headerlink" title="底部添加版权"></a>底部添加版权</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">creative_commons:</span></span><br><span class="line">  <span class="comment"># Available values: by | by-nc | by-nc-nd | by-nc-sa | by-nd | by-sa | cc-zero</span></span><br><span class="line">  <span class="attr">license:</span> <span class="string">by-nc-sa</span> <span class="comment"># 版权许可协议</span></span><br><span class="line">  <span class="comment"># Available values: big | small</span></span><br><span class="line">  <span class="attr">size:</span> <span class="string">small</span></span><br><span class="line">  <span class="attr">sidebar:</span> <span class="literal">false</span> <span class="comment"># 侧边栏设置版权</span></span><br><span class="line">  <span class="attr">post:</span> <span class="literal">true</span> <span class="comment"># 在文章底部设置版权 - 一般使用这个</span></span><br><span class="line">  <span class="comment"># You can set a language value if you prefer a translated version of CC license, e.g. deed.zh</span></span><br><span class="line">  <span class="comment"># CC licenses are available in 39 languages, you can find the specific and correct abbreviation you need on https://creativecommons.org</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-CN</span></span><br></pre></td></tr></table></figure><p>我们来看看版权添加效果：</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220124084030346.png" alt="image-20220124084030346"></p><h3 id="相关文章推荐"><a href="#相关文章推荐" class="headerlink" title="相关文章推荐"></a>相关文章推荐</h3><p>首先需要安装插件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-related-popular-posts --save</span><br></pre></td></tr></table></figure><p>在主题配置文件中，找到这段代码，然后将 <code>enable</code> 修改为 <code>true</code>，将 <code>title</code> 改为相关文章推荐。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Related popular posts</span></span><br><span class="line"><span class="comment"># Dependencies: https://github.com/tea3/hexo-related-popular-posts</span></span><br><span class="line"><span class="attr">related_posts:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">title:</span> <span class="string">相关文章推荐</span> <span class="comment"># Custom header, leave empty to use the default one</span></span><br><span class="line">  <span class="attr">display_in_home:</span> <span class="literal">false</span> <span class="comment"># 首页是否显示</span></span><br><span class="line">  <span class="attr">params:</span></span><br><span class="line">    <span class="attr">maxCount:</span> <span class="number">5</span> <span class="comment"># 相关文章显示的最大上限</span></span><br><span class="line">    <span class="comment">#PPMixingRate: 0.0 # 相关度</span></span><br><span class="line">    <span class="comment">#isDate: false # 是否显示日期</span></span><br><span class="line">    <span class="comment">#isImage: false # 是否显示配图</span></span><br><span class="line">    <span class="attr">isExcerpt:</span> <span class="literal">false</span> <span class="comment"># 是否显示摘要</span></span><br></pre></td></tr></table></figure><p>这样之后，我们就可以在文章的底部看到了。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220124155840387.png" alt="image-20220124155840387"></p><h3 id="标签添加-tag-图标"><a href="#标签添加-tag-图标" class="headerlink" title="标签添加 tag 图标"></a>标签添加 tag 图标</h3><p>要注意，新版中的文件都是采用的 <code>njk</code> 而我为了展示代码色彩，使用的 是 <code>html</code> 来展示这段代码。</p><p>注释方式是不同的，<code>njk</code> 使用的注释是 ``，html 使用的是 <code>&lt;!-- --&gt;</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;%- if post.tags and post.tags.length %&#125; &#123;%- set tag_indicate = &#x27;<span class="tag">&lt;<span class="name">i</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">&quot;fa fa-tag&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span>&lt;/i</span><br><span class="line">&gt;&#x27; if theme.tag_icon else &#x27;#&#x27; %&#125;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;post-tags&quot;</span>&gt;</span></span><br><span class="line">  &#123;%- for tag in post.tags.toArray() %&#125;</span><br><span class="line">  <span class="comment">&lt;!-- 改动前 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;tag&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span>&#123;&#123; tag_indicate &#125;&#125; &#123;&#123; tag.name &#125;&#125;&lt;/a</span><br><span class="line">  &gt;</span><br><span class="line">  <span class="comment">&lt;!-- 改动后 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot;</span> <span class="attr">rel</span>=<span class="string">&quot;tag&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;<span class="name">i</span> <span class="attr">class</span>=<span class="string">&quot;fa fa-tags&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">i</span>&gt;</span>&#123;&#123; tag.name &#125;&#125;&lt;/a</span><br><span class="line">  &gt;</span><br><span class="line">  &#123;%- endfor %&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">&#123;%- endif %&#125;</span><br></pre></td></tr></table></figure><p>我们就可以在文章的底部，看到标签前面多了图标了，而且也没有 <code>#</code> 了。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220125104906272.png" alt="image-20220125104906272"></p><h2 id="添加个性特效"><a href="#添加个性特效" class="headerlink" title="添加个性特效"></a>添加个性特效</h2><h3 id="萌宠，或者看板娘"><a href="#萌宠，或者看板娘" class="headerlink" title="萌宠，或者看板娘"></a>萌宠，或者看板娘</h3><p>这里，我们介绍最简单的方式，不介绍高级化，有兴趣的可以去看高级一点的操作 - <a href="https://github.com/stevenjoezhang/live2d-widget">live2d-widget</a></p><p>我们要介绍的是 <a href="https://github.com/EYHN/hexo-helper-live2d">hexo-helper-live2d</a>，首先，我们先安装一下插件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install --save hexo-helper-live2d</span><br></pre></td></tr></table></figure><p>然后在<strong>站点配置文件</strong>中，添加 <code>live2d</code>，注意，不是在主题配置文件。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Live2D</span></span><br><span class="line"><span class="comment">## https://github.com/EYHN/hexo-helper-live2d</span></span><br><span class="line"><span class="attr">live2d:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">scriptFrom:</span> <span class="string">local</span> <span class="comment"># 默认</span></span><br><span class="line">  <span class="attr">pluginRootPath:</span> <span class="string">live2dw/</span> <span class="comment"># 插件在站点上的根目录(相对路径)</span></span><br><span class="line">  <span class="attr">pluginJsPath:</span> <span class="string">lib/</span> <span class="comment"># 脚本文件相对与插件根目录路径</span></span><br><span class="line">  <span class="attr">pluginModelPath:</span> <span class="string">assets/</span> <span class="comment"># 模型文件相对与插件根目录路径</span></span><br><span class="line">  <span class="comment"># scriptFrom: jsdelivr # jsdelivr CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: unpkg # unpkg CDN</span></span><br><span class="line">  <span class="comment"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span></span><br><span class="line">  <span class="attr">tagMode:</span> <span class="literal">false</span> <span class="comment"># 标签模式, 是否仅替换 live2d tag标签而非插入到所有页面中</span></span><br><span class="line">  <span class="attr">debug:</span> <span class="literal">false</span> <span class="comment"># 调试, 是否在控制台输出日志</span></span><br><span class="line">  <span class="attr">model:</span></span><br><span class="line">    <span class="attr">use:</span> <span class="string">live2d-widget-model-wanko</span> <span class="comment"># npm-module package name</span></span><br><span class="line">    <span class="comment"># use: wanko # 博客根目录/live2d_models/ 下的目录名</span></span><br><span class="line">    <span class="comment"># use: ./wives/wanko # 相对于博客根目录的路径</span></span><br><span class="line">    <span class="comment"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span></span><br><span class="line">  <span class="attr">display:</span></span><br><span class="line">    <span class="attr">position:</span> <span class="string">left</span></span><br><span class="line">    <span class="attr">width:</span> <span class="number">150</span></span><br><span class="line">    <span class="attr">height:</span> <span class="number">300</span></span><br><span class="line">  <span class="attr">mobile:</span></span><br><span class="line">    <span class="attr">show:</span> <span class="literal">true</span> <span class="comment"># 手机中是否展示</span></span><br></pre></td></tr></table></figure><p>然后，我们可以下载一个自己喜欢的<code>2d</code>模型，可以下载的模型选择地址 - <a href="https://github.com/xiazeyu/live2d-widget-models">live2d-widget-models</a>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install live2d-widget-model-koharu</span><br></pre></td></tr></table></figure><p>我们下载一个模型，然后修改配置文件中 <code>model: use:</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">model:</span></span><br><span class="line">  <span class="attr">use:</span> <span class="string">live2d-widget-model-koharu</span></span><br></pre></td></tr></table></figure><p>然后我们执行 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>。</p><p>我们来看结果：</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220124113551797.png" alt="image-20220124113551797"></p><h3 id="自定义返回顶部（小猫挂着"><a href="#自定义返回顶部（小猫挂着" class="headerlink" title="自定义返回顶部（小猫挂着"></a>自定义返回顶部（小猫挂着</h3><p>我们在修改透明度是修改的 <code>source/_data/styles.styl</code> 中添加以下代码，当然，我们需要一张图片，来添加背景图。将图片放置在 <code>theme/next/source/images</code> 下，然后进行展示即可。</p><p><a href="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/scroll.png">下载图片地址</a>，小猫挂着。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//自定义回到顶部样式</span><br><span class="line"><span class="selector-class">.back-to-top</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">70px</span>; // 图片的宽度</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">900px</span>; // 图片的高度</span><br><span class="line">  <span class="attribute">top</span>: -<span class="number">900px</span>;</span><br><span class="line">  <span class="attribute">bottom</span>: unset;</span><br><span class="line">  <span class="attribute">transition</span>: all .<span class="number">5s</span> ease-in-out; // 添加移动动画</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">&quot;/images/scroll.png&quot;</span>);</span><br><span class="line">  //隐藏箭头图标</span><br><span class="line">  &gt; <span class="selector-tag">i</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">  &amp;<span class="selector-class">.back-to-top-on</span> &#123;</span><br><span class="line">    <span class="attribute">bottom</span>: unset;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">100vh</span> &lt; (<span class="number">900px</span> + <span class="number">200px</span>) ? <span class="built_in">calc</span>( <span class="number">100vh</span> - <span class="number">900px</span> - <span class="number">400px</span> ) : <span class="number">0px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看页面显示结果：</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220125110924416.png" alt="image-20220125110924416"></p><p>补充：在这里，我们会遇到一个问题，就是在移动端点击时，会出现蓝色的背景，所有我们来解决一下。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.back-to-top</span><span class="selector-pseudo">:active</span>,</span><br><span class="line"><span class="selector-class">.back-to-top</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  -webkit-tap-highlight-<span class="attribute">color</span>: transparent;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="添加腾讯公益-404-页面"><a href="#添加腾讯公益-404-页面" class="headerlink" title="添加腾讯公益 404 页面"></a>添加腾讯公益 404 页面</h2><p>在根目录的 <code>source</code> 文件下新建 <code>404.html</code>，然后将以下内容添加。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;content-type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=utf-8;&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge,chrome=1&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;all&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;robots&quot;</span> <span class="attr">content</span>=<span class="string">&quot;index,follow&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">      <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">href</span>=<span class="string">&quot;https://qzone.qq.com/gy/404/style/404style.css&quot;</span></span></span><br><span class="line"><span class="tag">    /&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span></span></span><br><span class="line"><span class="tag">      <span class="attr">type</span>=<span class="string">&quot;text/plain&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">src</span>=<span class="string">&quot;http://www.qq.com/404/search_children.js&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">homePageUrl</span>=<span class="string">&quot;/&quot;</span></span></span><br><span class="line"><span class="tag">      <span class="attr">homePageName</span>=<span class="string">&quot;回到我的主页&quot;</span></span></span><br><span class="line"><span class="tag">    &gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://qzone.qq.com/gy/404/data.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://qzone.qq.com/gy/404/page.js&quot;</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后我们在主题编辑页面中，将 <code>commonweal</code> 前面的 <code>#</code> 去掉，点进去就可以看到了，页面无法访问时，也会跳转到 <code>404</code>。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220123172140939.png" alt="image-20220123172140939"></p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220123172359003.png" alt="image-20220123172359003"></p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> NexT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建之 Hexo 配置 - 常用</title>
      <link href="//Blog/b66e55e6.html"/>
      <url>//Blog/b66e55e6.html</url>
      
        <content type="html"><![CDATA[<p><code>hexo</code> 的配置是在哪里设置的呢？其实就是根目录下的 <code>_config.yml</code> 文件中进行配置。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220121110419337.png" alt="image-20220121110419337"></p><h2 id="网站配置"><a href="#网站配置" class="headerlink" title="网站配置"></a>网站配置</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Site</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">MyBlog</span> <span class="comment"># 设置网站的标题</span></span><br><span class="line"><span class="attr">subtitle:</span> <span class="string">&#x27;Welcome to my blog&#x27;</span> <span class="comment"># 设置网站的子标题</span></span><br><span class="line"><span class="attr">description:</span> <span class="string">&#x27;I am a description&#x27;</span> <span class="comment"># 设置网站描述</span></span><br><span class="line"><span class="attr">keywords:</span> <span class="comment"># 网站的关键词，支持多个，多用于网站搜索</span></span><br><span class="line"><span class="attr">author:</span> <span class="string">hzzzzzzzq</span> <span class="comment"># 作者</span></span><br><span class="line"><span class="attr">language:</span> <span class="string">zh-CN</span> <span class="comment"># 设置网站使用的语言。我们常用的当然就是 `zh-CN`。默认为 `en`。</span></span><br><span class="line"><span class="attr">timezone:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># 设置网站的时区。`hexo` 默认使用电脑的时区。</span></span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220121111002144.png" alt="image-20220121111002144"></p><h2 id="网址"><a href="#网址" class="headerlink" title="网址"></a>网址</h2><p>提醒一点，<code>url</code> 直接使用你配置的 <code>url</code> 即可，不要随意去增加 <code>path</code>，而 <code>root</code> 虽然时网站的根目录，但是我研究了一周了，如果添加了根目录，可能就会导致 <code>css</code> 加载的问题。</p><p>所以上面的 <code>url</code> 和 <code>root</code> 尽量不要进行添加 <code>path</code>，除非你愿意手动去更改文件目录信息，较为繁琐，容易导致全站出问题。</p><p>来看看，我的配置吧。首先 <code>url</code> 使用的是 <code>github</code> 创建的。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># URL</span></span><br><span class="line"><span class="comment">## Set your site url here. For example, if you use GitHub Page, set url as &#x27;https://username.github.io/project&#x27;</span></span><br><span class="line"><span class="attr">url:</span> <span class="string">https://hzzzzzzzq.github.io</span> <span class="comment"># 网址</span></span><br><span class="line"><span class="comment"># 必须以 `http://` 或 `https://` 开头，与以往 `//` 开头的方式不同</span></span><br><span class="line"></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span> <span class="comment"># 网站根目录</span></span><br><span class="line"><span class="comment"># 在这里，我并没有修改，你也可以将 root 删除，或者默认就是无 root 的情况。</span></span><br><span class="line"></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">/Blog/:abbrlink.html</span> <span class="comment"># 文章的永久链接格式  默认 - :year/:month/:day/:title/</span></span><br><span class="line"><span class="comment"># abbrlink config</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span> <span class="comment"># 算法: crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span> <span class="comment"># 进制: dec(default) and hex</span></span><br><span class="line"><span class="attr">permalink_defaults:</span>  <span class="comment"># 永久链接中各部分的默认值</span></span><br><span class="line"><span class="comment"># 保持默认就可以了，除非你要加一个 link path 的默认值</span></span><br><span class="line"></span><br><span class="line"><span class="attr">pretty_urls:</span>  <span class="comment"># 改写 permalink 的值来美化 URL</span></span><br><span class="line"><span class="comment"># 下面两个也保持默认就好</span></span><br><span class="line">  <span class="attr">trailing_index:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;index.html&#x27; from permalinks</span></span><br><span class="line">  <span class="comment"># 是否在永久链接中保留尾部的 index.html，设置为 false 时去除</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">trailing_html:</span> <span class="literal">true</span> <span class="comment"># Set to false to remove trailing &#x27;.html&#x27; from permalinks</span></span><br><span class="line">  <span class="comment"># 是否在永久链接中保留尾部的 .html，设置为 false 时去除</span></span><br></pre></td></tr></table></figure><p>上面保持默认的代码，我已经进行注释，那么接下来，就要聊一下重点了，那就是永久链接。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">permalink:</span> <span class="string">/Blog/:abbrlink.html</span></span><br><span class="line"><span class="comment"># abbrlink config</span></span><br><span class="line"><span class="attr">abbrlink:</span></span><br><span class="line">  <span class="attr">alg:</span> <span class="string">crc32</span> <span class="comment"># 算法: crc16(default) and crc32</span></span><br><span class="line">  <span class="attr">rep:</span> <span class="string">hex</span> <span class="comment"># 进制: dec(default) and hex</span></span><br></pre></td></tr></table></figure><p>从表格来看，<code>permalink</code> 的默认值是 <code>:year/:month/:day/:title/</code>。</p><p>为了演示，这个，我们来新建一篇文章名称为 <code>myBlog</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;myBlog&quot;</span></span><br></pre></td></tr></table></figure><p>然后我们点进这篇文章，来看看地址 <code>http://localhost:4000/2022/01/21/myBlog/</code>，所以上面都是对呀代码的时间值和文章名称。而如果你的博客文章是中文时，就会出现乱码，导致链接很长，这不是我们希望看到的，所以就要用到下面的宝贝了。</p><p>我使用的是 <code>abbrlink</code>，是一个 <code>hexo-abbrlink</code> 插件，用来修改我们的文章地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-abbrlink --save</span><br></pre></td></tr></table></figure><p>当然我这里配置的 <code>/Blog/</code>，其实就是定死在前面，证明这些都是博客文章，你也可以进行自定义，例如<code>posts/:abbrlink</code> 等。</p><p>这里就要毫不吝啬的放上博主的链接了<a href="https://hzzzzzzzq.github.io/Blog/599a1ad9.html">https://hzzzzzzzq.github.io/Blog/599a1ad9.html</a>，看起来是不是简介多了？该插件就是用来生成唯一的标识所用。</p><h2 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Writing</span></span><br><span class="line"><span class="attr">new_post_name:</span> <span class="string">:title.md</span> <span class="comment"># 博客文件名格式</span></span><br><span class="line"><span class="attr">default_layout:</span> <span class="string">post</span> <span class="comment"># 默认布局 可选值 post(文章) | draft(草稿) | page(页面)</span></span><br><span class="line"><span class="attr">titlecase:</span> <span class="literal">false</span> <span class="comment"># 标题是否小写</span></span><br><span class="line"><span class="attr">external_link:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否在新的标签页打开链接 - 默认 true</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">site</span> <span class="comment"># Apply to the whole site  默认 - tite</span></span><br><span class="line">  <span class="attr">exclude:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># 排除，默认 - &#x27;&#x27;</span></span><br><span class="line"><span class="attr">filename_case:</span> <span class="number">0</span> <span class="comment"># 把文件名转换成大写(-2)或小写(-1)，默认 - 0</span></span><br><span class="line"><span class="attr">render_drafts:</span> <span class="literal">false</span> <span class="comment"># 显示草稿，默认 - false</span></span><br><span class="line"><span class="attr">post_asset_folder:</span> <span class="literal">false</span> <span class="comment"># 启动 Asset 文件夹，默认 - false</span></span><br><span class="line"><span class="attr">relative_link:</span> <span class="literal">false</span> <span class="comment"># 把链接改为与根目录的相对地址，默认 - false</span></span><br><span class="line"><span class="attr">future:</span> <span class="literal">true</span> <span class="comment"># 显示未来的文章，默认 - false</span></span><br><span class="line"><span class="attr">highlight:</span> <span class="comment"># 代码高亮设置</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span> <span class="comment"># 是否启用，默认 - true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span> <span class="comment"># 显示行号，默认 - true</span></span><br><span class="line">  <span class="attr">auto_detect:</span> <span class="literal">false</span> <span class="comment"># 自动侦测，默认 - false</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># 替换 tab，默认 - &#x27;&#x27;</span></span><br><span class="line">  <span class="attr">wrap:</span> <span class="literal">true</span> <span class="comment"># 换行，默认 - true</span></span><br><span class="line">  <span class="attr">hljs:</span> <span class="literal">false</span> <span class="comment"># 使用 hljs 渲染，默认 - false</span></span><br><span class="line"><span class="attr">prismjs:</span> <span class="comment"># 代码块高亮工具</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span> <span class="comment"># 是否启用，默认 - false</span></span><br><span class="line">  <span class="attr">preprocess:</span> <span class="literal">true</span> <span class="comment"># 预处理，默认 - true</span></span><br><span class="line">  <span class="attr">line_number:</span> <span class="literal">true</span> <span class="comment"># 显示行号，默认 - true</span></span><br><span class="line">  <span class="attr">tab_replace:</span> <span class="string">&#x27;&#x27;</span> <span class="comment"># 替换 tab，默认 - &#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p><a href="https://hexo.io/docs/syntax-highlight#PrismJS">highlight 代码高亮 参考</a></p><p><a href="%5Bprismjs%5D(https://hexo.io/docs/syntax-highlight#PrismJS)">Prisms 代码高亮 参考</a></p><h2 id="分类-amp-标签"><a href="#分类-amp-标签" class="headerlink" title="分类 &amp; 标签"></a>分类 &amp; 标签</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Category &amp; Tag</span></span><br><span class="line"><span class="attr">default_category:</span> <span class="string">uncategorized</span> <span class="comment"># 默认标签</span></span><br><span class="line"><span class="attr">category_map:</span> <span class="comment"># 分类别名，用来将分类标签转化成英文分类，修改分类路由， 配置文件中获取使用 `:category`</span></span><br><span class="line"><span class="string">博客:</span> <span class="string">blog</span> <span class="comment"># 将分类 博客 转为 blog</span></span><br><span class="line">  <span class="string">其他:</span> <span class="string">other</span> <span class="comment"># 将分类 other 转为 other</span></span><br><span class="line"><span class="attr">tag_map:</span> <span class="comment"># 标签别名，用来将中文标签转化成英文标签，修改标签路由</span></span><br><span class="line">  <span class="string">中文标签:</span> <span class="string">tag</span> <span class="comment"># 将标签 中文标签 转为 tag</span></span><br></pre></td></tr></table></figure><h2 id="首页分页"><a href="#首页分页" class="headerlink" title="首页分页"></a>首页分页</h2><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Home page setting 首页设置</span></span><br><span class="line"><span class="comment"># path: Root path for your blogs index page. (default = &#x27;&#x27;)</span></span><br><span class="line"><span class="comment"># per_page: Posts displayed per page. (0 = disable pagination)</span></span><br><span class="line"><span class="comment"># order_by: Posts order. (Order by date descending by default)</span></span><br><span class="line"><span class="attr">index_generator:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">/default-index/</span> <span class="comment"># 博客根目录</span></span><br><span class="line">  <span class="attr">per_page:</span> <span class="number">10</span> <span class="comment"># 每页多少条</span></span><br><span class="line">  <span class="attr">order_by:</span> <span class="string">-date</span> <span class="comment"># 按照什么顺序排序，-date 表示时间倒序</span></span><br></pre></td></tr></table></figure><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>per_page</code></td><td></td><td>10</td></tr><tr><td><code>pagination_dir</code></td><td></td><td><code>page</code></td></tr></tbody></table><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220123111354713.png" alt="image-20220123111354713"></p><p>来看看文件中的默认配置吧。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 分页</span></span><br><span class="line"><span class="comment">## per_page 为零表示不分页</span></span><br><span class="line"><span class="attr">per_page:</span> <span class="number">10</span> <span class="comment"># 每一页文章显示的文章 默认 - 10</span></span><br><span class="line"><span class="attr">pagination_dir:</span> <span class="string">page</span> <span class="comment"># 分页目录</span></span><br></pre></td></tr></table></figure><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>theme</code></td><td>主题名称，如果值为 <code>false</code>，就是禁用主题</td></tr><tr><td><code>deploy</code></td><td>部署部分的配置</td></tr><tr><td><code>search</code></td><td>这是配置中没有的，但是我们在网站中，也常需要搜索操作，所以增加一个配置</td></tr></tbody></table><ul><li><code>theme</code></li></ul><p><code>theme</code> 主题的设置就不说了，只是提供主题的名称即可，前提是你下载了该主题。</p><ul><li><code>deploy</code></li></ul><p><code>deploy</code> 也在上一篇文章 - 《hexo+githubpages+next》中提到过。</p><p>简单的配置说一下</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/one-command-deployment</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span> <span class="comment"># 类型</span></span><br><span class="line">  <span class="attr">repo:</span> <span class="comment"># 仓库</span></span><br><span class="line">    <span class="attr">github:</span> <span class="comment"># git@github.com:yourname/yourname.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">master</span> <span class="comment"># 分支</span></span><br></pre></td></tr></table></figure><ul><li><code>search</code></li></ul><p>这功能，估计也是很常用的吧，方便找寻具体的文章。</p><p>我们使用 本地搜索(<code>LocalSearch</code>)，话不多上，首先我们需要下载插件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure><p>有兴趣可以具体看一看每一个参数的具体作用，<a href="https://github.com/theme-next/hexo-generator-search">hexo-generator-search</a></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">search:</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">search.xml</span> <span class="comment"># 会在 public 中生存 search.xml 文件，保存全站所有 post 类型的页面生成结构化的数据</span></span><br><span class="line">  <span class="attr">field:</span> <span class="string">post</span> <span class="comment"># 设置搜索的范围，默认 post，可选： post | page | all</span></span><br><span class="line">  <span class="attr">format:</span> <span class="string">html</span> <span class="comment"># 页面内容的形式，默认 html， 可选: html | raw | excerpt | more</span></span><br><span class="line">  <span class="attr">limit:</span> <span class="number">1000</span> <span class="comment"># 设置搜索的最大数量</span></span><br></pre></td></tr></table></figure><p>其实这样并不够，我们使用的是 <code>NexT</code> 主题，还需要修改主题配置文件的 <code>local_search</code></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_search:</span></span><br><span class="line"><span class="attr">enable:</span> <span class="literal">true</span></span><br></pre></td></tr></table></figure><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><p>[hexo - 配置](</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> NexT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>个人博客搭建之 Hexo + Github Pages + NexT 主题，十分钟学会</title>
      <link href="//Blog/f5b0ba0b.html"/>
      <url>//Blog/f5b0ba0b.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍一下-hexo-的主要命令"><a href="#介绍一下-hexo-的主要命令" class="headerlink" title="介绍一下 hexo 的主要命令"></a>介绍一下 hexo 的主要命令</h2><p>首先，我们先介绍一下 <code>hexo</code> 的一些主要命令，具体可以查看 <a href="https://hexo.io/zh-cn/docs/commands">hexo 官网 - 命令</a>。</p><table><thead><tr><th>命令</th><th>作用</th><th>简写</th></tr></thead><tbody><tr><td><code>hexo init &lt;file&gt;</code></td><td>新建一个网站。如果没有设置 <code>file</code> ，Hexo 默认在当前的文件夹建立网站</td><td></td></tr><tr><td><code>hexo generate</code></td><td>生成静态文件（<code>public</code>）</td><td><code>hexo g</code></td></tr><tr><td><code>hexo new [layout] &lt;title&gt;</code></td><td>编写文章，默认在<code>source/_post</code> 文件夹下，<code>layout</code> 就是文章的布局，`post</td><td>draft</td></tr><tr><td><code>hexo server</code></td><td>启动服务器。默认情况下，访问网址为： <code>http://localhost:4000/</code></td><td><code>hexo s</code></td></tr><tr><td><code>hexo deploy</code></td><td>部署网站</td><td><code>hexo d</code></td></tr><tr><td><code>hexo clean</code></td><td>清除缓存文件 (<code>db.json</code>) 和已生成的静态文件 (<code>public</code>)。在某些情况（尤其是更换主题后），如果发现您对站点的更改无论如何也不生效，您可能需要运行该命令</td><td></td></tr></tbody></table><h2 id="创建一个仓库"><a href="#创建一个仓库" class="headerlink" title="创建一个仓库"></a>创建一个仓库</h2><ul><li>创建仓库页面</li></ul><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220117153956920.png" alt="image-20220117153956920"></p><ul><li>仓库名称固定，必须是 <code>username.github.io</code> ，<code>username</code> 就是你 <code>github</code> 的名称</li></ul><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220117154056202.png" alt="image-20220117154056202"></p><ul><li>进入设置页面</li></ul><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220117154209325.png" alt="image-20220117154209325"></p><ul><li>然后找到下面的 <code>pages</code></li></ul><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220117154336407.png" alt="image-20220117154336407"></p><ul><li>选择主题(<code>choose a theme</code>)之后，就会自动跳转到 <code>readme</code> 的提交页面</li></ul><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220117154539668.png" alt="image-20220117154539668"></p><ul><li>根据提供给的链接打开网址，我们就可以看到我们选择的主题（这一步其实不重要，因为我们会用别的主题替换）</li></ul><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220117154713730.png" alt="image-20220117154713730"></p><h2 id="安装并运行-hexo"><a href="#安装并运行-hexo" class="headerlink" title="安装并运行 hexo"></a>安装并运行 hexo</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 hexo</span></span><br><span class="line">$ npm install -g hexo-cli</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 建立文档</span></span><br><span class="line"><span class="comment"># file - 文件路径</span></span><br><span class="line">$ <span class="built_in">cd</span> &lt;file&gt;</span><br><span class="line">$ hexo init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line"><span class="comment"># 建立的文件路径/以及名称</span></span><br><span class="line"><span class="comment"># desktop/Blog。desktop为路径 Blog 为文件名称</span></span><br><span class="line">$ hexo init &lt;file&gt;</span><br></pre></td></tr></table></figure><p>来演示一次。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220118144154623.png" alt="image-20220118144154623"></p><ul><li>安装依赖</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># file 到文件目录</span></span><br><span class="line">$ <span class="built_in">cd</span> &lt;file&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">$ npm install</span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220118144310872.png" alt="image-20220118144310872"></p><ul><li>可以看到现在的目录结构是这样的</li></ul><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220118151322761.png" alt="image-20220118151322761"></p><ul><li>本地运行</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220118144332639.png" alt="image-20220118144332639"></p><p>我们通过 <code>http://localhost:4000/</code> 就可以打开页面了，这就是默认页面了。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220118144408105.png" alt="image-20220118144408105"></p><h2 id="部署到-github-pages"><a href="#部署到-github-pages" class="headerlink" title="部署到 github pages"></a>部署到 github pages</h2><p>部署其实很简单，就是修改 <code>hexo</code> 文件的 <code>_config.yml</code> 底部的 <code>deploy</code> 部署代码。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># gitname: your github name</span></span><br><span class="line"><span class="comment"># branch: 分支</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 下面注释掉的这种方式在2021年8月起，可能会报错，还是使用 ssh 的方式较好</span></span><br><span class="line"><span class="comment"># github: https://github.com/&lt;gitname&gt;/&lt;gitname&gt;.github.io.git</span></span><br><span class="line"><span class="attr">deploy:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">git</span></span><br><span class="line">  <span class="attr">repo:</span></span><br><span class="line">    <span class="attr">github:</span> <span class="string">git@github.com:&lt;gitname&gt;/&lt;gitname&gt;.github.io.git</span></span><br><span class="line">  <span class="attr">branch:</span> <span class="string">&lt;branch&gt;</span></span><br></pre></td></tr></table></figure><ul><li>还需要下载一个自动部署插件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install hexo-deployer-git</span><br></pre></td></tr></table></figure><p>所有上面的东西，部署好之后，就可以进行部署了，我们通过一下 <code>hexo d</code> 命令对 <code>github</code> 进行部署。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>这时候我们的代码就部署到我们的 <code>github</code> 上了。</p><p>我们可以直接打开链接看一下 <code>&lt;gitname&gt;.github.io</code>，就可以看到我们部署的项目了，与 <code>hexo s</code> 运行结果相同。</p><h2 id="下载使用-next-主题"><a href="#下载使用-next-主题" class="headerlink" title="下载使用 next 主题"></a>下载使用 next 主题</h2><p>我们来下载 <code>next</code> 主题</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 方式一</span></span><br><span class="line">$ npm install hexo-theme-next@latest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方式二</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/next-theme/hexo-theme-next themes/next</span><br><span class="line">$ git pull<span class="comment">#更新</span></span><br></pre></td></tr></table></figure><p>使用方法一更好一些，但是如果就更改内容来说，可能方法二比较方便。</p><p>我们使用方法一来实现一次。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220118151413475.png" alt="image-20220118151413475"></p><p>我们在修改 <code>_config.yml</code> 中的 <code>theme</code> 配置</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">theme:</span> <span class="string">next</span></span><br></pre></td></tr></table></figure><p>然后我们执行命令，并对 github 进行部署。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure><p>我们来看看，我们的成果吧，打开你自己的网页，<code>username.github.io</code>。</p><p>当然，部署命令执行之后，需要等待一会儿，不是马上就有的，如果你需要马上就有，可以执行 <code>hexo s</code>，先在本地看看是不是成功了。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220118151655445.png" alt="image-20220118151655445"></p><p>这时候，我们就已经成功了。</p><p>但是有许多配置项可能都还不理解，我们进行分篇幅介绍。</p><p>我们再来介绍一个命令，如果你的主题是第一种下载方式(<code>npm install hexo-theme-next@latest</code>)。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ cp node_modules/hexo-theme-next/_config.yml _config.next.yml</span><br></pre></td></tr></table></figure><p>使用上面的命令，将主题配置文件，移到根目录下。</p><p>我们再来看看现在的文件结构。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220123115412196.png" alt="image-20220123115412196"></p><p>可以发现，多出来一个 <code>_config.next.yml</code> 配置文件。</p><p>我们在里面找到 <code>menu </code>，然后打开这四个路由</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220123115524563.png" alt="image-20220123115524563"></p><p>在运行，看一下我们首页，就会多出一些标签路由。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220123115647543.png" alt="image-20220123115647543"></p><p>当然，除了归档，其他点击都为空路由，因为，我们还没设置这两个文件夹。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new page tag</span><br><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure><p>这是我们 <code>source</code> 文件夹下，多了两个文件夹。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/hexo/image-20220123135642800.png" alt="image-20220123135642800"></p><p>这时候，在打开网站时，就可以打开相关页面了，其他路由同理。</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> NexT </tag>
            
            <tag> GithubPages </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 系列之float 布局</title>
      <link href="//Blog/5944310.html"/>
      <url>//Blog/5944310.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>float</code> 是 <code>CSS</code> 属性，指定一个元素应沿其容器的左侧或右侧放置，允许文本和内联元素环绕它。<br>该元素从正常文档流中移除，尽管仍然保持部分的流动性。</p><p>我们来看看 <code>float</code> 的语法，<code>float</code> 属性的值被指定为一个单一的关键字。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.float</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left | right | none | inline-start | inline-end;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>left</strong>：表明元素必须浮动在其所在的块容器左侧</p></li><li><p><strong>right</strong>：表明元素必须浮动在其所在的块容器右侧</p></li><li><p><strong>none</strong>：表明元素不进行浮动</p></li><li><p><strong>inline-start</strong>：表明元素必须浮动在其所在块容器的开始一侧，在 <code>Itr</code> 脚本中是左侧，在 <code>rtI</code> 脚本中是右侧</p></li><li><p><strong>inline-end</strong>：表明元素必须浮动在其所在块容器的结束一侧，在 <code>Itr</code> 脚本中是右侧，在 <code>rtI</code> 脚本中是左侧</p></li></ul><p><strong>我们来看看不使用浮动时的显示</strong></p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/html/image-20220115082250490.png" alt="image-20220115082250490"></p><p><strong>再来看看使用浮动时的样式。</strong></p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/html/image-20220115082334837.png" alt="image-20220115082334837"></p><p>来看看代码。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.float</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f2cda5</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left; <span class="comment">/* 设置浮动 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">    一、越成功、越伟大，就越该谦恭行事；二、努力工作是成就人生不可或缺的要义；三、以高目标为动力，清除不良品质；四、每天进步一点点，不断突破自己；五、成事者都追求完美。</span><br><span class="line">  <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="浮动带来的问题"><a href="#浮动带来的问题" class="headerlink" title="浮动带来的问题"></a>浮动带来的问题</h2><h3 id="高度塌陷"><a href="#高度塌陷" class="headerlink" title="高度塌陷"></a>高度塌陷</h3><p>我们来演示一下，我们对代码进行修改，修改文案，并给每一个元素添加 <code>border</code>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>浮动前</li></ul><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/html/image-20220115082636821.png" alt="image-20220115082636821"></p><ul><li>浮动后</li></ul><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/html/image-20220115082716487.png" alt="image-20220115082716487"></p><p>这也就导致了，当我们想让元素从底部开始时，返回跟在了 <code>p</code> 标签的下面，并不是 <code>div</code> 的下面，也就是高度缺失。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们添加一段代码，来看看效果。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/html/image-20220115082838323.png" alt="image-20220115082838323"></p><p>而这可能并不是我们想要的。所以就需要我们接下来介绍的清除浮动了。</p><h2 id="清除浮动"><a href="#清除浮动" class="headerlink" title="清除浮动"></a>清除浮动</h2><p>清除浮动，首先我们要介绍的当然是 <code>clear</code> 了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clear</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>: none | left | right | both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然 <code>both</code> 是我们最常用的属性。</p><ul><li>clear<br>我们给底部的 <code>div</code> 添加 <code>clear</code> 属性。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clear</span> &#123;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;clear&quot;</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/html/image-20220115083005924.png" alt="image-20220115083005924"></p><p>看结果，我们就可以知道，浮动被清除了，从浮动格子的下面开始显示了。</p><ul><li>创建 BFC</li></ul><p>我们来看看创建 <a href="https://github.com/hzzzzzzzq/Blog/issues/26">BFC</a> 的方式。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们在 <code>main</code> 中添加以下代码。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/html/image-20220115083450019.png" alt="image-20220115083450019"></p><p>这里让 <code>main</code> 建立了一个 BFC，所以就出现了上面的情况，由于为把 <code>hello world</code> 写在了 <code>main</code> 下，所以会只展示这个格子的高度，与上面的 <code>clear: both</code> 清除浮动的方式不同。</p><p>这里不了解 <code>BFC</code> 的可以看我之前的文章 - <a href="https://github.com/hzzzzzzzq/Blog/issues/26">BFC</a>;</p><ul><li>伪元素</li></ul><p>给父元素添加伪元素来解决。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main clearfix&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;float&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>p标签<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>结果与 <code>BFC</code> 清除浮动的结果相同。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/float">MDN - float</a><br><a href="https://github.com/hzzzzzzzq/Blog/issues/27">BFC</a></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 系列之css3 新特性 - 常用</title>
      <link href="//Blog/98ebde51.html"/>
      <url>//Blog/98ebde51.html</url>
      
        <content type="html"><![CDATA[<p>我们来聊聊 <code>css3</code> 的一些新特性，但是不会仔细的去讲，会让你们了解一个大概，具体的可以自行去 <code>MDN</code> 查看。</p><h2 id="圆角-border-radius"><a href="#圆角-border-radius" class="headerlink" title="圆角 - border-radius"></a>圆角 - border-radius</h2><p>圆角，顾名思义，其实就是个格子的四个角设置圆角，设置方式也很简单。就简简单单提一下。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看效果，其实就是四个角设置一个弧度。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/html/image-20220115143358046.png" alt="图1. border-radius"></p><h2 id="阴影-box-shadow"><a href="#阴影-box-shadow" class="headerlink" title="阴影 - box-shadow"></a>阴影 - box-shadow</h2><p>在 <code>css3</code> 中，增加了阴影，以前的实现只能用图片，或者在添加一个阴影格子来实现。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>语法很简单，就是直接使用 <code>box-shadow</code> 来设置。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.shadow</span> &#123;</span><br><span class="line">  <span class="attribute">box-shadow</span>: 水平阴影位置偏移 | 垂直阴影位置偏移 | 模糊距离 | 阴影大小 |</span><br><span class="line">    阴影颜色 | 阴影开始方向;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f2cda5</span>;</span><br><span class="line">  <span class="attribute">box-shadow</span>: <span class="number">5px</span> <span class="number">5px</span> <span class="number">10px</span> <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/html/image-20220115144035655.png" alt="图2. box-shadow"></p><h2 id="过渡效果-transition"><a href="#过渡效果-transition" class="headerlink" title="过渡效果 - transition"></a>过渡效果 - transition</h2><p>什么是过渡呢？其实很好理解，类似于动画，在两个切换之间，让它看起来有一个过渡。</p><p>我们来举个例子，鼠标放上时变色。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f2cda5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.main</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">2s</span>; <span class="comment">/* 设置一个两秒的过渡 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看看效果吧。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/html/%E5%B1%8F%E5%B9%95%E5%BD%95%E5%88%B62022-01-15%20%E4%B8%8B%E5%8D%883.gif" alt="图3. transition"></p><p>很明显，有了一个缓慢变色的过程，这就是过渡。</p><h2 id="翻转-transform"><a href="#翻转-transform" class="headerlink" title="翻转 - transform"></a>翻转 - transform</h2><p>transform 允许我们做一些旋转、缩放、倾斜或平移给定元素。这是通过修改 CSS 视觉格式化模型的坐标空间来实现的。</p><p>我们也举一个简单的例子，就是翻转。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f2cda5</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这里，我们添加了 <code>rotate</code> 对元素进行翻转 <code>45度</code> 角。</p><p>我们来看看结果吧，就是这么神奇。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/html/image-20220115151143676.png" alt="图4. transform"></p><h2 id="动画-animation"><a href="#动画-animation" class="headerlink" title="动画 - animation"></a>动画 - animation</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Animations/Using_CSS_animations">MDN 中的定义</a>。</p><blockquote><p><strong>CSS animations</strong> 使得可以将从一个 CSS 样式配置转换到另一个 CSS 样式配置。动画包括两个部分:描述动画的样式规则和用于指定动画开始、结束以及中间点样式的关键帧</p></blockquote><p>我们还是使用一个简单的例子来演示一下旋转、变色、放大。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f2cda5</span>;</span><br><span class="line">  <span class="attribute">animation</span>: turnAround <span class="number">2s</span> ease <span class="number">0s</span> infinite;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@keyframes</span> turnAround &#123;</span><br><span class="line">  <span class="number">0%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">0deg</span>);</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">30px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">30px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">25%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">45deg</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#f8dca3</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">40px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">40px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">50%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">90deg</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#c6ce93</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">50px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">75%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">135deg</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#95b5c0</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">60px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="number">100%</span> &#123;</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotate</span>(<span class="number">180deg</span>);</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">70px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">70px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看看实现动画的效果。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/html/%E5%B1%8F%E5%B9%95%E5%BD%95%E5%88%B62022-01-15%20%E4%B8%8B%E5%8D%883%20(1).gif" alt="animation"></p><h2 id="媒体查询-media"><a href="#媒体查询-media" class="headerlink" title="媒体查询 - @media"></a>媒体查询 - @media</h2><p>媒体查询，第一次听到肯定很多人都觉得很奇特，那么它是做什么的呢？</p><p>具体的可以去查看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Media_Queries/Using_media_queries">MDN 媒体查询</a>，我们来看看上面对媒体查询的解释。</p><blockquote><p><strong>媒体查询</strong>（<strong>Media queries</strong>）非常实用，尤其是当你想要根据设备的大致类型（如打印设备与带屏幕的设备）或者特定的特征和设备参数（例如屏幕分辨率和浏览器视窗\宽度）来修改网站或应用程序时。</p></blockquote><p>当然理论很难理解，我们举一个简单的例子。</p><p>我们来看看代码。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.main</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f2cda5</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>: <span class="number">600px</span>) &#123;</span><br><span class="line">  <span class="comment">/* 媒介查询，最大宽度小于等于 600 时，显示的样式 */</span></span><br><span class="line">  <span class="selector-class">.main</span> &#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#95b5c0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;main&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们来看看结果。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/html/%E5%B1%8F%E5%B9%95%E5%BD%95%E5%88%B62022-01-15%20%E4%B8%8B%E5%8D%882.gif" alt="图.6 媒介查询 media 结果"></p><p>可以看到，在宽度 <code>600</code> 的时候，颜色发生了变化，所以，媒体查询 <code>max-width</code> 定义了，宽度最大 <code>600</code> 或以下生效。</p><h2 id="弹性盒子-flex"><a href="#弹性盒子-flex" class="headerlink" title="弹性盒子 - flex"></a>弹性盒子 - flex</h2><p><code>flex</code> 布局，在这里就不进行赘述了，在我的 <a href="https://github.com/hzzzzzzzq/Blog/issues/28">flex</a> 文章中，已经详细进行叙说了，有兴趣的可以直接去看。在这里，我就直接放一下 <code>flex</code> 的属性了。</p><h3 id="容器属性"><a href="#容器属性" class="headerlink" title="容器属性"></a>容器属性</h3><ul><li>flex-direction： 决定了<strong>主轴的方向</strong>。</li><li>flex-wrap：设置在轴线上是否进行换行。</li><li>flex-flow：属性就是 <code>flex-direction</code> 和 <code>flex-wrap</code> 两个属性的简写方式，默认值为 <code>row nowrap</code>。</li><li>justify-content：用来设置项目在主轴方向上的对齐方式</li><li>align-items：用来设置项目在交叉轴方向上的对齐方式</li><li>align-centent：用来设置多根轴线的对齐方式，如果只有一根轴线，则不起作用。</li></ul><h3 id="项目属性"><a href="#项目属性" class="headerlink" title="项目属性"></a>项目属性</h3><ul><li>order：调整项目的排列顺序，数值越小，排列在越前面，默认为 <code>0</code>。</li><li>flex-grow：定义了项目的放大比例，默认为 <code>0</code>，如果空间又剩余，也不放大</li><li>flex-shrink：定义了项目的缩小比例，默认为 <code>1</code>，如果空间不足，该项目会缩小。</li><li>flex-basis：定义了分配多余空间之前，项目占据的主轴空间。默认值为 <code>auto</code>，即项目的本来大小。</li><li>flex： <code>flex-grow</code>，<code>flex-shrink</code>，<code>flex-basis</code> 三个属性的缩写，默认值为 <code>0 1 auto</code></li><li>align-self：允许单个 <code>item</code> 可以有其他项目不一样的对齐方式，可以覆盖容器属性中 <code>align-items</code> 属性，默认值为 <code>auto</code>。</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ol><li><a href="https://segmentfault.com/a/1190000010780991">个人总结（css3 新特性）</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transform">MDN transform</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/transition">MDN transition</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Animations/Using_CSS_animations">MDN 动画 animation</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Media_Queries/Using_media_queries">MDN 媒体查询</a></li><li><a href="https://github.com/hzzzzzzzq/Blog/issues/28">myBlog - flex</a></li></ol>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 系列之div 居中</title>
      <link href="//Blog/e4c1cffe.html"/>
      <url>//Blog/e4c1cffe.html</url>
      
        <content type="html"><![CDATA[<p>让 <code>div</code> 内的元素水平垂直居中。</p><p>接下来，我们就来看看 div 在高度已知，高度未知的情况下，如何进行水平垂直居中。</p><p>我们先来看看两段 html 代码，解释下面的内容居中和元素居中。</p><ul><li>内容居中</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>元素居中</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="高度已知"><a href="#高度已知" class="headerlink" title="高度已知"></a>高度已知</h2><h3 id="div-内容居中"><a href="#div-内容居中" class="headerlink" title="div 内容居中"></a>div 内容居中</h3><p>首先是内容，直接写在 <code>div</code> 中的，无嵌套任何元素。</p><ul><li>用于内容居中</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#efcca1</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">  <span class="attribute">text-align</span>: center; <span class="comment">/* 水平居中 */</span></span><br><span class="line">  <span class="attribute">line-height</span>: <span class="number">300px</span>; <span class="comment">/* 垂直居中 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们设置行高与高度相等时，可以设置对 <code>line-height</code> 进行设置，就可以进行垂直居中，然后使用 <code>text-align</code> 就可以进行水平居中。</p><p>当然，我们还是需要来看结果.</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/div-center/div-center1.png" alt="div-center1"></p><p>其实这种方式，也可以用于元素居中，但是如果外部元素有其他内容时就会出错。我们来看一下</p><p>首先是内部只有一个元素时。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/div-center/div-center2.png" alt="div-center2"></p><p>然后我们来看看内部还有其他元素时。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  其他元素</span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span>我是内容<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/div-center/div-center3.png" alt="div-center3"></p><p>所以不建议使用在元素居中的情况下。</p><h3 id="position"><a href="#position" class="headerlink" title="position"></a>position</h3><p>绝对定位当然是要用在元素居中的情况了，需要使用内部元素进行偏移。</p><ul><li>用于元素居中</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#efcca1</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">margin</span>: -<span class="number">50px</span> <span class="number">0</span> <span class="number">0</span> -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/div-center/div-center4.png" alt="div-center4"></p><p>从结果来看，我们是可以进行居中的。</p><ol><li>首先我们通过设置父元素 <code>position: relative</code>，然后在子元素中设置 <code>position: absolute</code>。</li><li>我们对子元素进行偏移，<code>top 50%</code>，<code>left 50%</code>，当然偏移之后，其实不是居中的。</li><li>我们在对其这是 <code>margin</code> 将以往 <code>top</code> 以及 <code>left</code> 方向挤压，居中。</li></ol><h2 id="高度未知"><a href="#高度未知" class="headerlink" title="高度未知"></a>高度未知</h2><h3 id="flex-居中"><a href="#flex-居中" class="headerlink" title="flex 居中"></a>flex 居中</h3><p>首先，当然要说一下，我们最常见的 <a href=""><code>flex</code> 布局</a>的居中了</p><ul><li>用于内容或者元素居中</li></ul><p>我们来看看 <code>flex</code> 怎么居中。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#efcca1</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">justify-content</span>: center;</span><br><span class="line">  <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们就可以看到结果了。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/div-center/div-center4.png" alt="div-center5"></p><h3 id="偏移居中"><a href="#偏移居中" class="headerlink" title="偏移居中"></a>偏移居中</h3><p>我们需要设置一个<strong>相对定位进行偏移</strong>，然后使用 <code>transform</code>，往回偏移一个元素的一半宽度。</p><ul><li>用于元素居中</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#efcca1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>; <span class="comment">/* Y 偏移 50% */</span></span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>; <span class="comment">/* X 偏移 50% */</span></span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>); <span class="comment">/*  x ，y 分别往回偏移元素的一半宽度 */</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们可以看到结果跟 <code>flex</code> 布局是相同的。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/div-center/div-center4.png" alt="div-center6"></p><h3 id="table-cell"><a href="#table-cell" class="headerlink" title="table-cell"></a>table-cell</h3><p>设置 table-cell 之后，可以设置 <code>vertical-align: middle</code> 进行垂直居中设置。</p><ul><li>用于内容居中</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#efcca1</span>;</span><br><span class="line">  <span class="attribute">display</span>: table-cell;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/div-center/div-center1.png" alt="div-center7"></p><hr><p>居中方式，大体都介绍了一遍，如果后续发现新方式，可以评论我，让我加一加，谢谢各位。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 系列之双飞翼和圣杯布局</title>
      <link href="//Blog/7af4fb4b.html"/>
      <url>//Blog/7af4fb4b.html</url>
      
        <content type="html"><![CDATA[<p>通俗的来说就是左右两栏固定宽度，中间部分自适应的三栏布局。</p><h2 id="margin-负边距"><a href="#margin-负边距" class="headerlink" title="margin 负边距"></a>margin 负边距</h2><p>在讲圣杯布局和双飞翼布局之前，我们需要插入一个知识点，那就是 <code>margin</code> 负边距。</p><p>先写一段 <code>html</code> 代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>margin top/bottom<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex flexcolumn&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box firstBox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box secondBox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>margin left/right<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;flex&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box firstBox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box secondBox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.flex</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.flexcolumn</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: column;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">5px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.firstBox</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#eccdaa</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.secondBox</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#9bb4bf</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/html/image-20220114160450447.png" alt="image-20220114160450447" style="zoom:50%;" /><p>接下来就到我们的正题了。</p><h3 id="top-bottom"><a href="#top-bottom" class="headerlink" title="top/bottom"></a>top/bottom</h3><p>先说结论，在看结果。</p><blockquote><p>margin-top 负值 元素向上拖拽。<br>margin-botton 负值 元素本身不变，下边元素上移。</p></blockquote><p>我们先来看看 <code>margin-top</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.firstBox</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/html/image-20220114161111959.png?" alt="image-20220114161111959" style="zoom:50%;" /><p>整体向上拖拽了。</p><p>接下来我们看看 <code>margin-bottom</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.firstBox</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/html/image-20220114161329647.png?" alt="image-20220114161329647" style="zoom:50%;" /><p>这时候，我们就可以看到，<code>firstBox</code> 本身不变，而 <code>secondBox</code> 向上移动。</p><h3 id="left-right"><a href="#left-right" class="headerlink" title="left/right"></a>left/right</h3><p>先说结论，在看结果。</p><blockquote><p>margin-left 负值 元素向左拖拽。<br>margin-right 负值 元素本身不变，右边元素左移。</p></blockquote><p>我们来看看 <code>margin-left</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.firstBox</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/html/image-20220114161641065.png" alt="image-20220114161641065" style="zoom:50%;" /><p>元素向左侧拖拽。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.firstBox</span> &#123;</span><br><span class="line">  <span class="attribute">margin-right</span>: -<span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/html/image-20220114161713049.png" alt="image-20220114161713049" style="zoom:50%;" /><p>元素本身不变，右边元素左移。</p><h2 id="圣杯布局"><a href="#圣杯布局" class="headerlink" title="圣杯布局"></a>圣杯布局</h2><p>接下来就是正题了，我们先从圣杯布局开始。</p><h3 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h3><ul><li>两侧内容宽度固定，中间内容宽度自适应</li><li>三栏布局，中间一栏最先加载、渲染出来（主要内容）</li></ul><h3 id="实现方法"><a href="#实现方法" class="headerlink" title="实现方法"></a>实现方法</h3><p>使用 <code>float + margin</code></p><p>我们先写一个大概布局</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper clearfix&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span>center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span>,</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f2cda5</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">44px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>,</span><br><span class="line"><span class="selector-class">.right</span>,</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f8dca3</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#c6ce93</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#95b5c0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们展示的样子是什么样的呢？</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/html/image-20220114141352206.png" alt="图1.第一布局图"></p><p>接下来，我们给来清除一下浮动</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/html/image-20220114141712822.png" alt="image-20220114141712822"></p><p>现在我们看到的结果，就有点像样的。</p><p>这里我们要知道，为什么 <code>left</code> 会在下面呢？是因为宽度不够，然后导致 <code>left</code> 和 <code>right</code> 被挤压下来，所以在这里可以使用 <code>margin</code> 负边距。</p><p>但是我们要做的是什么呢？让 <code>left</code> 在前，<code>right</code> 在中，<code>center</code> 自适应。</p><p>然后我们使用 <code>margin</code> 负边距，对左右进行设置 <code>margin-left</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="comment">/* 拉伸 right 的宽度 */</span></span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候，我们看到的就是这样的。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/html/image-20220114152116579.png" alt="image-20220114152116579"></p><p>我们发现，<code>center</code> 被遮挡了，我们给外部添加 <code>wrapper</code>，给 <code>left</code> 和 <code>right</code> 预留出空间。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">300px</span> <span class="number">0px</span> <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/html/image-20220114152321369.png" alt="image-20220114152321369"></p><p>这时候，我们看到的结果是，预留了空间，但是接下来呢？怎么将 <code>left</code> 跟<code>right</code> 分别移动到预留的空间里呢？</p><p>其实很简单，我们使用<a href="https://hzzzzzzzq.github.io/Blog/44bd1631.html">《相对布局》</a>就可以完成。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">300px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/html/image-20220114153129007.png" alt="image-20220114153129007"></p><p>来看看全部的 <code>css</code> 吧。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span>,</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f2cda5</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">44px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">300px</span> <span class="number">0px</span> <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>,</span><br><span class="line"><span class="selector-class">.right</span>,</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f8dca3</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#c6ce93</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#95b5c0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">right</span>: -<span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.clearfix</span><span class="selector-pseudo">::after</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="双飞翼布局"><a href="#双飞翼布局" class="headerlink" title="双飞翼布局"></a>双飞翼布局</h2><h3 id="目的-1"><a href="#目的-1" class="headerlink" title="目的"></a>目的</h3><ul><li>两侧内容宽度固定，中间内容宽度自适应</li><li>三栏布局，中间一栏最先加载、渲染出来（主要内容）</li></ul><h3 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h3><p>使用 <code>float + margin</code></p><p>双飞翼布局和圣杯布局很类似，不过是在 <code>wrapper</code> 的内部又插入一个 <code>div</code>，通过调整内部 <code>div</code> 的 <code>margin</code> 值，实现中间栏自适应，内容写到内部 <code>div</code> 中。</p><p>因为两个比较相似，所以我们直接上代码。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;header&quot;</span>&gt;</span>header<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;wrapper&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;center&quot;</span>&gt;</span>center<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;left&quot;</span>&gt;</span>left<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;right&quot;</span>&gt;</span>right<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer&quot;</span>&gt;</span>footer<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>在来看看 <code>css</code> 实现。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.header</span>,</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f2cda5</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">44px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="comment">/* 留出左右外边距的距离 */</span></span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0px</span> <span class="number">300px</span> <span class="number">0px</span> <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span>,</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.wrapper</span> &#123;</span><br><span class="line">  <span class="comment">/* 外层进行浮动，以及宽度设置 */</span></span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.center</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f8dca3</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0px</span> <span class="number">300px</span> <span class="number">0px</span> <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.left</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#c6ce93</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">100%</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.right</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#95b5c0</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">margin-left</span>: -<span class="number">300px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.footer</span> &#123;</span><br><span class="line">  <span class="comment">/* 清除浮动 */</span></span><br><span class="line">  <span class="attribute">clear</span>: both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>效果与圣杯一样。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/html/image-20220114155411899.png" alt="image-20220114155411899"></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 系列之css 优先级</title>
      <link href="//Blog/7f52ab52.html"/>
      <url>//Blog/7f52ab52.html</url>
      
        <content type="html"><![CDATA[<p>我们来介绍一下 <code>css</code> 优先级，当然这时候，要拿出我收藏的宝图了。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/priority/priority1.png" alt="priority1"></p><p>当然，这图一开始不仔细看，肯定是懵的，所以可以先收藏图片，看完文章，再回头看图片，就可以掌握 <code>css</code> 优先级了。</p><h2 id="什么是权重"><a href="#什么是权重" class="headerlink" title="什么是权重"></a>什么是权重</h2><ul><li>权重决定了 <code>css</code> 规则怎样被浏览器解析，关系到 <code>css</code> 规则如何显示</li><li>许多样式被应用到同一个元素上时，权重可以决定那种样式生效</li><li>每种选择器都有字的权重，权重可以由不同的选择器加权计算</li><li>多种选择器同时应用到同一个元素上时，权重高者生效</li></ul><p>为了方便记忆，我们按照下面来对各种选择器的权重值进行假设。</p><blockquote><p>∞ 无穷大 – !important<br>10000 – 行内样式<br>1000 – id 选择器<br>100 – 属性/class/伪类选择器<br>10 – 元素选择器/伪元素<br>1 – 通配符选择器</p></blockquote><h2 id="样式重复多写"><a href="#样式重复多写" class="headerlink" title="样式重复多写"></a><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/priority/priority2.png" alt="priority2">样式重复多写</h2><p>在设置样式时，重复使用同一个 <code>css</code> 样式，后面的会覆盖前面的样式，并不是整个进行替换，而是对相同的 <code>css</code> 规则进行覆盖，我们举个例子。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#efcca1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 颜色会在 这条生效 */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/priority/priority3.png" alt="priority3"></p><p>后面的 <code>css</code> 规则颜色，覆盖了上面的背景颜色。</p><h2 id="不同的选择器，权重值高生效"><a href="#不同的选择器，权重值高生效" class="headerlink" title="不同的选择器，权重值高生效"></a>不同的选择器，权重值高生效</h2><p>权重值假设我们已经在上面做过了，可以看顶部。</p><p>我们使用 <code>id</code> 选择器，和 <code>class</code> 选择器来举例。</p><p><code>id</code> 选择器权重值为 <code>1000</code>，<code>class</code> 是 <code>100</code>。所以生效应该是 <code>id</code> 选择器 <code>css</code> 规则</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#efcca1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#boxId</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;boxId&quot;</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>显示结果与样式重复写的结果是相同的，<code>id</code> 选择器的规则生效。</p><h2 id="important-提升样式优先级"><a href="#important-提升样式优先级" class="headerlink" title="!important(提升样式优先级)"></a>!important(提升样式优先级)</h2><p><code>!important</code> 可以提升样式的优先级，不过 <code>!important</code> 尽量还是少使用比较好。<br>我们还是拿上面的例子举例，但是在 <code>class</code> 选择器中 加入 <code>!important</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#efcca1</span> <span class="meta">!important</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/priority/priority4.png" alt="priority4"></p><p>只有 <code>class</code> 选择器设置时，颜色改变。优先级被提升到了最前面。</p><p>但是如果两个均设置 <code>!important</code> 时，依然是看哪个的权重值大，显示哪个。</p><h2 id="行内、内联和外联样式优先级"><a href="#行内、内联和外联样式优先级" class="headerlink" title="行内、内联和外联样式优先级"></a>行内、内联和外联样式优先级</h2><p>这时候很多人会奇怪，内联盒外联是什么？</p><ul><li>行内当然都知道啦，就是写在标签的 <code>style</code> 属性中的 <code>css</code> 规则</li><li>内联其实就是 <code>&lt;style&gt;</code> 标签里的 <code>css</code> 规则</li><li>外联就是使用 <code>link</code> 标签的 <code>css</code> 规则</li></ul><h3 id="行内样式"><a href="#行内样式" class="headerlink" title="行内样式"></a>行内样式</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- choise.html --&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>css 优先级<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 外联 --- 淡蓝色--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./choise.css&quot;</span> /&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">      <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">        <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">        <span class="attribute">background-color</span>: <span class="number">#efcca1</span>;</span></span><br><span class="line"><span class="css">        <span class="comment">/* 内联 --- 淡黄色 */</span></span></span><br><span class="line"><span class="css">      &#125;</span></span><br><span class="line"><span class="css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 行内样式 --- 浅绿色 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> <span class="attr">style</span>=<span class="string">&quot;background-color: #ccdeb9&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* choise.css */</span></span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据权重值来计算，行内样式的权重值最大，所以行内样式生效了。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/priority/priority5.png" alt="priority5"></p><p>但是在上图中，我们并不能看出内联和外联样式的优先级。</p><h3 id="内联和外联样式优先级"><a href="#内联和外联样式优先级" class="headerlink" title="内联和外联样式优先级"></a>内联和外联样式优先级</h3><p>首先我们将上面的例子中将行内样式中的背景颜色除去，就变成了下面的样子。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们再来看结果。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/priority/priority4.png" alt="priority6"></p><p>我们发现结果变成了淡黄色，那么说明内联样式的优先级更高吗？</p><p>现在，我们将两个顺序调换，将 <code>link</code> 标签与 <code>style</code> 标签顺序调换。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="css"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.box</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="attribute">width</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">    <span class="attribute">height</span>: <span class="number">300px</span>;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 淡黄色 */</span></span></span><br><span class="line"><span class="css">    <span class="attribute">background-color</span>: <span class="number">#efcca1</span>;</span></span><br><span class="line"><span class="css">  &#125;</span></span><br><span class="line"><span class="css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 淡蓝色 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./choise.css&quot;</span> /&gt;</span></span><br></pre></td></tr></table></figure><p>我们再来看看结果。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/priority/priority3.png" alt="priority7"></p><p>这时候我们发现，外联样式的优先级更高了。</p><p>所以总结一下，<strong>外联与内联样式的优先级和加载顺序有关</strong>，相当于就是同选择器下，后出现的会覆盖前面出现的。</p><ul><li>外联在前，内联在后，则内联优先级高</li><li>内联在前，外联在后，则外联优先级高</li></ul><h2 id="样式应用中嵌套"><a href="#样式应用中嵌套" class="headerlink" title="样式应用中嵌套"></a>样式应用中嵌套</h2><h3 id="非应用于目标"><a href="#非应用于目标" class="headerlink" title="非应用于目标"></a>非应用于目标</h3><p>我们在很多时候，比如在开发中，会定义一个全局的字体颜色。而全局设置的颜色，有时候并不是直接应用于目标的，而是应用于目标父级，甚至父级的父级。<br>而这时候，我们 <code>css</code> 规则是以怎样的优先级展示呢？</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#efcca1</span>;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/priority/priority8.png" alt="priority8"></p><p>从结果上看，文字显示的是白色，我们就可以知道，它其实就是离目标越近者优先。</p><p>可能会有疑惑，例如如果权重更大的情况呢？</p><ul><li><p>我们将 <code>.box</code> 改成 <code>#box</code>，<code>class=&quot;box&quot;</code> 改成 <code>id=&quot;box&quot;</code>，我们设置为 <code>id</code> 选择器，然而结果相同一样是白色。</p></li><li><p>当然可能还不相信时，可以为外层的 <code>color</code> 语句添加 <code>!important</code>，这时候权重值变为无穷大，但是显示的结果还是白色。</p></li></ul><p>所以可以明白，在非应用于目标的情况下，会优先选择最近的父级 <code>css</code> 规则来显示。</p><h3 id="权重相等的情况下"><a href="#权重相等的情况下" class="headerlink" title="权重相等的情况下"></a>权重相等的情况下</h3><p>那么接下来，我们来看看在权重相等的情况下是怎么展示的。</p><ul><li>显示最近的 <code>css</code> 规则</li></ul><p>我们计算权重值可以知道，是相同的，为了避免有人觉得是下面的覆盖上面的，我们将代码顺序调整</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">300px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#efcca1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 权重值： 100 + 100 + 10  --- 离目标更近 */</span></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.box2</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* 权重值： 100 + 100 + 10 */</span></span><br><span class="line"><span class="selector-class">.box</span> <span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">p</span>&gt;</span>content<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们就会看到，显示的颜色是白色。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>我们来总结一下 <code>css</code> 优先级吧。</p><p>首先，肯定是我们在介绍权重的时候展示了一张图。</p><ul><li>!importtant(无穷大) &gt; 行内样式(10000) &gt; id 选择器(1000) &gt; class/伪类/属性(100) &gt; 标签选择器/伪元素(10) &gt; 通配符(1)</li></ul><p>这里我们在添加一张图，那就是行内样式、内联、外联样式</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/priority/priority9.png" alt="priority9"></p><ul><li>行内样式 &gt; 内联样式 &amp; 外联样式</li></ul><p>内联样式与外联样式是根据加载顺序来显示的。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 系列之flex 布局</title>
      <link href="//Blog/bcf93fc5.html"/>
      <url>//Blog/bcf93fc5.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-flex-布局"><a href="#什么是-flex-布局" class="headerlink" title="什么是 flex 布局"></a>什么是 flex 布局</h2><p><code>flex</code> 是 <code>Flexible Box</code> 的缩写，意为<strong>弹性布局</strong>。可以让我们盒状态模型更加灵活。</p><p>所有的容器都可以指定为 <code>flex</code> 布局。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们设置 <code>flex</code> 容器时，所有子元素自动成为 <code>flex</code> 的容器成员，称为 <code>flex</code> 项目。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/flex/flex1.png" alt="flex1"></p><p>而在 <code>flex</code> 布局中，有两根轴线：主轴(<code>main</code>) 和 交叉轴(<code>cross</code>)。</p><p>图中已经标明了，默认情况下的主轴指向为横向从左向右，而交叉轴默认为纵向从上到下。</p><h2 id="flex-容器属性"><a href="#flex-容器属性" class="headerlink" title="flex 容器属性"></a>flex 容器属性</h2><p>以下六个为 <code>flex</code> 容器属性，用来调整容器内部布局。</p><ul><li>flex-direction</li><li>flex-wrap</li><li>flex-flow</li><li>justify-content</li><li>align-items</li><li>align-centent</li></ul><h3 id="flex-direction"><a href="#flex-direction" class="headerlink" title="flex-direction"></a>flex-direction</h3><p><code>flex-direction</code> 属性决定了<strong>主轴的方向</strong>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-direction</span>: row | row-reverse | column | column-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来对四个值做一个解释。</p><ul><li>row(默认值): 主轴水平，起点在左</li><li>row-reverse: 主轴水平，起点在右</li><li>column: 主轴纵向，起点在上</li><li>column-reverse: 主轴纵向，起点在下</li></ul><p>我们来看一下具体的图</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/flex/flex2.png" alt="flex2"></p><p>可以自行去验证一下。</p><h3 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title="flex-wrap"></a>flex-wrap</h3><p><code>flex-wrap</code> 属性用来设置在轴线上是否进行换行。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-wrap</span>: nowrap | wrap | wrap-reverse;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>nowrap(默认值): 不换行</li><li>wrap: 换行</li><li>wrap-reverse: 换行，并且倒序</li></ul><p>设置 <code>nowrap</code> 时，元素宽度尽管设置了，也会被进行压缩，导致宽度减少。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/flex/flex3.png" alt="flex3"></p><h3 id="flex-flow"><a href="#flex-flow" class="headerlink" title="flex-flow"></a>flex-flow</h3><p><code>flex-flow</code> 属性就是 <code>flex-direction</code> 和 <code>flex-wrap</code> 两个属性的简写方式，默认值为 <code>row nowrap</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">flex-flow</span>: row nowrap;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="justify-content"><a href="#justify-content" class="headerlink" title="justify-content"></a>justify-content</h3><p><code>justify-content</code> 是用来设置项目在主轴方向上的对齐方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">justify-content</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一共有五个可选取值。</p><ul><li>flex-start(默认值): 主轴起点对齐</li><li>flex-end: 主轴终点对齐</li><li>center: 主轴中间点对齐</li><li>space-between: 主轴起点终点两侧贴边，中间项目间隔开，且间隔相等</li><li>space-around: 主轴起点终点两侧的间隔相等，且大小是中间间隔的一半，而中间项目之间的间隔相等</li></ul><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/flex/flex4.png" alt="flex4"></p><p>在图中展示的是 <code>flex-direction: row</code> 的情况，具体布局要根据具体的主轴设置方向来定。</p><h3 id="align-items"><a href="#align-items" class="headerlink" title="align-items"></a>align-items</h3><p><code>align-items</code> 是用来设置项目在交叉轴方向上的对齐方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一共有五个可选取值。</p><ul><li>flex-start(默认值): 交叉轴起点对齐</li><li>flex-end: 交叉轴终点对齐</li><li>center: 交叉轴中间点对齐</li><li>baseline: 项目第一行文字的基线对齐</li><li>stretch(默认值): 如果项目未设置高度或设置 <code>auto</code>，则占满整个容器高度</li></ul><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/flex/flex5.png" alt="flex5"></p><p>该图是根据默认的 <code>flex-direction: row</code> 来显示，具体的还需要根据方向来表示。</p><h3 id="align-centent"><a href="#align-centent" class="headerlink" title="align-centent"></a>align-centent</h3><p><code>align-content</code> 是用来设置多根轴线的对齐方式，如果只有一根轴线，则不起作用。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">align-items</span>: flex-start | flex-end | center | space-between | space-around;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一共六个可选值。</p><ul><li>flex-start: 交叉轴的起点对齐</li><li>flex-end: 交叉轴终点对齐</li><li>center: 交叉轴中间点对齐</li><li>space-between: 交叉轴的两端贴边，项目之间的间隔均匀分布</li><li>space-around: 交叉轴两端的间隔相等，而项目之间的间隔是两边间隔的两倍</li><li>stretch(默认值): 轴线占满整个交叉轴</li></ul><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/flex/flex6.png" alt="flex6"><br>我们也是按照 <code>flex-direction: row</code> 来的，具体的还需要根据方向来表示。</p><h2 id="项目的属性"><a href="#项目的属性" class="headerlink" title="项目的属性"></a>项目的属性</h2><ul><li>order</li><li>flex-grow</li><li>flex-shrink</li><li>flex-basis</li><li>flex</li><li>align-self</li></ul><h3 id="order"><a href="#order" class="headerlink" title="order"></a>order</h3><p><code>order</code> 是在项目中设置的属性，而设置该属性，可以调整项目的排列顺序，数值越小，排列在越前面，默认为 <code>0</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">order</span>: <span class="number">1</span>; <span class="comment">/* 可以为任意数字 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们画一个简单的图，来表示 <code>order</code>。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/flex/flex7.png" alt="flex7"></p><p>相同值会按照设置顺序排列，而不同值则按照从小到大排列。</p><h3 id="flex-grow"><a href="#flex-grow" class="headerlink" title="flex-grow"></a>flex-grow</h3><p><code>flex-grow</code> 属性定义了项目的放大比例，默认为 <code>0</code>，如果空间又剩余，也不放大。</p><p>我们来看图，举一下例子。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/flex/flex8.png" alt="flex8"></p><ul><li><p>第一个图，我们可以看到，所有的 <code>flex-grow</code> 都给了默认值 <code>0</code>, 且给每一个 <code>item</code> 设置不同宽度时显示，所以并不会进行放大，只会展示原来大小。</p></li><li><p>第二个图是，我们全部设置为 <code>1</code> 时，如果 <code>item</code> 没有设置宽度，会均匀平分宽度，而如果有设置宽度，则会保留宽度差进行放大。</p></li><li><p>第三个图是，我们一个设置为 <code>2</code>，其他均为 <code>1</code> 时，如果没设置宽度，会以 <code>1:2:1</code> 来平分宽度，而如果有宽度设置，也会存在部分偏差。</p></li></ul><p>所以为了准确性，最好不设置 <code>item</code> 宽度。</p><h3 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title="flex-shrink"></a>flex-shrink</h3><p><code>flex-shrink</code> 属性定义了项目的缩小比例，默认为 <code>1</code>，如果空间不足，该项目会缩小。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>-fhrink: <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们有设置为 <code>0</code> 的时候，则项目不会进行压缩，会保留原来设置的大小。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/flex/flex9.png" alt="flex9"></p><p>我们可以看上面的 <code>nowrap</code> 的情况，不够大小时，进行了压缩，而这时候，我们将其中一个设置为 <code>flex-shrink: 0</code>，则不会对这个 <code>item</code> 进行压缩。</p><p>也许不明确，我们来用代码举个例子吧</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#efcca1</span>;</span><br><span class="line">  <span class="attribute">display</span>: flex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>4<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>5<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span>&gt;</span>6<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/flex/flex10.png" alt="flex10"></p><p>这时候的显示，我们可以用开发者工具查看大小不足 <code>100px</code>，已经被压缩了。</p><p>我们将第二个，添加 <code>flex-shrink: 0</code>，我们在来看看结果。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span> <span class="attr">style</span>=<span class="string">&quot;flex-shrink: 0&quot;</span>&gt;</span>2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/flex/flex11.png" alt="flex11"></p><p>发现，第二个的宽度就不被压缩了，保留了原来的宽度。</p><h3 id="flex-basis"><a href="#flex-basis" class="headerlink" title="flex-basis"></a>flex-basis</h3><p><code>flex-basis</code> 属性定义了分配多余空间之前，项目占据的主轴空间。默认值为 <code>auto</code>，即项目的本来大小。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex-basis</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以设置 <code>px</code> 值，来指定项目将占据的固定空间大小。</p><p>我们还是按照 <code>flex-shrink</code> 中使用的代码来举例子，我们设置 <code>flex-basis: 50px</code>，我们会发现项目的本身大小就被压缩到 <code>50px</code> 了，而不是我们设置的 <code>100px</code> 了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">1px</span> solid black;</span><br><span class="line">  <span class="attribute">flex-basis</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/flex/flex12.png" alt="flex12"></p><h3 id="flex"><a href="#flex" class="headerlink" title="flex"></a>flex</h3><p><code>flex</code> 属性是 <code>flex-grow</code>，<code>flex-shrink</code>，<code>flex-basis</code> 三个属性的缩写，默认值为 <code>0 1 auto</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">flex</span>: none | flex-grow flex-shrink flex-basis;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>快截止有：<code>auto</code>(<code>1 1 auto</code>) 和 <code>none</code>(<code>0 0 auto</code>)</p><p><code>flex: 1</code> 是我们经常会在开发中用到的，而 <code>flex: 1</code> 代表着什么呢？其实就是 <code>flex: 1 1 0%</code>。</p><p><code>flex-shrink</code> 与 <code>flex-basis</code> 省略时，默认分别为 <code>1</code> 和 <code>0%</code>。</p><h3 id="align-self"><a href="#align-self" class="headerlink" title="align-self"></a>align-self</h3><p><code>align-self</code> 属性允许单个 <code>item</code> 可以有其他项目不一样的对齐方式，可以覆盖容器属性中 <code>align-items</code> 属性，默认值为 <code>auto</code>。</p><p>其值是与 <code>align-items</code> 属性相同。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line">  <span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p><code>flex</code> 布局，我们就介绍到这里了，在开发中，<code>flex</code> 布局是特别重要的，而且是很常用的一种布局属性，需要好好掌握，希望这篇文章对你有所帮助。</p><p><strong>感谢各位观看</strong></p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 系列之BFC</title>
      <link href="//Blog/5a2d113b.html"/>
      <url>//Blog/5a2d113b.html</url>
      
        <content type="html"><![CDATA[<h2 id="什么是-BFC？"><a href="#什么是-BFC？" class="headerlink" title="什么是 BFC？"></a>什么是 BFC？</h2><p><code>BFC</code> 即 <code>Block Formatting Contexts</code> (块级格式化上下文)，它属于定位方案中的普通流。</p><p>我们可以把具有 <code>BFC</code> 特性的元素看作为<strong>隔离了的独立容器</strong>，容器内的元素不会在布局上影响到外面的元素，并且 <code>BFC</code> 具有普通容器所没有的一些特性。</p><p>简单来说，就是 <code>BFC</code> 有一个自己的空间，在空间内怎么做，都不会影响外面。</p><h2 id="BFC-原理"><a href="#BFC-原理" class="headerlink" title="BFC 原理"></a>BFC 原理</h2><ul><li><code>BFC</code> 元素垂直方向的边距会发生重叠，属于不同 <code>BFC</code> 的外边距不会发生重叠。</li><li><code>BFC</code> 区域不会与浮动元素的布局重叠。</li><li><code>BFC</code> 元素是一个独立的容器，外面的元素不会影响到内部元素，同样，内部元素也不会影响外部元素。</li><li>浮动元素也会参与 <code>BFC</code> 高度的计算。</li></ul><h2 id="触发-BFC"><a href="#触发-BFC" class="headerlink" title="触发 BFC"></a>触发 BFC</h2><p>只要元素满足下面任一条件即可出发 BFC 特性</p><ul><li><code>body</code> 根元素</li><li>浮动元素： <code>float</code> 除 <code>none</code> 以外的值</li><li>绝对定位元素：<code>position</code> 的 <code>absolute</code> 和 <code>fixed</code></li><li><code>display</code> 为 <code>inline-block</code>、<code>table-cells</code>、<code>flex</code></li><li><code>overflow</code> 除了 <code>visible</code> 之外的值 (如：<code>hidden</code>、<code>auto</code>、<code>scroll</code>)</li></ul><h2 id="BFC-特性及应用"><a href="#BFC-特性及应用" class="headerlink" title="BFC 特性及应用"></a>BFC 特性及应用</h2><p><strong>1. 同一个 BFC 下外边距会发生折叠</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.first</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.second</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: wheat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box first&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box second&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/BFC/BFC1.png" alt="BFC1"></p><p>从结果来看，两个 <code>div</code> 元素都处在同一个 <code>BFC</code> 容器下，也就是 <code>body</code> 根元素。所以 <code>first</code> 的下边距与 <code>second</code> 的上边距发生重叠，且保留大的值。所以两个元素之间的距离只有 <code>100px</code>，而不是 <code>150px</code>。</p><p>我们想要两个盒子不进行折叠，这时候只需要将两个盒子设置为 <code>BFC</code> 容器就可以了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.container</span> &#123;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.first</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.second</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: wheat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box first&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box second&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/BFC/BFC2.png" alt="BFC2" style="zoom:50%;" /><p>这时候，两个盒子的垂直边距就变成了 <code>150px</code>。</p><p><strong>2. BFC 可以包含浮动的元素（清除浮动）</strong></p><p>浮动的元素会脱离标准文档流，我们看一个不设置 <code>BFC</code> 是的例子。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.child</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">float</span>: left;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;child&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们来看看显示效果，这时候 <code>box</code> 容器没有出发 <code>BFC</code>，显示时 <code>child</code> 是有浮动起来的，脱离文档流。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/BFC/BFC3.png" alt="BFC3"></p><p>由于 <code>child</code> 元素浮动，脱离了文档流，所以容器只剩下 <code>4px</code> 的高度。</p><p>现在我们让 <code>box</code> 触发 <code>BFC</code>，这时候就会将浮动元素包裹起来。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">2px</span> solid <span class="number">#999</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/BFC/BFC4.png" alt="BFC4"></p><p>我们看到，我们给 <code>box</code> 容器设置 <code>overflow: hidden</code> 触发 <code>BFC</code>，将浮动元素也包裹进 <code>box</code> 元素，清除了浮动效果。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 系列之CSS 选择器</title>
      <link href="//Blog/bcbd389d.html"/>
      <url>//Blog/bcbd389d.html</url>
      
        <content type="html"><![CDATA[<p><code>CSS</code> 选择器 规定了 <code>CSS</code> 规则会被应用到哪些元素上。</p><h2 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h2><h3 id="通用选择器"><a href="#通用选择器" class="headerlink" title="通用选择器"></a>通用选择器</h3><p>通用选择（<code>*</code>）是最终的王牌。它允许选择在一个页面中的所有元素。由于给每个元素应用同样的规则几乎没有什么实际价值，更常见的做法是与其他选择器结合使用。</p><blockquote><p>重要提示：使用通用选择时小心。因为它适用于所有的元素，在大型网页利用它可以对性能有明显的影响：网页可以显示比预期要慢。不会有太多的情况下，您想使用此选择。</p></blockquote><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">&#125;</span><br><span class="line">* &#123;</span><br><span class="line">  <span class="comment">/*匹配所有标签*/</span></span><br><span class="line">  <span class="attribute">color</span>: white;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>p2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>box2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>通过通用选择器 <code>*</code> 将字体颜色改为白色，这是显示就是所有的元素字体颜色都是白色。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/selector/selector1.png" alt="selector1"></p><h3 id="元素选择器（标签选择器）"><a href="#元素选择器（标签选择器）" class="headerlink" title="元素选择器（标签选择器）"></a>元素选择器（标签选择器）</h3><p>此选择器只是一个选择器名和指定 <code>HTML</code> 元素名的不区分大小写的匹配。这是选择所有指定类型的最简单方式。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="comment">/* 匹配所有div标签 */</span></span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="comment">/* 匹配所有p标签 */</span></span><br><span class="line">  <span class="attribute">color</span>: <span class="built_in">rgba</span>(<span class="number">22</span>, <span class="number">22</span>, <span class="number">11</span>, <span class="number">0.411</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>1<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>2<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>3<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">p</span>&gt;</span>4<span class="tag">&lt;/<span class="name">p</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>6<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/selector/selector2.png" alt="selector2"></p><h3 id="类选择器"><a href="#类选择器" class="headerlink" title="类选择器"></a>类选择器</h3><p>类选择器是由一个 <code>.</code>加类名组成。类名是 <code>HTML</code> 元素的 <code>class</code> 属性中没有空格元素的任何值。</p><ul><li>在类名中，如果出现了空格，则表示单个元素又多个类名。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="comment">/* 匹配第一个与第二个 div 标签 */</span></span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.colorBox</span> &#123;</span><br><span class="line">  <span class="comment">/* 匹配第二个 div 标签 */</span></span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box colorBox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/selector/selector3.png" alt="selector3"></p><h3 id="ID-选择器"><a href="#ID-选择器" class="headerlink" title="ID 选择器"></a>ID 选择器</h3><p><code>ID</code> 选择器由 <code>#</code> 与 <code>ID</code> 名称组成。<code>ID</code> 名称则是有元素的 <code>id</code> 属性来设置。任何元素都有 <code>id</code> 属性。<br>注意： <code>id</code> 名称是唯一的</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#idBox</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-id">#idColorBox</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;idBox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;idColorBox&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>显示结果与类选择器相同。</p><h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><p>属性选择器，就是通过已经存在的属性名或属性值匹配到对应元素。写法由 <code>[]</code> 组成，<code>[]</code> 中包含属性名称以及匹配属性的值。</p><ul><li>**[attr]**：该选择器选择包含 <code>attr</code> 属性的所有元素。</li><li>**[attr=value]**：该选择器仅选择 <code>attr</code> 属性被赋值为 <code>value</code> 的所有元素。</li><li>**[attr~=value]**：该选择器仅选择 <code>attr</code> 属性的值中有包含 <code>value</code> 值的所有元素，比如位于被空格分隔的多个类（<code>class</code>）中的一个类。</li><li><strong>[attr|=value]<strong>：选择 <code>attr</code> 属性的值</strong>为</strong> <code>value</code> 或 以 <code>value-</code> 开头的元素。</li><li>**[attr^=value]**：选择 <code>attr</code> 属性的值以 <code>value</code> 开头的元素。</li><li>**[attr$=value]**：选择 <code>attr</code> 属性的值以 <code>value</code> 结尾的元素。</li><li>**[attr*=value]**：选择 <code>attr</code> 属性的值中包含字符串 <code>value</code> 的元素。</li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[title]</span> &#123;</span><br><span class="line">  <span class="comment">/* 匹配所有存在 title 属性的 div */</span></span><br><span class="line">  <span class="attribute">background-color</span>: pink; <span class="comment">/* 默认颜色 */</span></span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[title=<span class="string">&#x27;two&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="comment">/* 匹配所有 title 属性值为 two 的 div */</span></span><br><span class="line">  <span class="attribute">background-color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[title~=<span class="string">&#x27;four&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="comment">/* 匹配所有 title 属性值中包含 four 的所有 div */</span></span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[title|=<span class="string">&#x27;five&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="comment">/* 匹配所有 title 属性值为 five 或以 five- 开头的 div */</span></span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[title^=<span class="string">&#x27;si&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="comment">/* 匹配所有 title 属性值以 si 开头的 div */</span></span><br><span class="line">  <span class="attribute">background-color</span>: green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[title$=<span class="string">&#x27;en&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="comment">/* 匹配所有 title属性值以 en 结尾的 div */</span></span><br><span class="line">  <span class="attribute">background-color</span>: turquoise;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[title*=<span class="string">&#x27;gh&#x27;</span>]</span> &#123;</span><br><span class="line">  <span class="comment">/* 匹配 title 属性值中包含字符串 gh 的 div */</span></span><br><span class="line">  <span class="attribute">background-color</span>: blue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">&quot;one&quot;</span>&gt;</span>[attr]<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">&quot;two&quot;</span>&gt;</span>[attr=value]<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">&quot;three four&quot;</span>&gt;</span>[attr~=value]<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">&quot;five-test&quot;</span>&gt;</span>[attr|=value]<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">&quot;fiveNo&quot;</span>&gt;</span>[attr|=value]<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">&quot;six&quot;</span>&gt;</span>[attr^=value]<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">&quot;seven&quot;</span>&gt;</span>[attr$=value]<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">title</span>=<span class="string">&quot;eight&quot;</span>&gt;</span>[attr*=value]<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">&quot;gh&quot;</span>&gt;</span>我是p标签，不是 div，所以跟我无关<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/selector/selector4.png" alt="selector4"></p><h2 id="分组选择器"><a href="#分组选择器" class="headerlink" title="分组选择器"></a>分组选择器</h2><h3 id="选择器列表"><a href="#选择器列表" class="headerlink" title="选择器列表"></a>选择器列表</h3><p>选择器列表，常称为并集选择器或并集组合器，选择所有能被选择器列表中任何一个选择器选中的节点。<br>选择器由 <code>,</code> 隔开。只要满足列表中一个即可匹配。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.one</span>,</span><br><span class="line"><span class="selector-class">.two</span>,</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">background-color</span>: pink; <span class="comment">/* 默认颜色 */</span></span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;one&quot;</span>&gt;</span>我是 div one<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;two&quot;</span>&gt;</span>div two<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>p<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/selector/selector5.png" alt="selector5"></p><h2 id="组合器"><a href="#组合器" class="headerlink" title="组合器"></a>组合器</h2><p>在 CSS 中，组合器允许您将多个选择器组合在一起，这允许您在其他元素中选择元素，或者与其他元素相邻。四种可用的类型是：</p><ul><li>后代组合器：使用 <code>空格</code>，允许选择嵌套在另一个元素中的某个元素（不一定是直接的后代;例如，它可以是一个孙子）。</li><li>直接子组合器：使用 <code>&gt;</code> 允许您选择一个元素，该元素是另一个元素的直接子元素。</li><li>紧邻兄弟组合器：使用 <code>+</code> 允许选择一个元素，它是另一个元素的直接兄弟元素(在层次结构的同一层)。</li><li>一般兄弟组合器： <code>~</code> 允许您选择其他元素的兄弟元素(例如，在层次结构中的相同级别，但不一定就在它的旁边)。</li></ul><table><thead><tr><th>组合器</th><th>作用</th></tr></thead><tbody><tr><td>A B</td><td>匹配任意元素，满足条件：B 是 A 的后代结点（B 是 A 的子节点，或者 A 的孙子节点）</td></tr><tr><td>A &gt; B</td><td>匹配任意元素，满足条件：B 是 A 的直接子节点（B 是 A 的子节点）</td></tr><tr><td>A + B</td><td>匹配任意元素，满足条件：B 是 A 的<strong>下一个兄弟节点</strong>（AB 有相同的父结点，并且 B 紧跟在 A 的后面）</td></tr><tr><td>A ~ B</td><td>匹配任意元素，满足条件：B 是 A 之后的兄弟节点中的任意一个（ A B 有相同的父节点，B 在 A 之后，可以不紧跟在 A 之后）</td></tr></tbody></table><blockquote><p>注：相邻兄弟选择器和通用兄弟选择器只会“向后”选择，DOM 结构靠前的兄弟元素不在选择范围内。</p></blockquote><p>我们用一个简单的例子来看吧：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> &gt; <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="comment">/* 匹配 class 值为 box 下的直接子节点的 div 元素 */</span></span><br><span class="line">  <span class="attribute">color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> + <span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#999</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span> ~ <span class="selector-tag">div</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: turquoise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>后代组合器 - 子节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    box 的直接子节点</span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>后代组合器 - 孙子节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>box 的直接子节点2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span>box 的直接子节点3<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>紧邻兄弟节点，只有一个<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>不是紧邻兄弟节点<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>一般兄弟组合器<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/selector/selector6.png" alt="selector6"></p><h2 id="伪选择器"><a href="#伪选择器" class="headerlink" title="伪选择器"></a>伪选择器</h2><h3 id="伪类"><a href="#伪类" class="headerlink" title="伪类"></a>伪类</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes">伪类</a>是添加到选择器的关键字，指定要选择的元素的特殊状态。我们来举个例子，当我们鼠标放到元素上时显示小手，或者字体改变颜色。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#efcca1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">:hover</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">  <span class="attribute">cursor</span>: pointer;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#f6dd9e</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>放鼠标<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/selector/selector7.png" alt="selector7"></p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes">伪类</a>有许多类型，如果想查看更多，可以去 <code>MDN</code> 查看。</p><h3 id="伪元素"><a href="#伪元素" class="headerlink" title="伪元素"></a>伪元素</h3><p><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/Pseudo-elements">伪元素（Pseudo-element）</a>跟伪类很像，但它们又有不同的地方。它们都是关键字，但伪元素前缀是两个冒号 (::)，同样是添加到选择器后面达到指定某个元素的某个部分。<br>我们用一个简单的例子来看。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">margin-left</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.box</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&#x27; &#x27;</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">left</span>: -<span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">2px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>我是测试元素<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/selector/selector8.png" alt="selector8"></p><p>那我们看看结果图吧，然后在看看元素情况图。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/selector/selector9.png" alt="selector9"></p><p>这时候，我们就发现了，伪元素是不占用 DOM 节点的，一样可以画一个圆。这对我们的程序是有优化的。</p><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-elements">伪元素</a>也有许多类型，如果想查看更多，可以去 <code>MDN</code> 查看。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 系列之position 定位</title>
      <link href="//Blog/44bd1631.html"/>
      <url>//Blog/44bd1631.html</url>
      
        <content type="html"><![CDATA[<p><code>position</code> 就是定位。让我们可以对部分布局当中一些元素的位置进行调整。定位其实就是一个工具，让我们的页面看起来更加舒适。</p><p>在 <code>CSS</code> 中，我们使用 <code>position</code> 属性的不同值来设置。</p><h2 id="静态定位-static"><a href="#静态定位-static" class="headerlink" title="静态定位(static)"></a>静态定位(static)</h2><p>静态定位是每一个元素的默认值，在将元素放入正常位置。<br>使用 <code>position: static</code> 来设置静态定位，但是 <code>static</code> 作为一个默认值，你也可以不设置。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#efcca1</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.static</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: static;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box static&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/position/position1.png" alt="position1" style="zoom:50%;" /><p>我们发现第二个元素与其他元素并没有区别，所以静态定位是作为元素的默认值使用的，一般不用设置。</p><h2 id="相对定位-relative"><a href="#相对定位-relative" class="headerlink" title="相对定位(relative)"></a>相对定位(relative)</h2><p>相对定位与静态定位非常相似，占据在正常的文档流中，但是你可以修改它的最终位置，也可以让它与页面上的其他元素重叠。</p><p>如果我们仅仅只是设置 <code>position: relative</code>，其实你就会发现与静态定位效果是一样的，所以这时候我们就需要对元素的位置进行移动了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#efcca1</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.relative</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">20px</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">20px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/position/position2.png" alt="position2" style="zoom:50%;" /><p>其实从代码中就可以看出，通过 <code>top</code> , <code>bottom</code> , <code>left</code> , <code>right</code> 来精确指定元素的位置。</p><p><strong>其实设置相对定位，是相对于自己在正常文档流中的位置来进行定位</strong>。并不是相对于 <code>body</code> 进行定位，所以会产生上面的结果。</p><h2 id="绝对定位-absolute"><a href="#绝对定位-absolute" class="headerlink" title="绝对定位(absolute)"></a>绝对定位(absolute)</h2><p>绝对定位就会有不同的地方了。通过 <code>position: absolute</code> 来设置绝对定位。</p><ul><li>不存在于正常文档流</li></ul><p>我们来看看设置之后的效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.absolute</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/position/position3.png" alt="position3" style="zoom:50%;" /><p>从上图，可能就在想，为什么设置了绝对定位后，少了一个格子呢？ 其实就是设置了 <code>position: absolute</code> 的 <code>div</code> 脱离了正常文档流，导致第三个 <code>div</code> 被遮挡了。</p><ul><li><code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code> 在绝对定位中是与 <code>relative</code> 中不同的。他们是<strong>相对于自身的定位元素的边进行定位的</strong></li></ul><p>我们在静态定位中的 <code>html</code> 代码中，都是相对于<strong>定位元素</strong>来设置的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.absolute</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/position/position4.png" alt="position4" style="zoom:50%;" /><h2 id="定位上下文"><a href="#定位上下文" class="headerlink" title="定位上下文"></a>定位上下文</h2><p>对绝对定位中的定位元素有异议？其实包含元素取决于绝对定位元素的父元素的 <code>position</code> 属性，如果祖先元素中有 <code>absolute/relative/fixed</code> 时，就是根据找到的祖先元素来进行定位。</p><p>如果所有的父元素都没有显式地定义 <code>position</code> 属性，那么都被默认设置为 <code>static</code>。这时候，绝对定位元素会被包含在<strong>初始块容器</strong>中。而初始容器块其实就是有着与浏览器视口一样的尺寸，并且 <code>&lt;html&gt;</code> 也被包含在这里面。简单来说，<code>absolute</code> 会被放在 <code>&lt;html&gt;</code> 元素外，并根据浏览器视口来定位。</p><p>所以在介绍绝对定位时的代码，虽然被放在 <code>&lt;body&gt;</code>中，但是最终的布局中，是相对于页面来布局的，并不是 <code>&lt;body&gt;</code>。</p><p>我们来看看在第二个 <code>div</code> 中使用 <code>position: relative</code>，来改变定位上下文。</p><p>还是老例子，修改代码，对第二个 <code>div</code> 进行嵌套看效果。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.relative</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.absolute</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box relative&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box absolute&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这时候，我们就会发现，<code>absolute</code> 是相对于定位元素的 <code>relative</code> 所布局了。</p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/position/position5.png" alt="position5" style="zoom:50%;" /><h3 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h3><p>在这里呢，我们也要介绍一个属性，<code>z-index</code>。</p><p>默认情况下，元素的 <code>z-index</code> 值为 <code>auto</code>，实际上为 <code>0</code>，当然要注意，它只接受无单位索引值。</p><p>其实简单来说就是页面的重叠，值越大，就在高层，越容易出现在页面中。</p><p>我们直接在上面的代码中添加 <code>z-index: -1</code>，方格就会显示在下面。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.absolute</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/position/position6.png" alt="position6" style="zoom:50%;" /><p>我们在来修改一下代码。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.absolute</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#1890ff</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.z-index1</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: yellow;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">60px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.z-index2</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">2</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">70px</span>;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">70px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box relative&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box absolute z-index2&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box absolute&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box absolute z-index1&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>刚刚我们说了，z-index 越大，显示在越上层，所以结果就应该属性为 <code>z-index: 2</code> 显示在最上层，其次是 <code>z-index: 1</code>，最底层为 <code>z-index: 0</code>。</p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/position/position7.png" alt="position7" style="zoom:50%;" /><h2 id="固定定位-fixed"><a href="#固定定位-fixed" class="headerlink" title="固定定位(fixed)"></a>固定定位(fixed)</h2><p>固定定位(<code>fixed</code>)其实与绝对定位类似，只不过 <code>fixed</code> 都是相对于浏览器视口来定位。</p><p>为了看到效果，增加了盒子的高度，其实效果就是固定在页面中的某一个部位，相对于浏览器窗口来定位。<br>不会因为你的滚动而改变。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">500px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#efcca1</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fixed</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: fixed;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;fixed&quot;</span>&gt;</span>固定标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>第一个<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>第二个<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>第三个<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>第四个<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/position/position8.png" alt="position8" style="zoom:50%;" /><p>如上图所示，为已经滚动到第三个 <code>div</code> 左右的位置了，标题还是在浏览器的这个位置，没有任何变化。</p><h2 id="position-sticky"><a href="#position-sticky" class="headerlink" title="position: sticky"></a>position: sticky</h2><p>是一个有趣的东西，让每一个的标题固定，看完效果后，肯定就明白了。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: <span class="number">#efcca1</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">position</span>: sticky;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">1em</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span> &#123;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">60px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>第一个<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>第二个<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>第三个<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span>第四个<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落1<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落2<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落3<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落4<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落5<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/position/position9.gif" alt="position9" style="zoom:50%;" /><p>定位基本上就介绍到这里了，具体的使用还需要多去操作，上手才可以。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 系列之盒模型</title>
      <link href="//Blog/2f2a0f87.html"/>
      <url>//Blog/2f2a0f87.html</url>
      
        <content type="html"><![CDATA[<h2 id="标准模型-IE-模型"><a href="#标准模型-IE-模型" class="headerlink" title="标准模型+IE 模型"></a>标准模型+IE 模型</h2><p>盒模型又称框模型，包含了内容(<code>content</code>)、内边距(<code>padding</code>)、边框(<code>border</code>)、外边距(<code>margin</code>)四个要素。<br>具体排布如下图所示。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/box-model/box-model1.png" alt="box-model1"></p><p>盒模型分为两种</p><ul><li>标准模型</li><li>IE 模型</li></ul><h2 id="两种盒模型区别"><a href="#两种盒模型区别" class="headerlink" title="两种盒模型区别"></a>两种盒模型区别</h2><p>两种模型的<strong>内容宽高计算方式不同</strong></p><ul><li>IE 模型元素宽度 <code>width = content + padding + border</code>，高度类似宽度计算。</li></ul><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/box-model/box-model2.png" alt="box-model2"></p><ul><li>标准模型元素宽度 <code>width = content</code>，高度类似宽度计算。</li></ul><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/box-model/box-model3.png" alt="box-model3"></p><h2 id="两种模型的宽和高"><a href="#两种模型的宽和高" class="headerlink" title="两种模型的宽和高"></a>两种模型的宽和高</h2><p>通过 <code>css3</code> 新增的属性 <code>box-sizing</code> 可以设置盒模型类型。**在不设置 <code>box-sizing</code> 的情况下，默认为 <code>content-box</code>**。</p><ul><li>标准模型 - <code>content-box</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.content-box</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: content-box;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#1890ff</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/box-model/box-model4.png" alt="box-model4"></p><p><code>content-box </code>设置为标准模型，从图上看，我们就可以知道，我们设置的 <code>width</code> 属性，指的是 <code>content</code> 的宽度。所以我们来计算元素宽度： <code>content-width + 2 * border + 2 * padding = 130px</code>。</p><ul><li>IE 模型 - <code>border-box</code></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.border-box</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">5px</span> solid <span class="number">#1890ff</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">10px</span>;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">15px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/box-model/box-model5.png" alt="box-model5"></p><p><code>.border-box</code> 设置为 <code>IE</code> 模型，从上图看，我们就可以知道，它的元素宽度为 <code>content-width + 2 * padding + 2 * border = 70px + 2 * 10px + 2 * 5px = 100px</code>。所以元素的宽度就是我们设置的 <code>width: 100px;</code>。而内容的宽度则是 <code>width - 2 * padding - 2 * border = 70px</code>。</p><h3 id="外边距-margin-重叠"><a href="#外边距-margin-重叠" class="headerlink" title="外边距(margin)重叠"></a>外边距(margin)重叠</h3><p>在使用中，在垂直方向上，有两个外边距重叠时，会合并成一个外边距，高度等于两者中的较大者。</p><p>需要注意的是，只有在普通文档流中，才会发生合并。行内框、浮动框或绝对定位之间的外边距并不会发生合并。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/box-model/box-model6.png" alt="box-model6"></p><p>合并之前，是 <code>30px</code>，合并之后以大的值保留，剩下<code>20</code>。</p><p>我们来举个例子。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.first</span> &#123;</span><br><span class="line">  <span class="attribute">margin-bottom</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: orange;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.second</span> &#123;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">50px</span>;</span><br><span class="line">  <span class="attribute">background-color</span>: wheat;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box first&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box second&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>为了效果明显，我们在这里添加了 <code>1.5</code> 个格子的高度，来看看效果，我们就发现了，其实只保留了一个格子的高度。所以验证了外边距合并。</p><p><img data-src="https://raw.githubusercontent.com/hzzzzzzzq/Blog/main/asseats/images/css/box-model/box-model7.png" alt="box-model7"></p><p>而为什么会这样呢，其实在这里就是创建了一个 <a href="https://hzzzzzzzq.github.io/Blog/5a2d113b.html">《CSS 系列之 BFC 容器》</a>，可以在这边文章中去了解 <code>BFC</code>。</p><p>盒模型，在面试中容易遇到，是比较简单但是很重要的知识点。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSS 系列之文章介绍</title>
      <link href="//Blog/3e4e6583.html"/>
      <url>//Blog/3e4e6583.html</url>
      
        <content type="html"><![CDATA[<h2 id="适合人群"><a href="#适合人群" class="headerlink" title="适合人群"></a>适合人群</h2><ul><li>适合了解过 CSS 基础的人</li><li>想要更深入的进行学习 CSS 的人</li><li>CSS 面试复习的人</li></ul><h2 id="目的"><a href="#目的" class="headerlink" title="目的"></a>目的</h2><blockquote><p>主要是为了让更多的人，掌握 css 相关的布局，选择器等内容，方便在开发中使用。</p></blockquote><p>在开发过程中，样式与布局是我们最常用到的内容，而我在下面的这些文章中，以面试题目的方式，教一些最常用的一些 <code>css</code> 内容。</p><p>而这些内容的作用，主要是为了让你的页面布局更加实用、美观。</p><p>公司的开发项目中，一般会使用 <code>less、scss</code> 等一些框架方式，而这些框架的基础其实都是 <code>css</code> 的一些基础。</p><p>基础样式，我就不在这些文章中叙述了。</p><h2 id="文章目录"><a href="#文章目录" class="headerlink" title="文章目录"></a>文章目录</h2><ul><li><strong>盒模型</strong><br>主要介绍了盒模型是什么。</li><li><strong>css 选择器</strong><br>了解一下 <code>css</code> 各类选择器，具体的使用方式。</li><li><strong>BFC</strong><br>带你们了解一下，什么是 <code>BFC</code>，以及它的应用有什么？</li><li><strong>position</strong><br>各种定位，方便在开发中使用。</li><li><strong>flex</strong><br>主要介绍了 <code>flex</code> 布局，可以学的详细，并使用。</li><li><strong>css 优先级</strong><br>主要介绍了 <code>css</code> 样式优先级，在这里可以了解到，各类选择器的优先级情况。</li><li>双飞翼/圣杯布局<br>主要介绍了三列布局，如何来做。</li><li><strong>div 居中</strong><br>介绍了一些，让元素或者内容水平垂直居中的方式。</li><li><strong>css3 新特性</strong><br>这篇文章，主要是带你们了解一下 <code>css3</code> 中新增加的特性</li><li><strong>float</strong><br>了解浮动，使用，以及清除浮动</li></ul><h2 id="为什么写这些-CSS-文章？"><a href="#为什么写这些-CSS-文章？" class="headerlink" title="为什么写这些 CSS 文章？"></a>为什么写这些 CSS 文章？</h2><p>CSS 也是面试中的内容，而在以往，我们对 CSS 的学习，都是最基础的内容进行学习，而没有深入去了解过知识。</p><p>这些文章，都是在面试题中常用的文章，也是在开发中经常使用的文章，如果都可以熟练掌握，对开发中的布局将会有一个极大的提升。</p><p>这些文章可以用来对知识进行一个巩固，通过学习，我相信可以学到你想要的 CSS 知识。</p>]]></content>
      
      
      <categories>
          
          <category> CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 系列之commit 格式化 husky（V7.0.4）让我们的 commit 更规范</title>
      <link href="//Blog/599a1ad9.html"/>
      <url>//Blog/599a1ad9.html</url>
      
        <content type="html"><![CDATA[<p>这里我们来说一下为什么我们做一个 <code>git commit</code> 的格式化。</p><p>我们来看看 <code>commit log</code> 做格式化之前的样子。<br><img data-src="https://user-images.githubusercontent.com/66205484/144975728-345548af-e8b2-4b99-aa54-27f41958ed5e.png" alt="1C3B682E-04B3-49C6-8136-0F8288F552D1"></p><p>我们再来看看 <code>commit log</code> 格式化之后的样子。<br><img data-src="https://user-images.githubusercontent.com/66205484/144977548-af392772-7f52-4ec4-8f45-1f9c13300417.png" alt="image"></p><p>对比格式化前和格式化后的感觉， 是不是很清晰，也可以让别人看得懂你在做什么，在多人协作开发时，是特别重要的。</p><p>在开始文章之前，我来说一下我使用的 <code>node</code> 和 <code>npm</code> 版本。</p><blockquote><p>12.0.1 - macOS Monterey</p><p>v16.4.2 - node</p><p>7.24.0 - npm</p></blockquote><h2 id="husky（v7-0-4"><a href="#husky（v7-0-4" class="headerlink" title="husky（v7.0.4"></a>husky（v7.0.4</h2><p><code>husky</code> 是一个可以让配置 <code>git</code> 钩子变得更加简单的工具。</p><ul><li><strong>首先我们先进行安装 <code>husky</code>。</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">yarn add husky -D</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">npm install husky --save-dev</span><br></pre></td></tr></table></figure><ul><li><strong>安装之后我们需要启动。</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 启动</span></span><br><span class="line">npm set-script prepare <span class="string">&quot;husky install&quot;</span></span><br></pre></td></tr></table></figure><p>这时会在 <code>package.json</code> 文件中看到下面的代码，说明执行成功。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;scripts&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;prepare&quot;</span>: <span class="string">&quot;husky install&quot;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然这里可能有人可能会执行下面的命令，并且报错 <code>set-script</code> 找不到，改用 <code>npm</code> 就可以了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn set-script prepare <span class="string">&quot;husky install&quot;</span></span><br><span class="line"><span class="comment"># error Command &quot;set-script&quot; not found</span></span><br></pre></td></tr></table></figure><p>或者可以直接跳过启动，手动去修改 <code>package.json</code> 文件，在 scripts 中添加 <code>&quot;prepare&quot;: &quot;husky install&quot;</code> 语句，然后执行 <code>husky install</code> 命令。</p><p>执行之后会增加一个 <code>.husky</code> 的文件夹。</p><p><img data-src="https://user-images.githubusercontent.com/66205484/144980206-a484f643-9116-4c46-92c7-d11ce7d07cd1.png" alt="image"></p><ul><li><strong>安装其他的一些检查规范</strong></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 lint-staged</span></span><br><span class="line">yarn add lint-staged -D</span><br><span class="line"><span class="comment"># 安装 eslint</span></span><br><span class="line">yarn add eslint prettier -D</span><br></pre></td></tr></table></figure><p>在 <code>package.json</code> 文件中需要添加下面的代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;lint-staged&quot;</span>: &#123;</span><br><span class="line">  <span class="string">&quot;src/**/*.&#123;js,jsx,ts,tsx,json&#125;&quot;</span>: [</span><br><span class="line">    <span class="string">&quot;prettier --write&quot;</span>,</span><br><span class="line">    <span class="string">&quot;eslint&quot;</span>,</span><br><span class="line">    <span class="string">&quot;git add&quot;</span></span><br><span class="line">  ]</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li>安装 <code>commitlint</code> 相关以来</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn add @commitlint/cli @commitlint/config-conventional -D</span><br></pre></td></tr></table></figure><ul><li>创建 commitlint.config.js 文件，</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 命令创建</span></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;module.exports = &#123;extends: [&#x27;@commitlint/config-conventional&#x27;]&#125;&quot;</span> &gt; commitlint.config.js</span><br></pre></td></tr></table></figure><p>也可以手动创建，然后添加内容。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">  <span class="attr">extends</span>: [<span class="string">&#x27;@commitlint/config-conventional&#x27;</span>], <span class="comment">// 以下时我们自定义的规则</span></span><br><span class="line">  <span class="attr">rules</span>: &#123;</span><br><span class="line">    <span class="string">&#x27;type-enum&#x27;</span>: [</span><br><span class="line">      <span class="number">2</span>,</span><br><span class="line">      <span class="string">&#x27;always&#x27;</span>,</span><br><span class="line">      [</span><br><span class="line">        <span class="string">&#x27;feat&#x27;</span>, <span class="comment">// 新功能（feature）</span></span><br><span class="line">        <span class="string">&#x27;fix&#x27;</span>, <span class="comment">// 修补 bug</span></span><br><span class="line">        <span class="string">&#x27;docs&#x27;</span>, <span class="comment">// 文档（documentation）</span></span><br><span class="line">        <span class="string">&#x27;style&#x27;</span>, <span class="comment">// 格式（不影响代码运行的变动）</span></span><br><span class="line">        <span class="string">&#x27;refactor&#x27;</span>, <span class="comment">// 重构（即不是新增功能，也不是修改bug的代码变动）</span></span><br><span class="line">        <span class="string">&#x27;test&#x27;</span>, <span class="comment">// 增加测试</span></span><br><span class="line">        <span class="string">&#x27;merge&#x27;</span>, <span class="comment">// 合并分支</span></span><br><span class="line">      ],</span><br><span class="line">    ],</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>添加 <code>commit-msg</code> 和 <code>pre-commit</code> 文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 commit-msg</span></span><br><span class="line">yarn husky add .husky/commit-msg <span class="string">&#x27;yarn commitlint --edit &quot;$1&quot;&#x27;</span></span><br><span class="line"><span class="comment"># 添加 pre-commit</span></span><br><span class="line">yarn husky add .husky/pre-commit <span class="string">&#x27;yarn lint-staged --allow-empty &quot;$1&quot;&#x27;</span></span><br></pre></td></tr></table></figure><p>这之后我们可以来看看 <code>.husky</code> 文件现在的样子</p><p><img data-src="https://user-images.githubusercontent.com/66205484/144981602-8c53ab14-4c9c-4340-9a7f-b4dc4f119c2f.png" alt="image"></p><ul><li>最好就是 测试我们的 <code>git commit</code> 了</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加内容</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment"># 提交commit</span></span><br><span class="line">git commmit -m <span class="string">&quot;feat: 优化git commit&quot;</span></span><br></pre></td></tr></table></figure><ul><li>打印内容</li></ul><p><img data-src="https://user-images.githubusercontent.com/66205484/144982485-d2d4ac26-70b6-412e-a58b-5b5f223dcf7a.png" alt="image"></p><p>到这里我们就完成啦，当然，如果你的 <code>commit log</code> 格式，不符合自己添加的 <code>rules</code> 那么就会在 <code>commit</code> 时提交失败，这时候就需要你修改 <code>commit log</code> 的格式了。</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 系列之Git 实践</title>
      <link href="//Blog/b2c0e871.html"/>
      <url>//Blog/b2c0e871.html</url>
      
        <content type="html"><![CDATA[<p>今天来一篇 <code>git</code> 的在实际开发过程中的操作。</p><h2 id="拷贝"><a href="#拷贝" class="headerlink" title="拷贝"></a>拷贝</h2><ul><li>先到自己想要放项目的目录之下</li></ul><p><img data-src="https://user-images.githubusercontent.com/66205484/145941855-ee376157-ea50-4815-b072-f6e17388bf3c.png" alt="image"></p><ul><li>然后拷贝项目，后面的 <code>url</code> 放置自己的项目地址<br>当然，可能会进行密码输入之类的问题 比如 <strong>GitHub 不再支持密码验证解决方案：SSH 免密与 Token 登录配置</strong>。<br>这时候的链接，可能是需要 <code>SSH</code> 命令的 <code>git@github.com:hzzzzzzzq/git-application-docs.git</code>。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/hzzzzzzzq/git-application-docs.git</span><br><span class="line"><span class="comment"># 或者</span></span><br><span class="line">git <span class="built_in">clone</span> git@github.com:hzzzzzzzq/git-application-docs.git</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拷贝之后我们 cd 到目录文件</span></span><br><span class="line"><span class="built_in">cd</span> git-application-docs</span><br></pre></td></tr></table></figure><p><img data-src="https://user-images.githubusercontent.com/66205484/145945033-c6a0cd8d-fd48-48df-8c70-493dafe38e90.png" alt="image"></p><p>现在，就是我们 <code>clone</code> 下来的项目。</p><h2 id="提交和推送"><a href="#提交和推送" class="headerlink" title="提交和推送"></a>提交和推送</h2><ul><li><p>先添加想要加入的文件夹<br>我们这里加入 <code>git</code> 文件夹，以及 <code>branchTry.md</code> 用于分支合并，和 <code>gitTry.md</code> 用于 <code>git</code> 提交等。<br><img data-src="https://user-images.githubusercontent.com/66205484/145945306-950914ca-082a-4277-aa98-59ed75dfd584.png" alt="image"></p></li><li><p>将添加的文件加入<strong>暂存区</strong></p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 单个文件添加</span></span><br><span class="line">git add git/gitTry.md</span><br><span class="line"></span><br><span class="line"><span class="comment"># 全部一起添加</span></span><br><span class="line">git add .</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果该文件被忽略，则需要添加 -f 强制添加</span></span><br><span class="line">git add -f git/branchTry.md</span><br></pre></td></tr></table></figure><ul><li>然后使用 <code>git commit</code> 提交<br><code>git commit</code> 是将文件提交到本地仓库，用来记录本次修改的内容</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot;feat: 添加文件&quot;</span></span><br></pre></td></tr></table></figure><p><img data-src="https://user-images.githubusercontent.com/66205484/145946832-6365b89f-1bbc-49db-bdee-b629e38da6a5.png" alt="image"></p><p>其中包含了修改的文件内容。</p><p><strong>补充：提交信息的规范</strong></p><blockquote><p>feat: 新功能<br>fix: 修补 bug<br>docs: 文档修改<br>style: 格式修改<br>refactor: 重构<br>merge: 合并</p></blockquote><ul><li>提交本地仓库代码到远端仓库</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push</span><br></pre></td></tr></table></figure><p><img data-src="https://user-images.githubusercontent.com/66205484/145946928-94db41fa-ce35-4c8d-b89f-a90e624bfb7e.png" alt="image"></p><p><code>git push</code> 提交远端仓库的结果。</p><h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><ul><li>创建一个新分支，并切换入该分支<br><code>feat-branch</code> 是分支名，这里基本是按照功能来命名。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git checkout -b feat-branch</span><br></pre></td></tr></table></figure><ul><li>切换分支</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># main 就是你要切换的分支名</span></span><br><span class="line"><span class="comment"># 切回主分支</span></span><br><span class="line">git checkout main</span><br></pre></td></tr></table></figure><ul><li>删除分支</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># feat-branch 就是想要删除的分支名称</span></span><br><span class="line"><span class="comment"># 因为该分支还需要使用，就不做操作了。</span></span><br><span class="line">git branch -d feat-branch</span><br></pre></td></tr></table></figure><ul><li>将分支提交到远端分支</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push git@github.com:hzzzzzzzq/git-application-docs.git feat-branch</span><br></pre></td></tr></table></figure><p><img data-src="https://user-images.githubusercontent.com/66205484/145948538-7a1b1cfa-68a2-4331-93c1-b7ccd4233e4b.png" alt="image"></p><p>这时候，在远端仓库中，就可以看到该分支了。</p><p><img data-src="https://user-images.githubusercontent.com/66205484/145948592-28bfcf8d-bbc9-4bd4-abea-3677f5166223.png" alt="image"></p><h2 id="拉取"><a href="#拉取" class="headerlink" title="拉取"></a>拉取</h2><p>一个项目经常是多个人一起进行开发的，当别人提交代码时，我们就需要拉取他人的代码了。这时候 <code>git pull</code> 的作用就来了。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull</span><br></pre></td></tr></table></figure><p>为了演示 <code>git pull</code>，我在这边新建一个 <code>git</code> 本地仓库，用来演示共同开发时的拉取以及冲突。</p><p><code>clone</code> 一个新项目，我们然后对文件进行部分修改，然后进行提交。</p><p><img data-src="https://user-images.githubusercontent.com/66205484/145949740-f16e3a5f-37a0-4a9e-84d0-d949b81250a4.png" alt="image"></p><p><img data-src="https://user-images.githubusercontent.com/66205484/145949825-3bdd4f02-b9d4-4fff-b7e1-5acef06fcb0b.png" alt="image"></p><p>接下来，我们重新切回到我们之前的文件，然后进行 <code>git pull</code>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切换原项目</span></span><br><span class="line"><span class="built_in">cd</span> ../git-application-docs</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切到 main 分支</span></span><br><span class="line">git checkout main</span><br><span class="line"></span><br><span class="line"><span class="comment"># 拉取远端代码</span></span><br><span class="line">git pull</span><br></pre></td></tr></table></figure><p><img data-src="https://user-images.githubusercontent.com/66205484/145950387-c9287701-4fa0-45fe-b4fe-40fbd0536277.png" alt="image"></p><h2 id="合并与冲突"><a href="#合并与冲突" class="headerlink" title="合并与冲突"></a>合并与冲突</h2><p>在 <code>main</code> 分支下，修改标题内容。</p><p><img data-src="https://user-images.githubusercontent.com/66205484/145951381-1dcf6294-2fed-4604-b1b7-15ff41c8e38d.png" alt="image"></p><p>然后提交。</p><p><img data-src="https://user-images.githubusercontent.com/66205484/145951973-5b9d95a9-e398-4cf5-a918-cb87aacf7106.png" alt="image"></p><p>切换到 <code>feat-branch</code>，并修改同文件的标题，并提交。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切分支</span></span><br><span class="line">git checkout feat-branch</span><br><span class="line"><span class="comment"># 添加到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment"># 提交</span></span><br><span class="line">git commit -m <span class="string">&quot;feat: change branch title&quot;</span></span><br><span class="line"><span class="comment"># 推送到远端</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p><img data-src="https://user-images.githubusercontent.com/66205484/145952854-b3002d2b-5002-403e-9911-351e77114f98.png" alt="image"></p><ul><li>合并</li></ul><p>我们切回 <code>main</code> 分支，然后将 <code>feat-branch</code> 合并到 <code>main</code> 分支。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 切分支</span></span><br><span class="line">git checkout main</span><br><span class="line"><span class="comment"># 合并</span></span><br><span class="line">git merge feat-branch</span><br><span class="line"><span class="comment"># 没有冲突的情况，直接推送即可</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>如果合并没有问题，就可以直接进行 <code>push</code> 操作。<br>但是，由于我们在两个分支，同时对同一个文件的同一个地方进行了修改，于是，就产生了以下问题，<code>merge</code> 失败，有冲突。</p><p><img data-src="https://user-images.githubusercontent.com/66205484/145953252-68c50a45-491c-45e4-8fe0-9547b848bf2e.png" alt="image"></p><ul><li>冲突</li></ul><p>我们需要打开文件夹，我们发现一些奇奇怪怪的符号，这些就是冲突的标识，我们需要对冲突进行处理。<br>将文件进行修改，调整到你希望的样子。并对全局进行检查是否，还有其他冲突文件。</p><p>我们看到有 <code>&lt;&lt;&lt;&lt;&lt;&lt;</code> 以及 <code>======</code> 因为在 <code>.md</code> 文件中，我打开了源形式，否则可能看不到 <code>=====</code> 或者 <code>&lt;</code> 被转化。</p><p><img data-src="https://user-images.githubusercontent.com/66205484/145954659-f1b01667-b998-4dfb-876a-bc0df63ce0f7.png" alt="image"></p><p>现在我演示一下，我想保留 <code>feat-branch</code> 的内容，则删除 <code>main</code> 分支的内容。<br>将 <code>main</code> 分支内容删除之后的样子。<br><img data-src="https://user-images.githubusercontent.com/66205484/145954865-71a2a7a6-a0d4-4ddf-b1aa-1bc3fa2e5225.png" alt="image"></p><ul><li>提交推送</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加冲突文件到暂存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment"># 提交到本地</span></span><br><span class="line">git commit -m <span class="string">&quot;merge: 合并冲突&quot;</span></span><br><span class="line"><span class="comment"># 推送到远端</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p><img data-src="https://user-images.githubusercontent.com/66205484/145955245-05b5c18b-88b0-41c1-a84a-e44d255ea3c0.png" alt="image"></p><p>这时，我们在远端仓库 <code>main</code> 分支下，看到的就是我们 <code>feat-branch</code> 分支中的内容了。</p><h2 id="提交记录"><a href="#提交记录" class="headerlink" title="提交记录"></a>提交记录</h2><ul><li>git log 查看提交记录</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><p><img data-src="https://user-images.githubusercontent.com/66205484/145955543-29fc882d-7a25-418c-9e9e-35bd77ccd8c4.png" alt="image"></p><ul><li>只看某个人的提交记录<br>这里结果是一样的，因为都是我自己完成的。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">log</span> --author=hzzzzzzzq</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git 系列之Git 常用命令</title>
      <link href="//Blog/4e5067fc.html"/>
      <url>//Blog/4e5067fc.html</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h2 id="新建代码库"><a href="#新建代码库" class="headerlink" title="新建代码库"></a>新建代码库</h2><p>可以在自己目录下创建一个新的 git 仓库，也可以从远端服务器克隆一个仓库到本地。</p><ul><li>在当前目录下创建一个 git 仓库</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><ul><li>新建一个目录，并将其初始化为 git 仓库</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># name 表示 新建目录名</span></span><br><span class="line">git init [name]</span><br></pre></td></tr></table></figure><ul><li>从远程仓库 下载拷贝一个仓库和它的整个代码历史</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># url - 拷贝仓库的地址</span></span><br><span class="line">git <span class="built_in">clone</span> url</span><br></pre></td></tr></table></figure><h2 id="添加和删除文件"><a href="#添加和删除文件" class="headerlink" title="添加和删除文件"></a>添加和删除文件</h2><p>就是将你有改动的文件，添加或删除到本地的暂存区。</p><ul><li>添加文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># filename - 文件位置</span></span><br><span class="line"><span class="comment"># 添加文件</span></span><br><span class="line">git add [filename] [filename] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加指定目录到暂存区</span></span><br><span class="line">git add [dir]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加所有文件到暂存区</span></span><br><span class="line">git add .</span><br></pre></td></tr></table></figure><ul><li>删除文件</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 删除文件</span></span><br><span class="line">git rm [filename] [filename] ...</span><br></pre></td></tr></table></figure><h2 id="代码提交"><a href="#代码提交" class="headerlink" title="代码提交"></a>代码提交</h2><p>提交就是将代码提交到本地仓库区，并不会直接提交到远端服务器。提交代码也是推送的前提，有提交才会有推送。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 提交暂存区到仓库区</span></span><br><span class="line">git commit -m <span class="string">&quot;代码提交信息&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交暂存区的指定文件</span></span><br><span class="line">git commit [filename] [filename] ... -m <span class="string">&quot;代码提交信息&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 用新的 commit 替换上一次提交</span></span><br><span class="line"><span class="comment"># 如果内容无任何变化，用来改写上一次 commit 的提交信息</span></span><br><span class="line">git commit --amend -m <span class="string">&quot;新提交信息&quot;</span></span><br></pre></td></tr></table></figure><h2 id="推送改动"><a href="#推送改动" class="headerlink" title="推送改动"></a>推送改动</h2><p>推送，就是用来，将你的本地代码推送到远端服务器，在远端保存。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># branch - 想推送的分支</span></span><br><span class="line">git push [origin] [branch]</span><br></pre></td></tr></table></figure><h2 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h2><p>分支是用来将特性开发绝缘开来。在创建一个仓库的时候， <code>master</code> 是<strong>默认的</strong>分支，我们可以作为主分支，在其他分支上完成相对应的功能后，再将分支合并到主分支 <code>master</code> 上。可以有效的对项目进行管理，降低出错概率。</p><p><img data-src="https://user-images.githubusercontent.com/66205484/145320439-ce0b38e6-bf4e-4fa4-80d8-4bc84b176492.png" alt="image"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建一个叫做 ‘feat-new’ 的分支，并切换过去</span></span><br><span class="line">git checkout -b feat-new</span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换回主分支</span></span><br><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除新建分支</span></span><br><span class="line">git branch -d feat-new</span><br><span class="line"></span><br><span class="line"><span class="comment"># 推送本地创建的分支到远端仓库，让他人可见</span></span><br><span class="line">git push origin feat-new</span><br></pre></td></tr></table></figure><h2 id="更新与合并"><a href="#更新与合并" class="headerlink" title="更新与合并"></a>更新与合并</h2><p>更新本地仓库，以及将本地数据合并到 <code>master</code> ，获取 (<code>fetch</code>) 并合并 (<code>merge</code>) 远端的改动。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 更新本地代码</span></span><br><span class="line">git pull</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并其他分支到当前分支</span></span><br><span class="line">git merge [branch]</span><br></pre></td></tr></table></figure><p>当然，不是每一次的合并都是顺利的，可能会出现冲突，这时候，就需要手动去修改冲突文件并合并冲突。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 添加 冲突文件，标记为合并成功</span></span><br><span class="line">git add [filename] [filename] ...</span><br><span class="line"></span><br><span class="line"><span class="comment"># 合并之前，可以使用该命令预览差异</span></span><br><span class="line">git diff [source_branch] [target_branch]</span><br></pre></td></tr></table></figure><h2 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h2><p>在开发过程中，是需要标签的，来标记软件发布情况。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 打标签</span></span><br><span class="line"><span class="comment"># tagID 是标记的提交ID，需要具有唯一性。</span></span><br><span class="line">git tag 1.0.0 [tagID]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取提交 ID，查看本地仓库的历史记录</span></span><br><span class="line">git <span class="built_in">log</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 可以添加参数来修改输出</span></span><br><span class="line"><span class="comment"># 只看某个人的记录</span></span><br><span class="line">git <span class="built_in">log</span> --author=hzzzzzzzq</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每条提交记录只占一行的输出（压缩之后</span></span><br><span class="line">git <span class="built_in">log</span> --pretty=oneline</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看哪些文件有变动</span></span><br><span class="line">git <span class="built_in">log</span> --name-status</span><br><span class="line"></span><br><span class="line"><span class="comment"># 如果这些不够使用，可以查看更多的 git log 信息</span></span><br><span class="line">git <span class="built_in">log</span> --<span class="built_in">help</span></span><br></pre></td></tr></table></figure><h2 id="回退"><a href="#回退" class="headerlink" title="回退"></a>回退</h2><p>有时候，可能在 <code>commit</code> 时，发现有错误，或者在 <code>push</code> 时，发现 <code>commit log</code> 信息错误，不允许提交(当然这是在公司项目配置的情况下才会发生)，我们就需要对提交进行回退，去修改错误或者修改 <code>commit log</code> 信息。</p><p>当然，还有命令时是用于版本回退的。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 回退信息 - 回退一次，数字表示回退次数</span></span><br><span class="line">git reset HEAD~1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取服务器上最新的版本历史，并让本地分支指向它</span></span><br><span class="line">git fetch origin</span><br><span class="line">git reset --hard origin/master</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES 6 系列之Module 语法</title>
      <link href="//Blog/6cc33247.html"/>
      <url>//Blog/6cc33247.html</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>在 ES 6 之前，社区制定了一些模块加载方案，最主要的就是 <a href=""><code>CommonJS</code>(改文章尚未添加)</a> 和 AMD 两种。前者主要用于服务器，后者用于浏览器。ES 6 在语言层面上实现了模块功能，可以取代 <a href=""><code>CommonJS</code></a> 和 AMD 规范，成为了通用的模块解决方案。</p><h2 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h2><p><code>module</code> 主要由 <code>export</code> 和 <code>import</code> 两个命令。<code>export</code> 命令用于规定模块的对外接口，<code>import</code> 命令用于输入其他模块功能。<br>每一个模块都是一个独立文件，文件内的所有变量，外部无法获取，如果希望在外部获取，就必须使用 <code>export</code> 命令进行输出。<br>我们创建一个 <code>export.js</code> 文件，来写 <code>export</code> 相关内容，<code>import.js</code> 作为 <code>import</code> 导入相关内容。</p><h3 id="export-命令"><a href="#export-命令" class="headerlink" title="export 命令"></a>export 命令</h3><p>先看看 <code>export</code> 命令的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="string">&#x27;hzzzzzzzq&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> height = <span class="number">1.78</span>;</span><br></pre></td></tr></table></figure><p>上面是一种每一个都导出的写法，也可以看一下另外一种写法，使用一起导出的方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export.js</span></span><br><span class="line"><span class="keyword">const</span> name = <span class="string">&#x27;hzzzzzzzq&#x27;</span>;</span><br><span class="line"><span class="keyword">const</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">const</span> height = <span class="number">1.78</span>;</span><br><span class="line"><span class="keyword">export</span> &#123; name, age, height &#125;;</span><br></pre></td></tr></table></figure><p>两种写法是相同的。<br>当然 export 命令肯定不只是只能导出变量，还可以导出函数或者类。<br>来看看函数导出吧，还是用老朋友 <code>add</code> 来看吧。<br>当然， function 和 class 的输出，必须使用这样的格式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">export</span> &#123; add &#125;;</span><br></pre></td></tr></table></figure><p>在导出的时候，需要注意的是，<strong>导出的变量必须与模块内部的变量建立一一对应关系</strong>。</p><h3 id="import-命令"><a href="#import-命令" class="headerlink" title="import 命令"></a>import 命令</h3><p>使用 <code>import</code> 命令导入 <code>export.js</code> 文件，然后打印。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// import.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; name, age, height, add &#125; <span class="keyword">from</span> <span class="string">&#x27;./export.js&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(name, age, height);</span><br><span class="line"><span class="comment">// hzzzzzzzq 18 1.78</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>如果想要自己重新命名，在 <code>import</code> 时，要使用 <code>as</code> 关键字，比如我将 <code>add</code> 改为 <code>sum</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; add <span class="keyword">as</span> sum &#125; <span class="keyword">from</span> <span class="string">&#x27;./export.js&#x27;</span>;</span><br></pre></td></tr></table></figure><p>需要注意的是</p><ul><li><code>import</code> 命令具有提升效果，会提升到整个模块的顶部，首先执行。</li><li><code>import</code> 是静态执行，不可以使用表达式或者变量</li><li>多次重复执行同一句 <code>import</code> ，那么只会执行一次，不会多次执行。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">&#x27;./export.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; name &#125; <span class="keyword">from</span> <span class="string">&#x27;./export.js&#x27;</span>; <span class="comment">// 与上一句相同</span></span><br><span class="line"><span class="comment">// 等同于</span></span><br><span class="line"><span class="keyword">import</span> &#123; add, name &#125; <span class="keyword">from</span> <span class="string">&#x27;./export.js&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; <span class="string">&#x27;a&#x27;</span> + <span class="string">&#x27;dd&#x27;</span>&#125; <span class="keyword">from</span> <span class="string">&#x27;./export.js&#x27;</span>; <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><h3 id="模块的整体加载"><a href="#模块的整体加载" class="headerlink" title="模块的整体加载"></a>模块的整体加载</h3><p>导入时，除了一个一个的导入，还有一种整体导入方式，就是使用( <code>*</code> )来指定一个对象。</p><p>我们来看看刚刚的全部导入方式。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> all <span class="keyword">from</span> <span class="string">&#x27;./export.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(all.name, all.age, all.height); <span class="comment">// hzzzzzzzq 18 1.78</span></span><br><span class="line"><span class="built_in">console</span>.log(all.add(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>这种方式，模块整体加载所在的那个对象，也就是 <code>all</code> 对象。</p><h3 id="export-default-命令"><a href="#export-default-命令" class="headerlink" title="export default 命令"></a>export default 命令</h3><p>导出还有一种 <code>export default</code> 命令，这种导出方式就是指定默认输出。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// export.js</span></span><br><span class="line"><span class="comment">// 例子 类</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="class"><span class="keyword">class</span> () </span>&#123; ... &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="comment">// 例子 函数</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> (<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这种导出方式，不需要固定的名称，来对应，可以直接使用匿名类或匿名函数，也可以不用匿名，但是导出时，都是可以任意命名。</p><p>导入时不需要使用 <code>&#123;&#125;</code> 来包裹，可以直接命名，使用任何名称命名导入。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子 类</span></span><br><span class="line"><span class="keyword">import</span> Obj <span class="keyword">from</span> <span class="string">&#x27;./export.js&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> Obj();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="comment">// 例子 函数</span></span><br><span class="line"><span class="keyword">import</span> add <span class="keyword">from</span> <span class="string">&#x27;./export.js&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>));</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>在正常开发当中，最常使用的一些 <code>export</code> 、<code>improt</code> 以及一些 <code>export default</code> 的方法。</p>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES 6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES 6 系列之三种异步 - Async/await</title>
      <link href="//Blog/e32c8228.html"/>
      <url>//Blog/e32c8228.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>async</code> 函数时什么，其实就是 <code>Generator</code> 的语法糖，只需要将 <code>*</code> 改写成 <code>async</code>，<code>yield</code> 改写成 <code>await</code>。<br>我们来看看 <code>Generator</code> 的写法，与 <code>async</code> 的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readFile = <span class="function"><span class="keyword">function</span> (<span class="params">fileName, ms</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(fileName);</span><br><span class="line">      resolve(fileName); <span class="comment">// 需要给 `Promise` 一个状态转化，就是异步执行是否成功</span></span><br><span class="line">    &#125;, ms);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">genator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> readFile(<span class="string">&#x27;fileName1&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">yield</span> readFile(<span class="string">&#x27;fileName2&#x27;</span>, <span class="number">2000</span>);</span><br><span class="line">  <span class="keyword">yield</span> readFile(<span class="string">&#x27;fileName3&#x27;</span>, <span class="number">3000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;打印完毕&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> gen = genator();</span><br><span class="line">gen.next(); <span class="comment">// fileName1</span></span><br><span class="line">gen.next(); <span class="comment">// fileName2</span></span><br><span class="line">gen.next(); <span class="comment">// fileName3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">asyncTest</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">await</span> readFile(<span class="string">&#x27;fileName1&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">await</span> readFile(<span class="string">&#x27;fileName2&#x27;</span>, <span class="number">2000</span>);</span><br><span class="line">  <span class="keyword">await</span> readFile(<span class="string">&#x27;fileName3&#x27;</span>, <span class="number">3000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;执行完毕&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line">asyncTest();</span><br><span class="line"><span class="comment">// fileName1</span></span><br><span class="line"><span class="comment">// fileName2</span></span><br><span class="line"><span class="comment">// fileName3</span></span><br><span class="line"><span class="comment">// 执行完毕</span></span><br></pre></td></tr></table></figure><p>从上面我们可以看出，我们需要手动调用 <code>next</code> 方法，来执行下一步。<br>而 <code>async</code> 有自己内置执行器。</p><p>我们来看看 <code>async</code> 对 <code>Generator</code> 的改进。</p><ul><li>内置执行器<br>Generator 函数执行需要 <code>next</code> 执行器，外面手动调用，所以有 <code>co</code> 模块，而 async 函数自带执行器，与普通函数一样，只需要一行调用。<br>下面代码中，调用了该函数之后，就会自动执行，输出最后结果。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">asyncTest();</span><br></pre></td></tr></table></figure><ul><li><p>语义更好<br><code>async/await</code>，比起 <code>Generator</code> 函数的 <code>*</code> 与 <code>yield</code>，语义更清晰。 <code>async</code> 就表示异步，而 <code>await</code> 表示后面的表达式需要等待结果。</p></li><li><p>适用性更强<br><code>co</code> 模块约定，<code>yield</code> 后面只能是 <code>Thunk</code> 函数或者 <code>Promise</code> 对象，而 <code>await</code> 后面可以是 <code>Promise</code>，也可以是原始类型值。</p></li><li><p>返回值是 <code>Promise</code><br><code>async</code> 函数返回值是 <code>Promise</code> 对象，可以用 <code>then</code> 方法来进行下一步操作。<br><code>await</code> 命令就是内部 <code>then</code> 命令的语法糖。</p></li></ul><h2 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h2><h3 id="返回-Promise-对象"><a href="#返回-Promise-对象" class="headerlink" title="返回 Promise 对象"></a>返回 Promise 对象</h3><ul><li><code>async</code> 函数返回一个 <code>Promise</code> 对象，可以使用 <code>then</code> 方法加入回调函数。</li><li>执行函数时，遇到 <code>await</code> 就会先返回，等异步操作结束，再继续执行函数体后面的语句。</li><li>必须等到内部所有 <code>await</code> 命令后面的 <code>Promise</code> 对象执行完毕，状态才会改变，除非遇到 <code>return</code> 或者报错。</li><li><code>async</code> 函数内部的异步操作执行完毕，就可以执行 <code>then</code> 方法。</li><li><code>JS</code> 没有休眠的语法，但是借助 <code>await</code> 命令就可以让程序停顿一定的时间。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">useAsync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// readFile 使用的是本文顶部的方法</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> readFile(<span class="string">&#x27;fileName&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">useAsync().then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// fileName</span></span><br><span class="line"><span class="comment">// fileName</span></span><br></pre></td></tr></table></figure><ul><li>如果返回 <code>reject</code> 状态，则会中断执行，并通过 <code>catch</code> 捕获</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">useAsync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="comment">// readFile 使用的是本文顶部的方法</span></span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> <span class="built_in">Promise</span>.reject(<span class="string">&#x27;测试错误&#x27;</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;打印？&#x27;</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">useAsync()</span><br><span class="line">  .then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// 测试错误</span></span><br></pre></td></tr></table></figure><h3 id="await-命令"><a href="#await-命令" class="headerlink" title="await 命令"></a>await 命令</h3><p><code>await</code> 命令后面是一个 <code>Promise</code> 对象，返回结果。如果不是 <code>Promise</code>，就直接返回对应值。</p><ul><li><code>await</code> 命令只能出现在 <code>async</code> 命令函数内部，不然会报错。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">useAsync</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="keyword">await</span> add(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">useAsync().then(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(value);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><code>await</code> 后面跟着 <code>add</code> 方法，算出一个数值 <code>3</code>，然后将值 <code>return</code> 出来。</p><hr><p>简单的 <code>await</code> 使用方法，就是如此。</p>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES 6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES 6 系列之三种异步 - Generator 函数</title>
      <link href="//Blog/531f98aa.html"/>
      <url>//Blog/531f98aa.html</url>
      
        <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p><code>Generator</code> 是 <code>ES 6</code> 提供的一种异步编程解决方案。</p><ul><li>函数定义时，在 <code>funciton</code> 后面添加一个星号(<code>*</code>)</li><li>函数体内部使用 <code>yield</code> 表达式</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 普通函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Generator</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hzzzzzzzq&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;good&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Generator</code> 函数的调用方式与普通函数是一样的，在函数名后面加上一对圆括号。</p><h3 id="yield-表达式"><a href="#yield-表达式" class="headerlink" title="yield 表达式"></a>yield 表达式</h3><p><code>yield</code> 表达式就是 <code>Generator</code> 的暂停标志。</p><ul><li>遇到 <code>yield</code> 表达式，就会停止执行后面的操作，<code>yield</code> 后面表达式的值，作为返回对象的 <code>value</code> 属性值</li><li>下次调用 <code>next</code> 方法时，才会继续执行代码，直到下一个 <code>yield</code></li><li>如果没有遇到遇到 <code>yield</code>，则运行至结束，看是否有 <code>return</code>，如果有，则 <code>return</code> 后面的值作为返回对象的 <code>value</code></li><li>如果没有 <code>yield</code> 或 <code>return</code>，则返回 <code>value</code> 为 <code>undefined</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>; <span class="comment">// 第一个 next 时，执行</span></span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hzzzzzzzq&#x27;</span>; <span class="comment">// 第二个 next 时，执行</span></span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;good&#x27;</span>; <span class="comment">// 第三个 next 时，执行</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面的代码中，我们可以来感受上面的用途。</p><p>只有在调用 <code>next</code> 方法将指针移到这一句时，才会进行求值。</p><p>与 <code>return</code> 不同的地方在于，<code>return</code> 不具备记忆功能，也就说，在一个函数中，<code>return</code> 只能执行一次，而 yield 具备记忆功能，可以通过 <code>next</code> 方法继续执行代码。</p><h2 id="next-方法"><a href="#next-方法" class="headerlink" title="next 方法"></a>next 方法</h2><h3 id="next-普通使用"><a href="#next-普通使用" class="headerlink" title="next 普通使用"></a>next 普通使用</h3><p><code>next</code> 方法就是 <code>generator</code> 函数的内置执行器，如果遇到 <code>yield</code> 时，只有通过调用 <code>next</code>，才会继续执行代码。</p><p>而 <code>next</code> 代码的执行值，我们可以打印来看，会是一个对象，带有 <code>value</code> 和 <code>done</code> 两个属性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hzzzzzzzq&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;good&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> gen = generator();</span><br><span class="line"><span class="built_in">console</span>.log(gen.next()); <span class="comment">// &#123; value: &#x27;hello&#x27;, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next()); <span class="comment">// &#123; value: &#x27;hzzzzzzzq&#x27;, done: false &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next()); <span class="comment">// &#123; value: &#x27;good&#x27;, done: true &#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next()); <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><ul><li><code>value</code> 值显示的是 <code>yield</code> 或者 <code>return</code> 后面的返回值。</li><li><code>done</code> 是一个布尔值，表示遍历是否结束，<code>true</code> 表示结束。</li><li>当然，<code>return</code> 只能有一个，且 <code>return</code> 之后不能有 <code>yield</code>，因为 <code>return</code>，就会让 <code>done</code> 变成 <code>true</code>。</li></ul><h3 id="next-方法参数"><a href="#next-方法参数" class="headerlink" title="next 方法参数"></a>next 方法参数</h3><p><code>next</code> 方法可以带一个参数，<strong>该参数会被当作上一个 <code>yield</code> 表达式的值</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> value = <span class="keyword">yield</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(value);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> gen = generator();</span><br><span class="line"><span class="built_in">console</span>.log(gen.next());</span><br><span class="line"><span class="built_in">console</span>.log(gen.next(<span class="string">&#x27;world&#x27;</span>));</span><br><span class="line"><span class="comment">// &#123; value: null, done: false &#125;</span></span><br><span class="line"><span class="comment">// world</span></span><br><span class="line"><span class="comment">// &#123; value: &#x27;null&#x27;, done: false &#125;</span></span><br></pre></td></tr></table></figure><p>当然，这个是会被当作上一个 <code>yield</code> 表达式的值，是在函数内部使用，并不是在 <code>next</code> 返回对象中作为 <code>value</code> 的键值返回。他会替换 <code>generator</code> 函数体内的上一个 <code>yield</code> 值并赋值给我们定义的变量 <code>value</code>。</p><h2 id="for…of-循环"><a href="#for…of-循环" class="headerlink" title="for…of 循环"></a>for…of 循环</h2><p><code>for...of</code> 循环可以自动遍历 <code>Generator</code> 函数运行时生成的 <code>Interator</code> 对象，不需要手动调用 <code>next</code> 方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;one&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;two&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;three&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;four&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;five&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> v <span class="keyword">of</span> gen()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// one two three four</span></span><br></pre></td></tr></table></figure><p>注意：如果 <code>done</code> 为 <code>true</code>，则会被立刻终止，所有最后一句 <code>return</code> 语句不在循环中。</p><p>处理 <code>for...of</code> 循环之外，扩展运算符，解构赋值和 <code>Array.from</code> 方法内部调用的，都是遍历器接口。<br>都可以将 <code>Generator</code> 函数作为返回的 <code>Interator</code> 对象，作为参数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">gen</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;one&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;two&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;three&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;four&#x27;</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">&#x27;five&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log([...gen()]);</span><br><span class="line"><span class="comment">// [&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;, &#x27;four&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(gen()));</span><br><span class="line"><span class="comment">// [&#x27;one&#x27;, &#x27;two&#x27;, &#x27;three&#x27;, &#x27;four&#x27;]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> [x, y, z] = gen();</span><br><span class="line"><span class="built_in">console</span>.log(x, y, z);</span><br><span class="line"><span class="comment">// one two three</span></span><br></pre></td></tr></table></figure><h2 id="yield"><a href="#yield" class="headerlink" title="yield*"></a>yield*</h2><p><code>yield*</code> 就是 用来在一个 <code>Generator</code> 函数里面执行另一个 <code>Generator</code> 函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator1</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hzzzzzzzq&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;good&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span>* generator1();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> gen = generator();</span><br><span class="line"><span class="built_in">console</span>.log(gen.next().value); <span class="comment">// hello</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next().value); <span class="comment">// hzzzzzzzq</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next().value); <span class="comment">// good</span></span><br><span class="line"><span class="built_in">console</span>.log(gen.next().value); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>我们在 <code>generator</code> 函数中，使用了 <code>yield*</code> ，后面调用 <code>generator1</code> 函数。</p><p>然后我们就可以直接使用 <code>next</code> 函数，跟普通的 <code>generator</code> 函数一样使用就可以。</p><h2 id="Generator-prototype-throw-return"><a href="#Generator-prototype-throw-return" class="headerlink" title="Generator.prototype.throw() / return()"></a>Generator.prototype.throw() / return()</h2><h3 id="throw"><a href="#throw" class="headerlink" title="throw()"></a>throw()</h3><p><code>Generator</code> 函数返回的遍历器对象，都会有个 <code>throw</code> 方法，可以在函数体外抛出错误，然后在 <code>Generator</code> 函数体内捕获。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;内部&#x27;</span>, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> gen = generator();</span><br><span class="line">gen.next();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  gen.throw(<span class="string">&#x27;错误1&#x27;</span>);</span><br><span class="line">  gen.throw(<span class="string">&#x27;错误2&#x27;</span>);</span><br><span class="line">&#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;外部&#x27;</span>, e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 内部 错误1</span></span><br><span class="line"><span class="comment">// 外部 错误2</span></span><br></pre></td></tr></table></figure><p>在上面的例子中，我们可以看出，第一个 <code>throw</code> 被函数体内部的 <code>catch</code> 语句捕获，然而第二个错误，在内部已经执行过 <code>catch</code>，所有这个错误就被抛出来了，被外面的 <code>try...catch</code> 捕获。</p><h3 id="return"><a href="#return" class="headerlink" title="return()"></a>return()</h3><p><code>Generator</code> 函数返回的对象中，还有一个 <code>return</code> 方法，可以返回给定的值，并且结束 <code>Generator</code> 函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;hzzzzzzzq&#x27;</span>;</span><br><span class="line">  <span class="keyword">yield</span> <span class="string">&#x27;good&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> gen = generator();</span><br><span class="line">gen.next(); <span class="comment">// &#123; value: &#x27;hello&#x27;, done: false &#125;</span></span><br><span class="line">gen.return(<span class="string">&#x27;world&#x27;</span>); <span class="comment">// &#123; value: &#x27;world&#x27;, done: true &#125;</span></span><br><span class="line">gen.next(); <span class="comment">// &#123; value: undefined, done: true &#125;</span></span><br></pre></td></tr></table></figure><p>从上面的例子，我们可以看出，执行 <code>return</code> 之后，后面的 <code>done</code> 就会变为 <code>true</code>，且传入的参数会作为返回对象的 <code>value</code> 值。</p><p>在以后调用时，都会被调整为 <code>undefined</code>，其实就相当于，将 <code>generator</code> 函数中的添加一个 <code>return</code> 。</p><h2 id="Generator-函数的异步操作"><a href="#Generator-函数的异步操作" class="headerlink" title="Generator 函数的异步操作"></a>Generator 函数的异步操作</h2><p>我们使用一个 <code>readFile</code>，使用 <code>setTimeout</code> 假装调用接口，然后调用 <code>gen.next()</code> 接口返回对象的 <code>value</code> 属性值进行下一步操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> readFile = <span class="function"><span class="keyword">function</span> (<span class="params">fileName, ms</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      resolve(<span class="string">&#x27;异步请求成功回调&#x27;</span>); <span class="comment">// 需要给 `Promise` 一个状态转化，就是异步执行是否成功</span></span><br><span class="line">    &#125;, ms);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">generator</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">const</span> str = <span class="keyword">yield</span> readFile(<span class="string">&#x27;fileName1&#x27;</span>, <span class="number">1000</span>);</span><br><span class="line">  <span class="built_in">console</span>.log(str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> gen = generator();</span><br><span class="line"><span class="keyword">const</span> result = gen.next(); <span class="comment">// fileName1</span></span><br><span class="line">result.value</span><br><span class="line">  .then(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">val2</span>) =&gt;</span> &#123;</span><br><span class="line">    gen.next(<span class="string">&#x27;异步请求结果&#x27;</span>);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// 异步请求成功回调</span></span><br><span class="line"><span class="comment">// 异步请求结果</span></span><br></pre></td></tr></table></figure><p><code>yield</code> 后面用来调用异步函数，然后返回结果输出。</p>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES 6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES 6 系列之三种异步 - Promise 对象</title>
      <link href="//Blog/d34f7998.html"/>
      <url>//Blog/d34f7998.html</url>
      
        <content type="html"><![CDATA[<h2 id="含义"><a href="#含义" class="headerlink" title="含义"></a>含义</h2><p><strong>Promise 是异步编程的一种解决方案</strong>，在 <code>Promise</code> 之前，采用的是回调函数和事件，但是会存在一些问题，像回调地狱。而在 ES6 中，提供了 <code>Promise</code> 对象。</p><p><code>Promise</code> 简单来讲，其实就是一个容器，用来存储异步事件（例如网络请求等）。</p><p>语法上来说，<code>Promise</code> 是一个对象，可以获取异步操作的消息。</p><h3 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h3><ul><li>对象状态不受外界影响。<ul><li>一共只有三种状态：<code>pending</code> （进行中）、<code>fulfilled</code>（完成）和 <code>rejected</code>（失败）。只受异步操作的结果，可以决定当前是哪种状态，其他任何操作都无法改变这个状态。</li></ul></li><li>一旦状态改变，就不能再变，任何时候都可以得到这个结果。<ul><li>Promise 对象状态改变只有两种可能性，从<code>pending</code> 到 <code>fulfilled</code> 和从 <code>pending</code> 到 <code>rejected</code>。</li></ul></li></ul><h3 id="主要缺陷"><a href="#主要缺陷" class="headerlink" title="主要缺陷"></a>主要缺陷</h3><ul><li>一旦创建会立即执行，无法中途取消。</li><li>如果内部不设置回调函数，外部是不能知道内部情况的。</li><li>当状态处于 <code>pending</code> 时，无法得知目前进展到哪个阶段。</li></ul><h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>这里一般需要进行异步操作，但是为了学习方便，我们直接同步进行了。<br><code>Promise</code> 构造函数接受一个函数作为参数，该函数的参数为 <code>resolve</code> 和 <code>reject</code>。 <code>resolve</code> 和 <code>reject</code> 是两个函数，有 JS 引擎提供，不需要自己部署。<br><code>resolve</code> 函数作用是将 <code>Promise</code> 的状态从 <code>pending</code> 变为 <code>resolved</code>，并且将操作结果作为参数传递出去。<br><code>reject</code> 函数作用是将 <code>Promise</code> 的状态从 <code>pending</code> 变为 <code>rejected</code>，并且将错误信息传递出去。<br><code>Promise</code> 生成实例之后，可以调用 <code>then</code> 方法，其中包含两个函数参数。第一个函数包含 <code>resolved</code> 状态的结果，第二个包含 <code>rejected</code> 状态结果。两个函数都是可选参数。</p><p>我们将 <code>flag</code> 比做异步操作，<code>true</code> 表示异步成功，<code>false</code> 表示异步失败。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">let</span> flag = <span class="literal">true</span>;</span><br><span class="line">  <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;操作成功&#x27;</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    reject(<span class="string">&#x27;操作失败&#x27;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(</span><br><span class="line">  <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;value = &#x27;</span>, value);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;error = &#x27;</span>, error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>从上面的代码来看，<code>flag</code> 为 <code>true</code> 时，会打印 <code>value = 操作成功</code>，为 false 时，打印 <code>error = 操作失败</code>。</p><p>我们来看看 <code>then</code> 的异步。<br>在 <code>Promise</code> 创建时，就会立即执行，而 <code>then</code> 会在当前脚本所有同步任务执行完才会执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">  resolve(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.then(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line"><span class="comment">// &#x27;1&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;3&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;2&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h2><h3 id="Promise-prototype-then"><a href="#Promise-prototype-then" class="headerlink" title="Promise.prototype.then()"></a>Promise.prototype.then()</h3><p><code>Promise.prototype.then()</code> 方法作用是为 <code>Promise</code> 实例添加状态改变时的回调函数。<br><code>then</code> 方法的第一个参数是 <code>resolved</code> 状态的回调函数，第二个参数是 <code>rejected</code> 状态的回调函数，它们都是可选的值，不一定必须传入。</p><p><code>then</code> 方法返回的是一个新的 <code>Promise</code> 实例，所以可以采用链式写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise</span><br><span class="line">  .then(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> val;</span><br><span class="line">  &#125;)</span><br><span class="line">  .then(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// &#x27;1&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Promise-prototype-catch"><a href="#Promise-prototype-catch" class="headerlink" title="Promise.prototype.catch()"></a>Promise.prototype.catch()</h3><p><code>Promise.prototype.catch()</code> 方法就是在 <code>then</code> 方法时 <code>reject</code> 的情况，用于发生错误时的回调函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  reject(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// &#x27;1&#x27;</span></span><br></pre></td></tr></table></figure><p>如果在 <code>Promise</code> 中报错，进行错误抛出，状态会变为 <code>rejected</code>，就会调用 <code>catch()</code> 方法指定的回调函数，然后在其中处理错误。</p><p>当然，如果在运行过程中，抛出错误，也会被 <code>catch</code> 捕获。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&#x27;Error&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise.catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// &#x27;Error&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="Promise-prototype-finally"><a href="#Promise-prototype-finally" class="headerlink" title="Promise.prototype.finally()"></a>Promise.prototype.finally()</h3><p><code>Promise.prototype.finally()</code> 方法不管 <code>Promise</code> 对象最后状态如何，都会进行执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise1.finally(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;执行finally&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行finally</span></span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  reject(<span class="string">&#x27;失败&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line">promise2.finally(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;执行finally&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 执行finally</span></span><br></pre></td></tr></table></figure><h2 id="Promise-类方法"><a href="#Promise-类方法" class="headerlink" title="Promise 类方法"></a>Promise 类方法</h2><h3 id="Promise-all"><a href="#Promise-all" class="headerlink" title="Promise.all()"></a>Promise.all()</h3><p><code>Promise.all()</code> 方法可以将多个 <code>Promise</code> 实例，包装成一个新的 <code>Promise</code> 实例。</p><ul><li>多个 <code>Promise</code> 中，其中一个状态不是 <code>fulfilled</code>，p 的结果就不会是 <code>fulfilled</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.all([promise1, promise2, promise3]);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;3&#x27;]</span></span><br></pre></td></tr></table></figure><ul><li>只要有一个状态变为 <code>rejected</code>，此时<strong>第一个</strong>被 <code>reject</code> 的实例的返回值，会被传递为 <code>promise</code> 的回调函数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 我们将上面的代码其中一个 resolve 修改为 reject(&#x27;1&#x27;)</span></span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  reject(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.all([promise1, promise2, promise3]);</span><br><span class="line"></span><br><span class="line">promise.then(</span><br><span class="line">  <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error); <span class="comment">// 3</span></span><br><span class="line">  &#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h3 id="Promise-race"><a href="#Promise-race" class="headerlink" title="Promise.race()"></a>Promise.race()</h3><p><code>Promise.race()</code> 方法同样是将多个实例包装为一个新的 <code>Promise</code> 实例。</p><ul><li>多个 <code>Promise</code> 时，哪一个率先改变状态，<code>promise</code> 的状态就跟着哪个改变。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    resolve(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">  &#125;, <span class="number">1000</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.race([promise1, promise2, promise3]);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>我们在第一个使用了 <code>setTimeout</code>，进行延迟，所以会是第二个的状态先改变，输出第二个的值。</p><h3 id="Promsie-allSettled"><a href="#Promsie-allSettled" class="headerlink" title="Promsie.allSettled()"></a>Promsie.allSettled()</h3><p><code>Promise.allSettled()</code> 方法，用来确定一组异步操作是否都结束了。<br>数组的每个成员都是一个 Promise 对象，并返回一个新的 <code>Promise</code> 对象，只有数组中的 <code>Promsie</code> 对象状态都发生改变时，返回的 <code>Promise</code> 对象才发生改变。<br>返回的值会接收到一个数组作为参数，该数组的每一个成员对应前面数组的每个 <code>Promise</code> 对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  reject(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  reject(<span class="string">&#x27;3&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.allSettled([promise1, promise2, promise3]);</span><br><span class="line">promise.then(</span><br><span class="line">  <span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;</span><br><span class="line">);</span><br><span class="line"><span class="comment">// [</span></span><br><span class="line"><span class="comment">//   &#123;</span></span><br><span class="line"><span class="comment">//     status: &#x27;rejected&#x27;,</span></span><br><span class="line"><span class="comment">//     reason: &#x27;1&#x27;,</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   &#123;</span></span><br><span class="line"><span class="comment">//     status: &#x27;fulfilled&#x27;,</span></span><br><span class="line"><span class="comment">//     value: &#x27;2&#x27;,</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">//   &#123;</span></span><br><span class="line"><span class="comment">//     status: &#x27;rejected&#x27;,</span></span><br><span class="line"><span class="comment">//     reason: &#x27;3&#x27;,</span></span><br><span class="line"><span class="comment">//   &#125;,</span></span><br><span class="line"><span class="comment">// ];</span></span><br></pre></td></tr></table></figure><p>数组成员对象的 <code>status</code> 属性的值只可能是 <code>fulfilled</code> 或 <code>rejected</code>，用来区别异步操作结果是成功(<code>fulfilled</code>)还是失败(<code>rejected</code>)。<br>如果是成功是会有 <code>value</code> 属性，记录成功值，如果失败，会有 <code>reason</code> 属性，记录失败原因。</p><h3 id="Promise-any"><a href="#Promise-any" class="headerlink" title="Promise.any()"></a>Promise.any()</h3><p><code>Promise.any()</code> 方法，将一组 <code>Promise</code> 实例作为参数，包装成一个新的 <code>Promise</code> 实例并返回。</p><ul><li>只要有一个变成 <code>fulfilled</code> 状态，新实例就会被包装成 <code>fulfilled</code> 状态</li><li>如果所有参数实例都变成 <code>rejected</code> 状态，包装实例就会变成 <code>rejected</code> 状态</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise1 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  reject(<span class="string">&#x27;1&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> promise2 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  resolve(<span class="string">&#x27;2&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">const</span> promise3 = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  reject(<span class="string">&#x27;error&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">Promise</span>.any([promise1, promise2, promise3])</span><br><span class="line">  .then(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 只要有一个成功</span></span><br><span class="line">    <span class="built_in">console</span>.log(val);</span><br><span class="line">  &#125;)</span><br><span class="line">  .catch(<span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">  &#125;);</span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><h3 id="Promise-resolve"><a href="#Promise-resolve" class="headerlink" title="Promise.resolve()"></a>Promise.resolve()</h3><p><code>Promise.resolve()</code> 方法有四种情况。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;请求成功&#x27;</span>);</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve(<span class="string">&#x27;请求成功&#x27;</span>));</span><br></pre></td></tr></table></figure><ul><li>参数为 <code>Promise</code> 时，不做任何修改，直接返回这个实例。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve</span>) =&gt;</span> resolve(<span class="string">&#x27;请求成功&#x27;</span>));</span><br><span class="line"><span class="keyword">const</span> promise1 = <span class="built_in">Promise</span>.resolve(promise);</span><br><span class="line">promise1.then(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>参数是 <code>thenable</code> 对象<br><code>thenable</code> 对象就是有 <code>then</code> 方法的对象。<br><code>Promise.resolve()</code> 方法会将 <code>thenable</code> 转为 <code>Promise</code> 对象，并立即执行其中的 <code>then</code> 方法。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> thenable = &#123;</span><br><span class="line">  <span class="attr">then</span>: <span class="function"><span class="keyword">function</span> (<span class="params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    resolve(<span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.resolve(thenable);</span><br><span class="line">promise.then(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 成功</span></span><br></pre></td></tr></table></figure><ul><li>参数无 <code>then</code> 的对象，或不是对象的参数<br><code>Promise.resolve()</code> 方法返回一个心的 Promise 对象，状态转为 <code>resolved</code>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.resolve(<span class="string">&#x27;成功&#x27;</span>);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 成功</span></span><br></pre></td></tr></table></figure><ul><li>不带参数<br><code>Promise.resolve()</code> 方法可以不传参数，直接返回一个 <code>resolved</code> 状态的 <code>Promise</code> 对象。<br>所以在希望得到一个 <code>Promise</code> 对象，直接调用比较该方法方便。</li></ul><p>注意，立即 <code>resolve()</code> 的 <code>Promise</code> 对象，是在本轮<a href="">事件循环（event loop）</a>的结束时执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.resolve();</span><br><span class="line"></span><br><span class="line">promise.then(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;不带参数&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 事件循环</span></span><br><span class="line"><span class="comment">// 不带参数</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">&#x27;事件循环&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="Promise-reject"><a href="#Promise-reject" class="headerlink" title="Promise.reject()"></a>Promise.reject()</h3><p><code>Promise.reject()</code> 方法返回一个新 <code>Promise</code> 实例，该实例状态为 <code>rejected</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> promise = <span class="built_in">Promise</span>.reject(<span class="string">&#x27;出错了的Promise&#x27;</span>);</span><br><span class="line"><span class="comment">// 同价</span></span><br><span class="line"><span class="keyword">const</span> promise = <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  reject(<span class="string">&#x27;出错了的Promise&#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">promise.then(<span class="literal">null</span>, <span class="function">(<span class="params">error</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 出错了的Promise</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES 6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES 6 系列之Set 和 Map</title>
      <link href="//Blog/e5a445b0.html"/>
      <url>//Blog/e5a445b0.html</url>
      
        <content type="html"><![CDATA[<h2 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h2><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><p><code>Set</code> 是 <code>ES 6</code> 提供的新的数据结构。类似于数组，但是都是唯一值，没有重复值。<br><code>Set</code> 就是一个构造函数，用来生成 <code>Set</code> 数据结构。<br><code>add()</code> 就是为 <code>Set</code> 添加成员，我们来试试。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line">set.add(<span class="number">1</span>);</span><br><span class="line">set.add(<span class="number">2</span>);</span><br><span class="line">set.add(<span class="number">3</span>);</span><br><span class="line">set.add(<span class="number">2</span>);</span><br><span class="line">set.add(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> s <span class="keyword">of</span> set) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(s);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1 2 3</span></span><br></pre></td></tr></table></figure><p>代码中可以看出 <code>Set</code> 的数据结构，是不会添加重复的值。</p><p><code>Set</code> 构造函数可以接受一个数组或者具有 iterable 接口的其他数据结构作为参数，用来初始化 <code>Set</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(set);</span><br><span class="line"><span class="comment">// [1, 2, 3]</span></span><br></pre></td></tr></table></figure><p>从这里，我们也可以看出，用于数组去重是一个很好的选择</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="keyword">const</span> arr1 = [...new <span class="built_in">Set</span>(arr)];</span><br><span class="line"><span class="built_in">console</span>.log(arr1);</span><br><span class="line"><span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="Set-实例属性和方法"><a href="#Set-实例属性和方法" class="headerlink" title="Set 实例属性和方法"></a>Set 实例属性和方法</h3><p><strong>实例属性</strong></p><ul><li><code>Set.prototype.constructor</code>: 构造函数，默认就是 <code>Set()</code>。</li><li><code>Set.prototype.size</code>: 返回 <code>Set</code> 成员总数。</li></ul><p><strong>实例方法</strong></p><ul><li><code>Set.prototype.add(value)</code>: 添加元素到 <code>Set</code>，返回 <code>Set</code> 本身。</li><li><code>Set.prototype.delete(value)</code>: 删除某个值，返回一个布尔值。</li><li><code>Set.prototype.has(value)</code>: 返回一个布尔值，表示该值是否为 <code>Set</code> 的值。</li><li><code>Set.prototype.clear()</code>: 清除所有值。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]);</span><br><span class="line"></span><br><span class="line">set.add(<span class="number">1</span>);</span><br><span class="line">set.add(<span class="number">5</span>);</span><br><span class="line">set.add(<span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(set.size); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="number">5</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="number">2</span>)); <span class="comment">// true</span></span><br><span class="line"></span><br><span class="line">set.delete(<span class="number">5</span>);</span><br><span class="line">set.delete(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="number">5</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(set.has(<span class="number">4</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="遍历操作"><a href="#遍历操作" class="headerlink" title="遍历操作"></a>遍历操作</h3><p>四个遍历方法。</p><ul><li><code>Set.prototype.keys()</code>: 返回 <code>key</code> 的遍历器</li><li><code>Set.prototype.values()</code>: 返回 <code>value</code> 的遍历器</li><li><code>Set.prototype.entries()</code>: 返回 <code>key: values</code> 的遍历器</li><li><code>Set.prototype.forEach()</code>: 回调函数遍历，类似数组的 <code>forEach</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">&#x27;key1&#x27;</span>, <span class="string">&#x27;key2&#x27;</span>, <span class="string">&#x27;key3&#x27;</span>]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> set.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// key1</span></span><br><span class="line"><span class="comment">// key2</span></span><br><span class="line"><span class="comment">// key3</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> set.values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// key1</span></span><br><span class="line"><span class="comment">// key2</span></span><br><span class="line"><span class="comment">// key3</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [k, v] <span class="keyword">of</span> set.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(k, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// key1 key1</span></span><br><span class="line"><span class="comment">// key2 key2</span></span><br><span class="line"><span class="comment">// key3 key3</span></span><br><span class="line"></span><br><span class="line">set.forEach(<span class="function">(<span class="params">val, key</span>) =&gt;</span> <span class="built_in">console</span>.log(key, val));</span><br><span class="line"><span class="comment">// key1 key1</span></span><br><span class="line"><span class="comment">// key2 key2</span></span><br><span class="line"><span class="comment">// key3 key3</span></span><br></pre></td></tr></table></figure><p>由遍历，我们可以看出，<code>key</code> 与 <code>value</code> 的值是相同的。</p><h2 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h2><h3 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h3><p><code>ES 6</code> 提供了 <code>Map</code> 数据结构。类似于对象，也是键值对的集合，但是 <code>key</code> 不限制于字符串，其他类型的值均可以作为 <code>key</code>。 简单来说 <code>Map</code> 结构提供了 <code>val - val</code>，而对象必须是 <strong>字符串 - val</strong>。</p><p><code>map</code> 的简单用法。也看看将对象作为 <code>key</code> 的时候。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">map.set(obj, <span class="string">&#x27;object&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map.get(obj)); <span class="comment">// &#x27;object&#x27;</span></span><br><span class="line">map.set(<span class="string">&#x27;string&#x27;</span>, <span class="string">&#x27;hello hzzzzzzzq&#x27;</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">&#x27;string&#x27;</span>)); <span class="comment">// &#x27;hello hzzzzzzzq&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(map.has(obj)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(map.has(<span class="string">&#x27;string&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(map.delete(<span class="string">&#x27;string&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(map.has(<span class="string">&#x27;string&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>上面我们就可以看出，我们将对象 <code>obj</code> 作为一个<code>Map</code> 的键传入，使用 <code>get</code> 获取值，<code>delete</code> 删除，<code>has</code> 作为判断是否有这个值。</p><p>我们在来看看，<code>Map</code> 作为构造函数，怎么添加成员。<br>其实在<a href="https://hzzzzzzzq.github.io/Blog/c36ebee2.html">对象的扩展</a>中，我们已经提到过了。</p><ul><li>接受数组作为参数，而数组的成员是一个个表示键值对的数组。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([</span><br><span class="line">  [<span class="string">&#x27;x&#x27;</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="string">&#x27;y&#x27;</span>, <span class="number">2</span>],</span><br><span class="line">]);</span><br><span class="line"><span class="built_in">console</span>.log(map.size); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(map.has(<span class="string">&#x27;x&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">&#x27;x&#x27;</span>)); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(map.has(<span class="string">&#x27;y&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">&#x27;y&#x27;</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>任何具有 <code>Iterator</code> 接口，且每个成员都是一个双元素的数组的结构都可以当作 <code>Map</code> 的参数。<code>Set</code> 和 <code>Map</code> 自身也可以作为参数。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>([[<span class="string">&#x27;x&#x27;</span>, <span class="number">1</span>]]);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map1 = <span class="keyword">new</span> <span class="built_in">Map</span>(set);</span><br><span class="line"><span class="built_in">console</span>.log(map1.get(<span class="string">&#x27;x&#x27;</span>)); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map2 = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map2.set(<span class="string">&#x27;y&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> map3 = <span class="keyword">new</span> <span class="built_in">Map</span>(map2);</span><br><span class="line"><span class="built_in">console</span>.log(map3.get(<span class="string">&#x27;y&#x27;</span>)); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>Map 与 Set 类似，如果有重复 <code>key</code> 时，后面的 <code>val</code> 会覆盖前面的 <code>val</code>，也就是说，<code>map</code> 也是唯一的。</li><li>Map 中若是没有找到这个 <code>key</code>，则返回 <code>undefined</code>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">&#x27;x&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">map.set(<span class="string">&#x27;x&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">&#x27;x&#x27;</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">&#x27;y&#x27;</span>)); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="Map-属性和操作"><a href="#Map-属性和操作" class="headerlink" title="Map 属性和操作"></a>Map 属性和操作</h3><ul><li>size<br><code>size</code> 返回 <code>Map</code> 的成员数量。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">&#x27;x&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map.size); <span class="comment">// 1</span></span><br><span class="line">map.set(<span class="string">&#x27;y&#x27;</span>, <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map.size); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>Map.prototype.set(key, val)<br><code>set(key, val)</code> 方法就是为 Map 添加新的值了。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">map.set(<span class="string">&#x27;x&#x27;</span>, <span class="number">1</span>); <span class="comment">// 键是字符串</span></span><br><span class="line">map.set(<span class="number">1</span>, <span class="number">2</span>); <span class="comment">// 键是数值</span></span><br><span class="line">map.set(<span class="literal">undefined</span>, <span class="number">3</span>); <span class="comment">// 键是 undefined</span></span><br><span class="line">map.set(<span class="literal">null</span>, <span class="number">4</span>); <span class="comment">// 键时 null</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">&#x27;x&#x27;</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="number">1</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="literal">undefined</span>)); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="literal">null</span>)); <span class="comment">// 4</span></span><br></pre></td></tr></table></figure><ul><li>Map.prototype.get(key)<br><code>get(key)</code> 方法获取 <code>key</code> 对应的 <code>val</code>，找不到则返回 undefined。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line"></span><br><span class="line">map.set(<span class="string">&#x27;x&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">&#x27;x&#x27;</span>)); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">&#x27;y&#x27;</span>)); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><ul><li>Map.prototype.has(key);<br><code>has(key)</code> 方法判断键名 <code>key</code> 是否在 <code>Map</code> 对象中。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">&#x27;x&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(map.has(<span class="string">&#x27;x&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(map.has(<span class="string">&#x27;y&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>Map.prototype.delete(key)<br><code>delete(key)</code> 方法删除某个键，返回一个布尔值，成功为 <code>true</code>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">&#x27;x&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(map.delete(<span class="string">&#x27;x&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(map.delete(<span class="string">&#x27;y&#x27;</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li>Map.prototype.clear();<br><code>clear()</code> 就是清除 Map 对象的所有成员。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">&#x27;x&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">map.set(<span class="string">&#x27;y&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">map.clear();</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">&#x27;x&#x27;</span>)); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(map.get(<span class="string">&#x27;y&#x27;</span>)); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><p>与 <code>Set</code> 类似。</p><ul><li>Map.prototype.keys()： 返回 <code>Map</code> 对象的所有 <code>key</code>。</li><li>Map.prototype.values()：返回 <code>Map</code> 对象的所有 <code>val</code>。</li><li>Map.prototype.entries()：返回 <code>Map</code> 对象的所有成员的遍历器。</li><li>Map.prototype.forEach()：遍历 <code>Map</code> 的所有成员。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">&#x27;x&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">map.set(<span class="string">&#x27;y&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">map.set(<span class="string">&#x27;z&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> map.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#x27;x&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;y&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;z&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> map.values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br><span class="line"><span class="comment">// 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [k, v] <span class="keyword">of</span> map.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(k, v);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#x27;x&#x27; 1</span></span><br><span class="line"><span class="comment">// &#x27;y&#x27; 2</span></span><br><span class="line"><span class="comment">// &#x27;z&#x27; 3</span></span><br><span class="line"></span><br><span class="line">map.forEach(<span class="function">(<span class="params">val, key</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, val);</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// &#x27;x&#x27; 1</span></span><br><span class="line"><span class="comment">// &#x27;y&#x27; 2</span></span><br><span class="line"><span class="comment">// &#x27;z&#x27; 3</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES 6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES 6 系列之对象的扩展</title>
      <link href="//Blog/c36ebee2.html"/>
      <url>//Blog/c36ebee2.html</url>
      
        <content type="html"><![CDATA[<h2 id="属性的简单表示"><a href="#属性的简单表示" class="headerlink" title="属性的简单表示"></a>属性的简单表示</h2><p><code>ES 6</code> 允许将属性写在 <code>&#123;&#125;</code> 中，直接写入变量和函数，作为对象的属性和方法。这样的书写方式更加简洁。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> foo = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getName</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> obj = &#123; foo, getName &#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; foo: &#x27;foo&#x27;, getName: ƒunction &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// ES 6</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123;</span><br><span class="line">  <span class="attr">foo</span>: <span class="string">&#x27;foo&#x27;</span>,</span><br><span class="line">  <span class="attr">getName</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">&#x27;name&#x27;</span>);</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; foo: &#x27;foo&#x27;, getName: function &#125;</span></span><br></pre></td></tr></table></figure><h2 id="属性的可枚举性和遍历"><a href="#属性的可枚举性和遍历" class="headerlink" title="属性的可枚举性和遍历"></a>属性的可枚举性和遍历</h2><h3 id="可枚举性"><a href="#可枚举性" class="headerlink" title="可枚举性"></a>可枚举性</h3><p>对象的每个属性都有一个描述对象，用来控制该属性的行为。<br><code>Object.getOwnPropertyDescriptor</code> 方法来获取该属性的描述对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertyDescriptor(obj));</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//   &quot;value&quot;: 1,</span></span><br><span class="line"><span class="comment">//   &quot;writable&quot;: true,</span></span><br><span class="line"><span class="comment">//   &quot;enumerable&quot;: true,</span></span><br><span class="line"><span class="comment">//   &quot;configurable&quot;: true</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><p>描述对象的 <code>enumerable</code> 属性，称为<strong>可枚举性</strong>，如果该属性为 <code>false</code>，就会被某些操作忽略。</p><p>操作会忽略 <code>enumerable</code> 为 <code>false</code> 的属性。</p><ul><li><code>for...in</code> 循环：遍历对象自身和继承的可枚举属性。</li><li><code>Object.keys()</code>：返回对象所有可枚举的属性的 <code>key</code>。</li><li><code>JSON.stringify()</code>：只串行化对象自身的可枚举的属性。</li><li><code>Object.assign()</code>：只拷贝对象自身的可枚举属性。</li></ul><h3 id="属性遍历"><a href="#属性遍历" class="headerlink" title="属性遍历"></a>属性遍历</h3><ul><li><strong>for…in</strong><br><code>for...in</code> 循环对象自身的和继续的可枚举属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> o <span class="keyword">in</span> obj) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// x</span></span><br><span class="line"><span class="comment">// y</span></span><br><span class="line"><span class="comment">// z</span></span><br></pre></td></tr></table></figure><ul><li><strong>Object.keys(obj)</strong><br><code>Object.keys(obj)</code> 返回一个数组，包含所有可枚举属性的 <code>key</code>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> o <span class="keyword">of</span> <span class="built_in">Object</span>.keys(obj)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// x</span></span><br><span class="line"><span class="comment">// y</span></span><br><span class="line"><span class="comment">// z</span></span><br></pre></td></tr></table></figure><ul><li><strong>Object.getOwnPropertyNames(obj)</strong><br><code>Object.getOwnPropertyNames(obj)</code> 返回一个数组，包含对象自身的所有属性的 <code>key</code>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> o <span class="keyword">of</span> <span class="built_in">Object</span>.getOwnPropertyNames(obj)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(o);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// x</span></span><br><span class="line"><span class="comment">// y</span></span><br><span class="line"><span class="comment">// z</span></span><br></pre></td></tr></table></figure><ul><li><strong>Object.getOwnPropertySymbols(obj)</strong><br><code>Object.getOwnPropertySymbols(obj)</code> 返回一个数组，包含对象自身的所有 <code>Symbol</code> 属性的 <code>key</code>。<br>打印的属性均为 <code>Symbol</code>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; [<span class="built_in">Symbol</span>(<span class="string">&#x27;x&#x27;</span>)]: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.getOwnPropertySymbols(obj));</span><br><span class="line"><span class="comment">// [Symbol(x)]</span></span><br></pre></td></tr></table></figure><ul><li><strong>Reflect.ownKeys(obj)</strong><br><code>Reflect.ownKeys(obj)</code> 返回一个数组，包含对象自身所有键名，不管键名是 <code>Symbol</code> 或字符串，也不管是否可枚举。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; [<span class="built_in">Symbol</span>(<span class="string">&#x27;x&#x27;</span>)]: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span>, <span class="number">1</span>: <span class="number">10</span>, <span class="number">2</span>: <span class="number">11</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Reflect</span>.ownKeys(obj));</span><br><span class="line"><span class="comment">// [&#x27;1&#x27;, &#x27;2&#x27;, &#x27;y&#x27;, &#x27;z&#x27;, Symbol(x)]</span></span><br></pre></td></tr></table></figure><p>一共五种遍历 <code>key</code> 的方式，但是遍历的次序是有规则的。</p><blockquote><ul><li>首先遍历所有数值，并按照升序排列</li><li>其次遍历字符串，按照加入时间升序</li><li>最后才是 <code>Symbol</code>，按照加入时间升序</li></ul></blockquote><h2 id="对象的扩展运算符"><a href="#对象的扩展运算符" class="headerlink" title="对象的扩展运算符"></a>对象的扩展运算符</h2><p>在 <a href="https://hzzzzzzzq.github.io/Blog/1c84e2dc.html">解构赋值</a> 和 <a href="https://hzzzzzzzq.github.io/Blog/15284f3d.html">数组的扩展</a> 中，我们分别提到过对象的解构赋值以及扩展运算符。</p><p>我们来看看扩展运算符在对象中的使用。</p><h3 id="解构赋值"><a href="#解构赋值" class="headerlink" title="解构赋值"></a>解构赋值</h3><p>我们来回顾一下 <a href="https://hzzzzzzzq.github.io/Blog/1c84e2dc.html">解构赋值</a> 。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; x, y &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(y); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li>使用扩展运算符时需要注意的是，解构赋值必须是最后一个参数且只能有一个，否则报错。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; x, ...obj &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(x); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; y: 1, z: 2 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> &#123; ...obj, z &#125; = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><ul><li>对象的解构赋值右侧不能是 <code>undefined</code> 或 <code>null</code>，会报错</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; ...obj &#125; = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">const</span> &#123; ...obj &#125; = <span class="literal">undefined</span>;</span><br><span class="line"><span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><h3 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h3><p>对象的扩展运算符用于取出参数对象的所有可便利属性，拷贝到当前对象之中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; ...obj &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; x: 1, y: 2 &#125;</span></span><br></pre></td></tr></table></figure><ul><li>数组也是特殊的对象，所以对象的扩展运算符也可以用于数组。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; ...[<span class="string">&#x27;1&#x27;</span>, <span class="string">&#x27;2&#x27;</span>, <span class="string">&#x27;3&#x27;</span>] &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"><span class="comment">// &#123; 0: &#x27;1&#x27;, 1: &#x27;2&#x27;, 2: &#x27;3&#x27; &#125;</span></span><br></pre></td></tr></table></figure><ul><li>如果是空对象，则没有任何效果。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; ...&#123;&#125;, <span class="attr">x</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; x: 1 &#125;</span></span><br></pre></td></tr></table></figure><ul><li>如果扩展运算符并不是对象，则会被自动转化成对象，但是部分值没有自身属性，所以会返回一个空对象 <code>&#123;&#125;</code>。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; ..<span class="number">.1</span> &#125;; <span class="comment">// 等同于 &#123; ...Object(1) &#125;</span></span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; ...true &#125;; <span class="comment">// &#123; ...Object(true) &#125;</span></span><br><span class="line"><span class="keyword">const</span> obj3 = &#123; ...undefined &#125;; <span class="comment">// &#123; ...Object(undefined) &#125;</span></span><br><span class="line"><span class="keyword">const</span> obj4 = &#123; ...null &#125;; <span class="comment">// &#123; ...Object(null) &#125;</span></span><br></pre></td></tr></table></figure><ul><li>如果后面跟着字符串，则会自动转成类数组对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; ...<span class="string">&#x27;hzq&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj); <span class="comment">// &#123; 0: &#x27;h&#x27;, 1: &#x27;z&#x27;, 2: &#x27;q&#x27; &#125;</span></span><br></pre></td></tr></table></figure><h2 id="对象新增的常用实例方法"><a href="#对象新增的常用实例方法" class="headerlink" title="对象新增的常用实例方法"></a>对象新增的常用实例方法</h2><h2 id="Object-is"><a href="#Object-is" class="headerlink" title="Object.is()"></a>Object.is()</h2><p><code>Object.is()</code> 是用来判断两个是否严格相等，与严格比较运算符 <code>===</code> 行为基本一致。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;world&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="string">&#x27;hello&#x27;</span>, <span class="string">&#x27;hello&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(&#123;&#125;, &#123;&#125;)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h4 id="与-不同点"><a href="#与-不同点" class="headerlink" title="与 === 不同点"></a>与 <code>===</code> 不同点</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(+<span class="number">0</span> === -<span class="number">0</span>); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>); <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(+<span class="number">0</span>, -<span class="number">0</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h2 id="Object-assign"><a href="#Object-assign" class="headerlink" title="Object.assign()"></a>Object.assign()</h2><p><code>Object.assign()</code> 放啊主要用于对象的合并，<strong>将对象的所有可枚举属性复制到目标对象</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line"><span class="keyword">const</span> obj1 = &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; <span class="attr">y</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(obj, obj1, obj2);</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"><span class="comment">// &#123; x: 1, y: 2 &#125;</span></span><br></pre></td></tr></table></figure><p>从上面我们可以看出，第一个参数就是<strong>目标对象</strong>，将后面对象的所有<strong>可枚举属性</strong>复制到第一个参数。</p><ul><li>如果后面参数中，有同名属性，则目标对象中的值，会被新的对象替代</li><li>如果只有一个参数，则直接返回该参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">x</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> obj1 = &#123; <span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> obj2 = &#123; <span class="attr">y</span>: <span class="number">4</span> &#125;;</span><br><span class="line"><span class="built_in">Object</span>.assign(obj, obj1, obj2);</span><br><span class="line"><span class="built_in">console</span>.log(obj);</span><br><span class="line"><span class="comment">// &#123; x: 3, y: 4 &#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> obj3 = &#123; <span class="attr">x</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.assign(obj3) === obj3);</span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><ul><li>如果参数不是对象，会被转成对象，然后返回</li><li><code>undefined</code> 和 <code>null</code> 无法转成对象，会报错</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.assign(<span class="number">1</span>));</span><br><span class="line"><span class="comment">// Number &#123;1&#125;</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> <span class="built_in">Object</span>.assign(<span class="number">1</span>));</span><br><span class="line"><span class="comment">// object</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.assign(<span class="literal">undefined</span>)); <span class="comment">// 报错</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.assign(<span class="literal">null</span>)); <span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><h2 id="Object-keys-，Object-values-，Object-entries"><a href="#Object-keys-，Object-values-，Object-entries" class="headerlink" title="Object.keys()，Object.values()，Object.entries()"></a>Object.keys()，Object.values()，Object.entries()</h2><h3 id="Object-keys"><a href="#Object-keys" class="headerlink" title="Object.keys()"></a>Object.keys()</h3><p><code>Obejct.keys()</code> 是 <code>ES 5</code> 引入的，我们还是在这里稍微提一下。<strong>Object.keys()返回对象键值的数组，然后用来遍历对象的 key。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> <span class="built_in">Object</span>.keys(obj)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// x</span></span><br><span class="line"><span class="comment">// y</span></span><br><span class="line"><span class="comment">// z</span></span><br></pre></td></tr></table></figure><h3 id="Object-values"><a href="#Object-values" class="headerlink" title="Object.values()"></a>Object.values()</h3><p><code>Object.values()</code> 是 <code>ES 6</code> 时引入的，返回一个数组，是每个键对应的值。返回值的顺序可以参照，对象的可枚举性中顺序。</p><p>当然许多特性是类似的。</p><ul><li>返回的是可遍历的值，<code>enumerable</code> 为 <code>true</code></li><li>如果转化的值不是对象，则会先转化为对象。<ul><li>字符串会被转为数组输出，</li><li>布尔值、数值都不会为实例添加非继承的属性，返回空数组</li><li><code>Symbol</code> 作为 <code>key</code> 会被忽略</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> objVal = &#123; <span class="number">1</span>: <span class="string">&#x27;a&#x27;</span>, <span class="number">2</span>: <span class="string">&#x27;b&#x27;</span>, <span class="number">7</span>: <span class="string">&#x27;c&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(objVal));</span><br><span class="line"><span class="comment">// [&quot;b&quot;, &quot;c&quot;, &quot;a&quot;]</span></span><br><span class="line"><span class="keyword">const</span> obj = &#123; [<span class="built_in">Symbol</span>()]: <span class="number">1</span>, <span class="attr">x</span>: <span class="number">2</span>, <span class="attr">y</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(obj));</span><br><span class="line"><span class="comment">// [2, 3];</span></span><br><span class="line"><span class="keyword">const</span> str = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(str));</span><br><span class="line"><span class="comment">// [&#x27;h&#x27;, &#x27;e&#x27;, &#x27;l&#x27;, &#x27;l&#x27;, &#x27;o&#x27;];</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(<span class="literal">true</span>));</span><br><span class="line"><span class="comment">// []</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.values(<span class="number">11</span>));</span><br><span class="line"><span class="comment">// []</span></span><br></pre></td></tr></table></figure><h3 id="Object-entries"><a href="#Object-entries" class="headerlink" title="Object.entries()"></a>Object.entries()</h3><p><code>Object.entries()</code> 方法返回一个数组，成员是参数对象自身的所有可遍历属性的键值对数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span>, <span class="attr">z</span>: <span class="number">3</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(obj));</span><br><span class="line"><span class="comment">// [[&quot;x&quot;, 1], [&quot;y&quot;, 2], [&quot;z&quot;, 3]]</span></span><br></pre></td></tr></table></figure><ul><li>对象的属性名是一个 <code>Symbol</code> 值，该属性会被忽略。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; [<span class="built_in">Symbol</span>()]: <span class="number">1</span>, <span class="attr">x</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.entries(obj));</span><br><span class="line"><span class="comment">// [[&#x27;x&#x27;, 2]]</span></span><br></pre></td></tr></table></figure><h4 id="两个用途"><a href="#两个用途" class="headerlink" title="两个用途"></a>两个用途</h4><ul><li>遍历对象的属性</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [k, v] <span class="keyword">of</span> <span class="built_in">Object</span>.entries(obj)) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`key = <span class="subst">$&#123;k&#125;</span>, val = <span class="subst">$&#123;v&#125;</span>`</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// key = x, val = 1</span></span><br><span class="line"><span class="comment">// key = y, val = 2</span></span><br></pre></td></tr></table></figure><ul><li>将对象转为真正的 <a href="https://hzzzzzzzq.github.io/Blog/e5a445b0.html">Map 结构</a></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123; <span class="attr">x</span>: <span class="number">1</span>, <span class="attr">y</span>: <span class="number">2</span> &#125;;</span><br><span class="line"><span class="keyword">const</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>(<span class="built_in">Object</span>.entries(obj));</span><br><span class="line"><span class="built_in">console</span>.log(map);</span><br><span class="line"><span class="comment">// Map &#123; x: 1, y: 2 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="Object-fromEntries"><a href="#Object-fromEntries" class="headerlink" title="Object.fromEntries()"></a>Object.fromEntries()</h2><p><code>Object.fromEntries()</code> 是 <code>Object.entries()</code> 的逆向操作，<strong>用于将一个键值对数组转为对象</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [</span><br><span class="line">  [<span class="string">&#x27;x&#x27;</span>, <span class="number">1</span>],</span><br><span class="line">  [<span class="string">&#x27;y&#x27;</span>, <span class="number">2</span>],</span><br><span class="line">  [<span class="string">&#x27;z&#x27;</span>, <span class="number">3</span>],</span><br><span class="line">];</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.fromEntries(arr));</span><br><span class="line"><span class="comment">// &#123; x: 1, y: 2, z: 3 &#125;</span></span><br></pre></td></tr></table></figure><h3 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h3><p>主要作用就是，是将键值对的数据结构还原为对象</p><ul><li>将 <a href="https://hzzzzzzzq.github.io/Blog/e5a445b0.html"><code>Map</code> 结构</a>转为对象</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</span><br><span class="line">map.set(<span class="string">&#x27;x&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">map.set(<span class="string">&#x27;y&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">map.set(<span class="string">&#x27;z&#x27;</span>, <span class="number">3</span>);</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.fromEntries(map));</span><br><span class="line"><span class="comment">// &#123; x: 1, y: 2, z: 3 &#125;</span></span><br></pre></td></tr></table></figure><p>对象的扩展，我们就先介绍到这里，如果有问题，会对文章进行更新。</p><p><strong>感谢各位的观看!</strong></p>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES 6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES 6 系列之数组的扩展</title>
      <link href="//Blog/15284f3d.html"/>
      <url>//Blog/15284f3d.html</url>
      
        <content type="html"><![CDATA[<h2 id="扩展运算符"><a href="#扩展运算符" class="headerlink" title="扩展运算符"></a>扩展运算符</h2><p>基本使用，扩展运算符是什么，其实就是三个点( <code>...</code> )，在<a href="https://hzzzzzzzq.github.io/Blog/1c84e2dc.html">2. 变量的解构赋值 - 数组</a> 和 <a href="https://hzzzzzzzq.github.io/Blog/eaf27707.html">4. 函数的扩展 - rest 参数</a>中，接触过。</p><p>其实就是讲一个数组转为用逗号分隔的参数序列。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(...arr); <span class="comment">// 1 2 3 4 5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(...str); <span class="comment">// H e l l o</span></span><br></pre></td></tr></table></figure><p>从上面的代码中，我们能够看出，其实扩展运算符就是拆解数组、字符串等类似结构。</p><p>当然，在这里需要注意的是只能拆一层的内容，<strong>如果数组中有对象，或者嵌套了一个数组是不可拆的</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(...arr); <span class="comment">// 1 2 &#123; a: 1 &#125; 4</span></span><br></pre></td></tr></table></figure><p>在<strong>对象中使用大多用来拷贝一个对象，并进行部分修改</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">  <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">b</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">c</span>: &#123;</span><br><span class="line">    <span class="attr">x</span>: <span class="number">3</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 下面的 a: 4,就是对a的值进行修改。</span></span><br><span class="line"><span class="keyword">let</span> obj2 = &#123; ...obj, <span class="attr">a</span>: <span class="number">4</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(obj2);</span><br><span class="line"><span class="comment">// a: 4</span></span><br><span class="line"><span class="comment">// b: 2</span></span><br><span class="line"><span class="comment">// c: &#123; x: 3 &#125;</span></span><br></pre></td></tr></table></figure><h2 id="数组新增的方法"><a href="#数组新增的方法" class="headerlink" title="数组新增的方法"></a>数组新增的方法</h2><h3 id="Array-form"><a href="#Array-form" class="headerlink" title="Array.form()"></a>Array.form()</h3><p>该方法用于将<strong>类似数组的对象</strong>和<strong>可遍历的对象</strong>转为真正的数组</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrayLike = &#123;</span><br><span class="line">  <span class="number">0</span>: <span class="string">&#x27;x&#x27;</span>,</span><br><span class="line">  <span class="number">1</span>: <span class="string">&#x27;y&#x27;</span>,</span><br><span class="line">  <span class="number">2</span>: <span class="string">&#x27;z&#x27;</span>,</span><br><span class="line">  <span class="attr">length</span>: <span class="number">3</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(arrayLike);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [&#x27;x&#x27;, &#x27;y&#x27;, &#x27;z&#x27;]</span></span><br></pre></td></tr></table></figure><h3 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h3><p>该方法用于<strong>将一组值转化成数组</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = <span class="built_in">Array</span>.of(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><h3 id="新增的实例方法"><a href="#新增的实例方法" class="headerlink" title="新增的实例方法"></a>新增的实例方法</h3><h4 id="find-和-findIndex"><a href="#find-和-findIndex" class="headerlink" title="find() 和 findIndex()"></a>find() 和 findIndex()</h4><ul><li><strong>find()</strong></li></ul><p><code>find()</code> 方法，简单来说就是<strong>在数组中找出想要的那个值</strong>。</p><p>可以传入三个参数，第一个参数表示，当前值；第二个参数表示，当前值所在数组中的位置；第三个参数表示，原数组。当然，<code>find()</code> 顾名思义，就是查询，会找出第一个返回 <code>true</code> 的成员。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">const</span> value = arr.find(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> val &gt; <span class="number">7</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(value); <span class="comment">// 9</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 来看看有两个相同值时，返回的是哪个值？</span></span><br><span class="line"><span class="keyword">const</span> value2 = arr.find(<span class="function">(<span class="params">val</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> val &gt; <span class="number">6</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(value2); <span class="comment">// 7</span></span><br></pre></td></tr></table></figure><p><code>find()</code> 方法中，可以传递第二个参数，用来绑定 <code>this</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> age = &#123;</span><br><span class="line">  <span class="attr">first</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">second</span>: <span class="number">20</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> ages = [<span class="number">11</span>, <span class="number">20</span>, <span class="number">22</span>];</span><br><span class="line"><span class="keyword">const</span> value = ages.find(<span class="function"><span class="keyword">function</span> (<span class="params">val</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> val &gt; <span class="built_in">this</span>.first;</span><br><span class="line">&#125;, age);</span><br><span class="line"><span class="built_in">console</span>.log(value); <span class="comment">// 11</span></span><br></pre></td></tr></table></figure><p>在上面通过参数二传入一个对象，来绑定 <code>this</code>。当然这里可以会有疑问，为什么不用箭头函数了？ 这里具体可以去看看 <a href="https://hzzzzzzzq.github.io/Blog/ea626e9c.html">普通函数与箭头函数的 <code>this</code> 指向问题</a>。</p><ul><li><strong>findIndex()</strong></li></ul><p><code>findIndex()</code> 方法与 <code>find()</code> 方法非常接近，**返回第一个符合条件的成员的位置(也就是数组的下标)，如果找不到，则返回 <code>-1</code>**。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>];</span><br><span class="line"><span class="keyword">const</span> index = arr.findIndex(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">7</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(index); <span class="comment">// 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 来看看两个符合条件值时，返回是第几个的位置？</span></span><br><span class="line"><span class="keyword">const</span> index2 = arr.findIndex(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> value &gt; <span class="number">6</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="built_in">console</span>.log(index2); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p><code>findIndex()</code> 方法是可以通过 <code>Objecy.is(NaN)</code> 来识别出 <code>NaN</code> 的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log([<span class="literal">NaN</span>].findIndex(<span class="function">(<span class="params">val</span>) =&gt;</span> <span class="built_in">Object</span>.is(<span class="literal">NaN</span>, val)));</span><br><span class="line"><span class="comment">// 0</span></span><br></pre></td></tr></table></figure><h4 id="fill"><a href="#fill" class="headerlink" title="fill()"></a>fill()</h4><p><code>fill</code> 方法使用给定值，<strong>填充一个数组</strong>。</p><p>参数可传一共三个</p><ul><li>第一个参数 - 被填充的值。</li><li>第二个、第三个参数 - 用于填充的起始位置和结束位置</li></ul><p>后两个参数可以不传，视为所有元素都是被填充元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.fill(<span class="number">3</span>)); <span class="comment">// [3, 3, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.fill(<span class="number">5</span>, <span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// [1, 5, 3]</span></span><br></pre></td></tr></table></figure><h4 id="keys-、values-和-entries"><a href="#keys-、values-和-entries" class="headerlink" title="keys()、values() 和 entries()"></a>keys()、values() 和 entries()</h4><p>ES6 提供的新的方法 <strong>用来遍历数组</strong> 。返回的都是一个<strong>遍历器对象</strong>，可以用 <code>for...of</code> 循环进行遍历。</p><ul><li><strong>keys()</strong></li></ul><p><code>keys()</code> 实例方法，就是为了<strong>遍历数组的 key</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">of</span> arr.keys()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 2</span></span><br></pre></td></tr></table></figure><ul><li><strong>values()</strong></li></ul><p><code>values()</code> 实例方法，是为了<strong>遍历数组的值</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> val <span class="keyword">of</span> arr.values()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(val);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#x27;x&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;y&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;z&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 相当于普通的循环遍历</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(arr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// &#x27;x&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;y&#x27;</span></span><br><span class="line"><span class="comment">// &#x27;z&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><strong>entries()</strong></li></ul><p><code>entries()</code> 实例方法，<strong>是对键值对的遍历</strong>。 在这里还用到了<a href="https://hzzzzzzzq.github.io/Blog/1c84e2dc.html">数组的解构赋值</a>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> [key, value] <span class="keyword">of</span> arr.entries()) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(key, value);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 0 &#x27;x&#x27;</span></span><br><span class="line"><span class="comment">// 1 &#x27;y&#x27;</span></span><br><span class="line"><span class="comment">// 2 &#x27;z&#x27;</span></span><br></pre></td></tr></table></figure><p>上面代码中的 <code>[key, value]</code>，其实就是遍历 <code>arr.entries()</code> ，并对其中一个值进行<a href="https://hzzzzzzzq.github.io/Blog/1c84e2dc.html">解构赋值</a>。</p><p>可以来看看不使用 <code>for...of</code> 的写法，需要自己<strong>手动调用遍历器对象的 <code>next</code> 方法，然后<code>.value</code> 去取到相应值</strong>，为了方便这里就写在一起了</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>];</span><br><span class="line"><span class="comment">// keys()</span></span><br><span class="line"><span class="keyword">let</span> keys = arr.keys();</span><br><span class="line"><span class="built_in">console</span>.log(keys.next().value); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(keys.next().value); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(keys.next().value); <span class="comment">// 2</span></span><br><span class="line"><span class="comment">// values()</span></span><br><span class="line"><span class="keyword">let</span> values = arr.values();</span><br><span class="line"><span class="built_in">console</span>.log(values.next().value); <span class="comment">// &#x27;x&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(values.next().value); <span class="comment">// &#x27;y&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(values.next().value); <span class="comment">// &#x27;z&#x27;</span></span><br><span class="line"><span class="comment">// entries()</span></span><br><span class="line"><span class="keyword">let</span> entries = arr.entries();</span><br><span class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [0, &#x27;x&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [1, &#x27;y&#x27;]</span></span><br><span class="line"><span class="built_in">console</span>.log(entries.next().value); <span class="comment">// [2, &#x27;z&#x27;]</span></span><br></pre></td></tr></table></figure><h4 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h4><p><code>includes()</code> 实例方法，就是用来做一个判断，表示<strong>某个数组是否包含给定过的值</strong>，与字符串的 <code>includes</code> 方法类似。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="literal">undefined</span>, <span class="literal">NaN</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="string">&#x27;x&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="string">&#x27;1&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="literal">undefined</span>)); <span class="comment">//true</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="literal">NaN</span>)); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><p><code>includes()</code> 方法的第二个参数表示<strong>搜索的起始位置</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&#x27;x&#x27;</span>, <span class="string">&#x27;y&#x27;</span>, <span class="string">&#x27;z&#x27;</span>, <span class="literal">undefined</span>, <span class="literal">NaN</span>];</span><br><span class="line"><span class="built_in">console</span>.log(arr.includes(<span class="string">&#x27;x&#x27;</span>, <span class="number">1</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><p>上面的例子表示，检索数组从下标 <code>1</code> 开始检索，所以第一个参数 <code>&#39;x&#39;</code>，就检索不到啦。</p><h4 id="flat-flatMap"><a href="#flat-flatMap" class="headerlink" title="flat(),flatMap()"></a>flat(),flatMap()</h4><ul><li><strong>flat()</strong></li></ul><p><code>flat()</code> 就是简单来说就是 <strong>数组的扁平化</strong>，如果数组内嵌套数组，那就可以将其转为单层数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(arr.flat()); <span class="comment">// [1, 2, 3, 4]</span></span><br></pre></td></tr></table></figure><p>当然，默认情况下，只会偏平一层，如果传入参数就可以偏平自己需要的层数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, [<span class="number">5</span>]]]];</span><br><span class="line"><span class="built_in">console</span>.log(arr.flat()); <span class="comment">// [1, 2, 3, [4, [5]]]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.flat(<span class="number">2</span>)); <span class="comment">// [1, 2, 3, 4, [5]]</span></span><br><span class="line"><span class="built_in">console</span>.log(arr.flat(<span class="number">3</span>)); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>如果你需要无论多少层都将其转化为一层，使用<code>正无穷(Infinity)</code>作为参数即可。</p><p>如果数组有<strong>空位</strong>，<code>flat()</code> 函数则会将空位跳过</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>, [<span class="number">4</span>, [<span class="number">5</span>, [<span class="number">6</span>]]]]]];</span><br><span class="line"><span class="built_in">console</span>.log(arr.flat(<span class="literal">Infinity</span>)); <span class="comment">// [1, 2, 3, 4, 5, 6]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> array = [<span class="number">1</span>, , <span class="number">3</span>, , <span class="number">5</span>];</span><br><span class="line"><span class="built_in">console</span>.log(array.flat()); <span class="comment">// [1, 3, 5]</span></span><br></pre></td></tr></table></figure><ul><li><strong>flatMap()</strong></li></ul><p><code>flatMap()</code> 实例方法，可以理解为，对数组进行 <code>map</code> 操作，然后对返回值组成的数组执行 <code>flat()</code> 方法。该实例方法，返回一个新的数组，不会改变原数组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, [<span class="number">4</span>]];</span><br><span class="line"><span class="keyword">let</span> array = arr.flatMap(<span class="function">(<span class="params">item</span>) =&gt;</span> item * <span class="number">2</span>);</span><br><span class="line"><span class="built_in">console</span>.log(array); <span class="comment">// [2, 4, 6, 8]</span></span><br></pre></td></tr></table></figure><p><strong>注意</strong></p><p>该方法只能展开一层，无法多层展开，有兴趣的，可以去验证一下。</p>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES 6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES 6 系列之函数的扩展</title>
      <link href="//Blog/eaf27707.html"/>
      <url>//Blog/eaf27707.html</url>
      
        <content type="html"><![CDATA[<h2 id="函数参数默认值"><a href="#函数参数默认值" class="headerlink" title="函数参数默认值"></a>函数参数默认值</h2><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><p>我们来介绍一下函数的默认值，在 ES6 之前，不能直接为函数的参数指定默认值，只能采用变通的方式。</p><p>我们先来看看 ES6 之前怎么给函数参数添加默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x, y</span>) </span>&#123;</span><br><span class="line">  y = y || <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>)); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>)); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>我们做的是检查 <code>y</code> 的值有没有传入，如果没有则会默认被赋值为 <code>1</code>。这种方式是有缺点的，如果传入的值为<strong>布尔值 <code>false</code><strong>，那么传入的值会变得无效。</strong>空字符串</strong>也是会有布尔值 <code>false</code> 一样的结果。</p><p>那么现在我们来看看 ES6 允许设置默认值的写法吧</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x = <span class="number">1</span>, y = <span class="number">2</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add()); <span class="comment">// 3</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">3</span>)); <span class="comment">// 5</span></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">2</span>, <span class="number">3</span>)); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>从上面的代码就可以看到，一眼就可以<strong>判断出参数是否可省略，且写法比 <code>ES5</code> 简洁许多</strong></p><blockquote><p>注意：</p><ul><li>函数的参数变量是默认声明的，所以不能使用 let 或者 const 再次声明。</li><li>参数默认值的位置，必须是在函数的尾部，如果不是在尾部，否则是没法省略的。</li></ul></blockquote><h3 id="解构赋值与默认值结合使用"><a href="#解构赋值与默认值结合使用" class="headerlink" title="解构赋值与默认值结合使用"></a><strong>解构赋值与默认值结合使用</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">[x, y] = [<span class="number">1</span>, <span class="number">2</span>]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来我们还是先用 <code>add</code> 函数来举例，上面就是用的数组的解构赋值，可以个传入的数组进行解构赋值，默认解构赋值。</p><h3 id="函数的-length"><a href="#函数的-length" class="headerlink" title="函数的 length"></a>函数的 length</h3><p>很奇怪吧，函数居然能有 <code>length</code>，来我们在这里简单提一下函数的 <code>length</code> 是什么。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="function"><span class="keyword">function</span> (<span class="params">x</span>) </span>&#123;&#125;.length); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="function"><span class="keyword">function</span> (<span class="params">x = <span class="number">1</span></span>) </span>&#123;&#125;.length); <span class="comment">// 0</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="function"><span class="keyword">function</span> (<span class="params">x, y, z = <span class="number">2</span></span>) </span>&#123;&#125;.length); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>没错，就是这样。它的 <code>length</code> 就是函数必须传入的参数，也就是函数的所有参数减去制定了默认值的参数个数。 如果设置了默认值的参数不是尾参数，那么 <code>length</code> 属性也不再计入后面的参数了。</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><hr><h2 id="rest-参数"><a href="#rest-参数" class="headerlink" title="rest 参数"></a>rest 参数</h2><p>ES6 中引入来 <code>rest</code> 参数（形式为 <code>...变量名</code> ），用于获取函数的多余参数，替代 <code>arguments</code> 对象。</p><p>我们还是那 <code>add</code> 函数来举例吧。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...values</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> num <span class="keyword">of</span> values) &#123;</span><br><span class="line">    sum += num;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>)); <span class="comment">// 15</span></span><br></pre></td></tr></table></figure><p>这里就可以看出来，<code>rest</code> 参数是做什么用的，使用它之后，参数可以无限传入，不限制定量。</p><p>函数的 <code>length</code> 不包括 <code>rest</code> 参数。</p><hr><h2 id="箭头函数"><a href="#箭头函数" class="headerlink" title="箭头函数"></a>箭头函数</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>我们来看看 ES6 中增加的箭头函数( <code>=&gt;</code> )，来我们还是用 <code>add</code> 函数来举例子，</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>来看看更简单的写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiply</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> n * n;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 等价于</span></span><br><span class="line"><span class="keyword">const</span> multiply = <span class="function">(<span class="params">n</span>) =&gt;</span> n * n;</span><br></pre></td></tr></table></figure><p>有时候 <code>return</code> 可以省略。</p><p>当然，箭头函数可以<strong>嵌套</strong>使用，会大大增加代码量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">y</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params">z</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">return</span> x + y + z;</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面是普通的写法，然后我们来看一下箭头函数的写法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> add = <span class="function">(<span class="params">x</span>) =&gt;</span> <span class="function">(<span class="params">y</span>) =&gt;</span> <span class="function">(<span class="params">z</span>) =&gt;</span> x + y + z;</span><br></pre></td></tr></table></figure><p>对比一下，应该就知道啦，两种的写法简便程度差别真的很大。</p><h3 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h3><p>在这里，稍微提一下箭头函数的相关注意点：</p><ul><li>箭头函数没有自己的 <code>this</code> 对象</li><li>不可以当作构造函数，即不可使用 <code>new</code> 命令</li><li>不可以使用 <code>arguments</code> 对象，不存在该对象，但是可以使用 <code>rest</code> 参数代替</li><li>不可以使用 <code>yield</code> 命令，因此箭头函数不能使用 <code>Generator</code> 函数</li></ul><p>在这里不特点讲述，如果想要具体了解，可以看一下我的另一篇文章<a href="https://hzzzzzzzq.github.io/Blog/ea626e9c.html">Javasctip - this 指向</a>，文章后续补齐。</p>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES 6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES 6 系列之字符串的扩展</title>
      <link href="//Blog/6655c652.html"/>
      <url>//Blog/6655c652.html</url>
      
        <content type="html"><![CDATA[<h2 id="字符串的遍历"><a href="#字符串的遍历" class="headerlink" title="字符串的遍历"></a>字符串的遍历</h2><p>ES6 中添加了字符串的遍历器接口，字符串就可以使用 <code>for...of</code> 来遍历了。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;Hello&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> c <span class="keyword">of</span> s) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(c); <span class="comment">// H e l l o</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JSON-stringify-和-JSON-parse"><a href="#JSON-stringify-和-JSON-parse" class="headerlink" title="JSON.stringify() 和 JSON.parse()"></a><code>JSON.stringify()</code> 和 <code>JSON.parse()</code></h2><p>在有时候，我们需要将一个 <code>JSON</code> 格式的数据，转成字符串进行页面传递。<br>所以这时候采用 <code>JSON.stringify()</code> 进行序列化。然后传递，在目的页面使用 <code>JSON.parse()</code> 转为 <code>JavaScript</code> 对象。在进行大数据传递时，时常需要。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> person = &#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;hzzzzzzzq&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">height</span>: <span class="number">1.8</span>,</span><br><span class="line">  <span class="attr">weight</span>: <span class="number">140</span>,</span><br><span class="line">  <span class="attr">skills</span>: [<span class="string">&#x27;JavaScript&#x27;</span>],</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">let</span> s = <span class="built_in">JSON</span>.stringify(person);</span><br><span class="line"><span class="built_in">console</span>.log(s);</span><br><span class="line"><span class="comment">// &#123;&quot;name&quot;:&quot;hzzzzzzzq&quot;,&quot;age&quot;:18,&quot;height&quot;:1.8,&quot;weight&quot;:140,&quot;skills&quot;:[&quot;JavaScript&quot;]&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str = <span class="built_in">JSON</span>.parse(s);</span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br><span class="line"><span class="comment">// &#123;</span></span><br><span class="line"><span class="comment">//  &quot;name&quot;: &quot;hzzzzzzzq&quot;,</span></span><br><span class="line"><span class="comment">//  &quot;age&quot;: 18,</span></span><br><span class="line"><span class="comment">//  &quot;height&quot;: 1.8,</span></span><br><span class="line"><span class="comment">//  &quot;weight&quot;: 140,</span></span><br><span class="line"><span class="comment">//  &quot;skills&quot;: [</span></span><br><span class="line"><span class="comment">//     &quot;JavaScript&quot;</span></span><br><span class="line"><span class="comment">//   ]</span></span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure><h2 id="模版字符串"><a href="#模版字符串" class="headerlink" title="模版字符串"></a>模版字符串</h2><p>什么是模版字符串呢？简单来说，其实就是加强版的字符串，使用 ( <strong>`</strong> )作为标识符 。可以作为普通的字符串使用，也可以用来定义多行字符串，或者在字符串中使用变量。</p><p>我们来看看使用普通字符串时 是怎么进行换行，或者加入变量的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;hzzzzzzzq&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> info = <span class="string">&#x27;my name is &#x27;</span> + name + <span class="string">&#x27;\n my age is &#x27;</span> + age;</span><br><span class="line"><span class="built_in">console</span>.log(info);</span><br><span class="line"><span class="comment">// my name is hzzzzzzzq</span></span><br><span class="line"><span class="comment">// my age is 18</span></span><br></pre></td></tr></table></figure><p>然后我们再来看看模版字符串的写法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> name = <span class="string">&#x27;hzzzzzzzq&#x27;</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">18</span>;</span><br><span class="line"><span class="keyword">let</span> info = <span class="string">`my name is <span class="subst">$&#123;name&#125;</span></span></span><br><span class="line"><span class="string">my age is <span class="subst">$&#123;age&#125;</span>`</span>;</span><br><span class="line"><span class="built_in">console</span>.log(info);</span><br><span class="line"><span class="comment">// my name is hzzzzzzzq</span></span><br><span class="line"><span class="comment">// my age is 18</span></span><br></pre></td></tr></table></figure><p>换行，直接就使用回车就可以换行，你输入的样子是怎样的，打印基本上就是怎样的。</p><p>变量采用 <code>$&#123;&#125;</code> 来嵌入，也可以直接写入一个字符串中，少写了许多没必要的 <code>+</code> 号。</p><h2 id="字符串中的新增方法"><a href="#字符串中的新增方法" class="headerlink" title="字符串中的新增方法"></a>字符串中的新增方法</h2><p>在这里就列举一些常用的实例方法</p><h3 id="includes"><a href="#includes" class="headerlink" title="includes()"></a>includes()</h3><p><code>includes()</code> 实例方法，返回的是一个布尔值（<code>true</code>和<code>false</code>），<strong>表示是否找到了参数字符串</strong>。<br>参数二来表示开始搜索的位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;Hello hzzzzzzzq&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(s.includes(<span class="string">&#x27;Hello&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(s.includes(<span class="string">&#x27;x&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="built_in">console</span>.log(s.includes(<span class="string">&#x27;zzzzzzz&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(s.includes(<span class="string">&#x27;H&#x27;</span>, <span class="number">2</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="startsWith-、endsWith"><a href="#startsWith-、endsWith" class="headerlink" title="startsWith()、endsWith()"></a>startsWith()、endsWith()</h3><ul><li><strong>startsWith()</strong><br><code>startsWith()</code> 返回也是布尔值，<strong>表示参数是否在原字符串的头部</strong>。<br>第二参数也表示开始搜索的位置。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;Hello hzzzzzzzq&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(s.startsWith(<span class="string">&#x27;Hello&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(s.startsWith(<span class="string">&#x27;e&#x27;</span>)); <span class="comment">// false</span></span><br><span class="line"><span class="comment">// 表示从 1 开始</span></span><br><span class="line"><span class="built_in">console</span>.log(s.startsWith(<span class="string">&#x27;Hello&#x27;</span>, <span class="number">1</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><ul><li><strong>endsWith()</strong><br><code>endsWith()</code> 返回也是布尔值，<strong>表示参数是否在原字符串的尾部</strong>。<br>注意：这里的第二参数表示的是到 n 为止，不像 <code>startsWith()</code> 是从 <code>n</code> 开始到字符串结尾。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;Hello hzzzzzzzq&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(s.endsWith(<span class="string">&#x27;q&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="built_in">console</span>.log(s.endsWith(<span class="string">&#x27;zzzzq&#x27;</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 表示看前 5 个字符</span></span><br><span class="line"><span class="built_in">console</span>.log(s.endsWith(<span class="string">&#x27;o&#x27;</span>, <span class="number">5</span>)); <span class="comment">// true</span></span><br><span class="line"><span class="comment">// 表示看前 4 个字符</span></span><br><span class="line"><span class="built_in">console</span>.log(s.endsWith(<span class="string">&#x27;o&#x27;</span>, <span class="number">4</span>)); <span class="comment">// false</span></span><br></pre></td></tr></table></figure><h3 id="repeat"><a href="#repeat" class="headerlink" title="repeat()"></a>repeat()</h3><p><code>repeat()</code> 返回一个新字符串，表示将原字符串重复 <code>n</code> 次。</p><ul><li>如果传入的是小数，则会往下取整。</li><li>传入参数不能是 <code>Infinity</code> 和 小于 <code>-1</code> 的值</li><li><code>0</code> 到 <code>-1</code> 之间的小数，则按照等同于 <code>0</code> 来计算。</li><li><code>NaN</code> 会被转为 <code>0</code></li><li>参数是字符串则先转为数字，如果不能转为数字，则为 <code>0</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(s.repeat(<span class="number">4</span>)); <span class="comment">// &#x27;aaaa&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(s.repeat(<span class="number">3.6</span>)); <span class="comment">// &#x27;aaa&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(s.repeat(-<span class="number">0.6</span>)); <span class="comment">// &#x27;&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(s.repeat(<span class="string">&#x27;aaa&#x27;</span>)); <span class="comment">// &#x27;&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="padStart、padEnd"><a href="#padStart、padEnd" class="headerlink" title="padStart、padEnd()"></a>padStart、padEnd()</h3><p>两个实例方法，就是用于字符串的补齐。<br><strong>第一参数表示想要字符串的长度，第二参数表示字符串没达到第一参数时使用参数二字符串进行补齐。</strong></p><ul><li><strong>padStart()</strong><br>很明显，<code>Start</code>，就是在字符串的头部补全。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line"><span class="comment">// 如果原长度大于或等于想要补齐长度，则不生效。</span></span><br><span class="line"><span class="built_in">console</span>.log(s.padStart(<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>)); <span class="comment">// aaa</span></span><br><span class="line"><span class="built_in">console</span>.log(s.padStart(<span class="number">10</span>, <span class="string">&#x27;b&#x27;</span>)); <span class="comment">// bbbbbbbaaa</span></span><br><span class="line"><span class="comment">// 如果补齐字符串长度大于剩余格数，则会省略后面字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(s.padStart(<span class="number">4</span>, <span class="string">&#x27;bcde&#x27;</span>)); <span class="comment">// baaa</span></span><br><span class="line"><span class="comment">// 如果，第二参数无内容，则使用空格补齐</span></span><br><span class="line"><span class="built_in">console</span>.log(s.padStart(<span class="number">4</span>)); <span class="comment">// &#x27; aaa&#x27;</span></span><br></pre></td></tr></table></figure><ul><li><strong>padEnd()</strong><br><code>End</code> 就是在字符串的尾部补全。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;aaa&#x27;</span>;</span><br><span class="line"><span class="comment">// 如果原长度大于或等于想要补齐长度，则不生效。</span></span><br><span class="line"><span class="built_in">console</span>.log(s.padEnd(<span class="number">2</span>, <span class="string">&#x27;b&#x27;</span>)); <span class="comment">// aaa</span></span><br><span class="line"><span class="built_in">console</span>.log(s.padEnd(<span class="number">10</span>, <span class="string">&#x27;b&#x27;</span>)); <span class="comment">// aaabbbbbbb</span></span><br><span class="line"><span class="comment">// 如果补齐字符串长度大于剩余格数，则会省略后面字符串</span></span><br><span class="line"><span class="built_in">console</span>.log(s.padEnd(<span class="number">4</span>, <span class="string">&#x27;bcde&#x27;</span>)); <span class="comment">// aaab</span></span><br><span class="line"><span class="comment">// 如果，第二参数无内容，则使用空格补齐</span></span><br><span class="line"><span class="built_in">console</span>.log(s.padEnd(<span class="number">4</span>)); <span class="comment">// &#x27;aaa &#x27;</span></span><br></pre></td></tr></table></figure><h3 id="trimStart-、trimEnd"><a href="#trimStart-、trimEnd" class="headerlink" title="trimStart()、trimEnd()"></a>trimStart()、trimEnd()</h3><p>这两个实例都是用来<strong>去除字符串空格用的</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;   x   &#x27;</span>;</span><br><span class="line"><span class="comment">// start 去除前面空格</span></span><br><span class="line"><span class="built_in">console</span>.log(s.trimStart()); <span class="comment">// &#x27;x   &#x27;</span></span><br><span class="line"><span class="comment">// end 去除后面空格</span></span><br><span class="line"><span class="built_in">console</span>.log(s.trimEnd()); <span class="comment">// &#x27;   x&#x27;</span></span><br></pre></td></tr></table></figure><h3 id="replaceAll"><a href="#replaceAll" class="headerlink" title="replaceAll()"></a>replaceAll()</h3><p><code>replaceAll()</code> 实例方法是用来替换字符串中的字符用的。</p><p>在提到这个之前，我们先看看 <code>replace()</code> ，<strong>参数一是被替换的值，参数二是替换值</strong>，简单来讲就是，<strong>参数二用来替换参数一</strong>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;abcabc&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(s.replace(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;x&#x27;</span>)); <span class="comment">// xbcabc</span></span><br></pre></td></tr></table></figure><p><code>replace()</code> 只能替代一个，是第一个遇到的。</p><p>那我们来看看 <code>replaceAll()</code>，是全部替换。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> s = <span class="string">&#x27;abcabc&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(s.replaceAll(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;x&#x27;</span>)); <span class="comment">// xbcxbc</span></span><br></pre></td></tr></table></figure><p>这里是简单的用法，当然在 <code>replaceAll()</code> 第二参数还可以传入一个函数，具体可以看看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replaceAll">MDN 的 replaceAll()</a></p>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES 6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES 6 系列之变量的解构赋值</title>
      <link href="//Blog/1c84e2dc.html"/>
      <url>//Blog/1c84e2dc.html</url>
      
        <content type="html"><![CDATA[<p>解构赋值：ES6 允许按照一定模式，从数组、字符串和对象中提取值，对变量进行赋值</p><p>我们来看一下以前赋值的方式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">2</span>;</span><br></pre></td></tr></table></figure><p>那么现在我们来初步了解一下解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b] = [<span class="number">1</span>, <span class="number">2</span>];</span><br></pre></td></tr></table></figure><p>上面两段代码的赋值结果是相同的。</p><hr><h2 id="数组的解构赋值"><a href="#数组的解构赋值" class="headerlink" title="数组的解构赋值"></a>数组的解构赋值</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><p>我们来看看数组的解构赋值，在上面中，我们使用了数组的解构赋值，来举例子。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> [a, b, c, d] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br></pre></td></tr></table></figure><p>这样操作之后，就可以从数组中提取到相应的值，<strong>按照对应位置，对变量赋值</strong>。</p><p>本质上，也就是模式的匹配，只要等号两边的模式相同，左边的变量就会被赋予对应的值。</p><p>我们来多举例</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子1</span></span><br><span class="line"><span class="keyword">let</span> [a, [b], [c]] = [<span class="number">1</span>, [<span class="number">2</span>], [<span class="number">3</span>]];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>从 <code>例子1</code> 中可以看出，这是一种嵌套数组取值方式，可以看出，数组的解构赋值，可以进行嵌套取值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子2</span></span><br><span class="line"><span class="keyword">let</span> [, a] = [<span class="number">1</span>, <span class="number">2</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 2</span></span><br></pre></td></tr></table></figure><p>从 <code>例子2</code> 来看，就证明了数组赋值解构说的这句话，<strong>按照对应的值，对变量进行赋值</strong>，而不是每次都从第一个开始取。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子3</span></span><br><span class="line"><span class="keyword">let</span> [a, ...arr] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// [2, 3, 4];</span></span><br></pre></td></tr></table></figure><p>从 <code>例子3</code> 来看，我们也可以用 <a href="https://hzzzzzzzq.github.io/Blog/15284f3d.html">扩展运算符</a> 这里需要一个扩展运算符的项目，来同时将后面的值放到一个数组中。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子4</span></span><br><span class="line"><span class="keyword">let</span> [a, b, ...arr] = [<span class="number">1</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// undefined</span></span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// []</span></span><br></pre></td></tr></table></figure><p>从 <code>例子4</code> 来看，我们能发现，如果在右侧找不到值时，就是解构不成功，这时候如果是单变量，则会等于 <code>undefined</code>，如果是使用了 <a href="https://hzzzzzzzq.github.io/Blog/15284f3d.html">扩展运算符</a> 的变量，则是空数组。</p><h3 id="默认值"><a href="#默认值" class="headerlink" title="默认值"></a>默认值</h3><p>接下来，我们来看一下解构赋值中指定默认值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子5</span></span><br><span class="line"><span class="keyword">let</span> [a = <span class="number">10</span>] = [];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>在上面的 <code>例子5</code> 中，可以看到，<code>a</code> 对应的右侧是解构失败的，值应该为 <code>undefined</code>，但是输出是 <code>10</code>，这就是因为<strong>解构赋值中允许指定默认值</strong></p><p>但是默认值是有生效条件的：<strong>只有当一个数组成员严格等于 <code>undefined</code> 时，默认值才会生效</strong>。</p><blockquote><p>ES6 中的严格相等运算符( <code>===</code> )，可以判断一个位置是否有值。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子6</span></span><br><span class="line"><span class="keyword">let</span> [a = <span class="number">1</span>, b = <span class="number">2</span>, c = <span class="number">3</span>] = [<span class="number">10</span>, <span class="literal">null</span>, <span class="literal">undefined</span>];</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 10</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// null</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>在 <code>例子6</code> 中，就可以看出只有当右侧的值严格相等于 <code>undefined</code> 时，默认值才会生效。</p><hr><h2 id="对象的解构赋值"><a href="#对象的解构赋值" class="headerlink" title="对象的解构赋值"></a>对象的解构赋值</h2><p>解构赋值并不只是在数组中，在对象中也可以。</p><h3 id="基本使用-1"><a href="#基本使用-1" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子7</span></span><br><span class="line"><span class="keyword">let</span> &#123; a, b &#125; = &#123; <span class="attr">a</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#x27;aaa&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// &#x27;bbb&#x27;</span></span><br></pre></td></tr></table></figure><p>从 <code>例子7</code> 中，我们可以看出对象的解构赋值与数组的解构赋值的一个重要的不同点。数组元素是按照对应的下标次序来排列的，但是在对象中，变量必须与属性同名，才可以取到正确的值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子8</span></span><br><span class="line"><span class="keyword">let</span> &#123; b, c &#125; = &#123; <span class="attr">a</span>: <span class="string">&#x27;aaa&#x27;</span>, <span class="attr">b</span>: <span class="string">&#x27;bbb&#x27;</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// &#x27;bbb&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// undefined</span></span><br></pre></td></tr></table></figure><p>从 <code>例子8</code> 中，我们可以看到，对象的解构赋值，变量必须与属性同名，且并不是按照次序来对应的。同数组，解构失败时，变量的值等于 <code>undefined</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子9</span></span><br><span class="line"><span class="keyword">let</span> &#123;</span><br><span class="line">  <span class="attr">a</span>: &#123; b &#125;,</span><br><span class="line">&#125; = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="number">20</span> &#125; &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子10</span></span><br><span class="line"><span class="keyword">let</span> &#123; a &#125; = &#123; <span class="attr">a</span>: &#123; <span class="attr">b</span>: <span class="number">20</span> &#125; &#125;;</span><br></pre></td></tr></table></figure><p>从 <code>例子9</code> 中，我们可以看到，对象的解构赋值，也是同数组一样，可以进行嵌套取值。</p><blockquote><p>注意：在这里 <code>例子9</code> 中左侧的 <code>a</code> 是模式，不是变量，因此不会被赋值，如果想要 <code>a</code> 也被赋值，可以使用 <code>例子10</code> 的写法</p></blockquote><h3 id="默认值-1"><a href="#默认值-1" class="headerlink" title="默认值"></a>默认值</h3><p>我们在数组解构赋值中，可以使用默认值，那么在对象中，是不是也有呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子11</span></span><br><span class="line"><span class="keyword">let</span> &#123; a = <span class="number">1</span> &#125; = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子12</span></span><br><span class="line"><span class="keyword">let</span> &#123; a, b = <span class="number">2</span> &#125; = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 例子13</span></span><br><span class="line"><span class="keyword">let</span> &#123; <span class="attr">a</span>: b = <span class="number">1</span> &#125; = &#123;&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 1</span></span><br></pre></td></tr></table></figure><p>从 <code>例子11</code>、<code>例子12</code>、<code>例子13</code>，可以看出，其实对象的默认值与数组的默认值是类似的。</p><hr><h2 id="字符串的解构赋值"><a href="#字符串的解构赋值" class="headerlink" title="字符串的解构赋值"></a>字符串的解构赋值</h2><p>字符串也是可以进行解构赋值的，其实就是相当于将字符串转化成一个类似数组的对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子14</span></span><br><span class="line"><span class="keyword">let</span> [a, b, c, d, e] = <span class="string">&#x27;hello&#x27;</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// &#x27;h&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// &#x27;e&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(c); <span class="comment">// &#x27;l&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(d); <span class="comment">// &#x27;l&#x27;</span></span><br><span class="line"><span class="built_in">console</span>.log(e); <span class="comment">// &#x27;o&#x27;</span></span><br></pre></td></tr></table></figure><p>从 <code>例子14</code> 来看，就可以明白了，数组的解构赋值相当于被转化成一个类数组的对象进行解构赋值。</p><hr><h2 id="函数参数的解构赋值"><a href="#函数参数的解构赋值" class="headerlink" title="函数参数的解构赋值"></a>函数参数的解构赋值</h2><p>函数的参数也是可以使用解构赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 例子15</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">[a, b]</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(add([<span class="number">1</span>, <span class="number">2</span>])); <span class="comment">// 3</span></span><br></pre></td></tr></table></figure><p>从 <code>例子15</code> 可以看出，函数的参数是可以进行解构赋值的，既然<strong>数组</strong>可以，那么<strong>对象</strong>也可以，<strong>字符串</strong>也是。</p><hr>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES 6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES 6 系列之Let 和 const 命令</title>
      <link href="//Blog/2f2a0f87.html"/>
      <url>//Blog/2f2a0f87.html</url>
      
        <content type="html"><![CDATA[<h2 id="let-命令"><a href="#let-命令" class="headerlink" title="let 命令"></a>let 命令</h2><h3 id="简单实用"><a href="#简单实用" class="headerlink" title="简单实用"></a><strong>简单实用</strong></h3><p>ES6 中新增了 <code>let</code> 命令，用来声明变量。使用方式同 <code>var</code> 命令，但是 <code>let</code> 命令只在所在的代码块内有效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">let</span> a = <span class="number">10</span>;</span><br><span class="line">  <span class="keyword">var</span> b = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 报错，a 为定义 ReferenceError: a is not defined</span></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 10</span></span><br></pre></td></tr></table></figure><p>在上面的使用案例中，我们可以看出 <code>let</code> 命令只在代码块中生效，而在代码块以外使用则无效。</p><h3 id="for-循环中使用"><a href="#for-循环中使用" class="headerlink" title="for 循环中使用"></a><strong>for 循环中使用</strong></h3><p>我们来看看在 <code>for</code> 循环中使用 <code>var</code> 命令.</p><p>下面这段代码，打印出来的会是什么呢？可以跑一下代码，看一下控制台。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p>好了，你会发现，所有的打印都是 <code>5</code>，为什么呢？是因为 <code>var</code> 命令是在全局范围内有效，所以全局只有一个变量 <code>i</code>，每一次循环，变量 <code>i</code> 的值都会发生改变，所以当你打印是，打印的就是全局的 <code>i</code> ，也就是经过多次变化赋值的 <code>5</code>。</p><p>上面代码中，我在外面打印了一下 <code>i</code> ，来证明 <code>var</code> 定义的是一个全局变量。</p><p>来，让我们将 <code>var</code> 改成 <code>let</code>，现在打印的结果又是什么呢？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(i); <span class="comment">// ReferenceError: i is not defined</span></span><br></pre></td></tr></table></figure><p>当然，我想很多人都猜到了结果，就是 <code>0 1 2 3 4</code> ，那么这里又是为什么呢？</p><p><code>let</code> 变量只在所在的代码块内有效，在子代码块中依然有效。在上述循环中 <code>i</code> 只在本轮循环内有效，所以每一次循环的 <code>i</code> 其实都是一个新定义的变量，所以会输出当前 <code>i</code> 的值，每次循环对应输出。</p><p>当然，这里可能会出现一个问题，每轮的变量都是一个新变量，那它是怎么知道上一轮循环的值的？稍做解释：<a href="https://jsshou.cn/blog/frontend/V8study.html#%E5%89%8D%E8%A8%80">JS 引擎(v8)</a>内部会记住上一轮循环的值，初始化本轮的变量时，就在上一轮循环的基础上进行计算。</p><p>上面我们说，<code>let</code> 命令在子代码块中也有效，可以从 <code>for</code> 循环上来看，<code>()</code> 内部其实就是一个父级作用域，而 <code>&#123;&#125;</code> 内部就是一个单独的子作用域。</p><h3 id="不存在变量提升"><a href="#不存在变量提升" class="headerlink" title="不存在变量提升"></a>不存在变量提升</h3><p>变量提升，即变量可以在声明之前使用，值为 <code>undefined</code>，<code>var</code> 命令存在，而 <code>let</code> 命令并没有变量提升，照样，我们来看看使用的案例。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// undefined</span></span><br><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// ReferenceError</span></span><br><span class="line"><span class="keyword">let</span> b = <span class="number">10</span>;</span><br></pre></td></tr></table></figure><p>可以在控制台中跑一下这段代码，进行尝试。你会发现，<code>a</code> 变量进行了变量提升，而 <code>b</code> 变量没有发生，这表明了在声明之前使用，变量 <code>b</code> 是不存在的。</p><h3 id="暂时性死区"><a href="#暂时性死区" class="headerlink" title="暂时性死区"></a>暂时性死区</h3><p><strong>代码块中，使用 <code>let</code> 命令声明变量之前，该变量都是不可用的</strong>。</p><p>在外部有一个全局变量 <code>x</code>，但是在内部使用 <code>let</code> 声明了一个 <code>x</code>，于是内部的 <code>x</code> 绑定了这个代码块，不受部影响。</p><p>但是在内部，声明变量之前的这个区域就是<strong>暂时性死区</strong>，我们来从下面的代码来看。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="comment">// 暂时性死区 开始点</span></span><br><span class="line">  x = <span class="number">10</span>; <span class="comment">// 报错</span></span><br><span class="line">  <span class="built_in">console</span>.log(x); <span class="comment">// 报错</span></span><br><span class="line">  <span class="keyword">let</span> x; <span class="comment">// 暂时性死区结束点</span></span><br><span class="line">  <span class="built_in">console</span>.log(X); <span class="comment">// undefined</span></span><br><span class="line"></span><br><span class="line">  x = <span class="number">20</span>;</span><br><span class="line">  <span class="built_in">console</span>.log(x); <span class="comment">// 20</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>暂时性死区</strong>的存在，也就意味着 <code>typeof</code> 的操作会变的不安全，在没有声明变量时，使用 <code>typeof</code> 并不会报错，返回一个 <code>undefined</code>，然而因为暂时性死区，会使得 <code>typeof</code> 报错 <code>ReferenceError</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> x); <span class="comment">// undefined</span></span><br><span class="line">  <span class="built_in">console</span>.log(<span class="keyword">typeof</span> y); <span class="comment">// ReferenceError</span></span><br><span class="line">  <span class="keyword">let</span> y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在<a href="https://hzzzzzzzq.github.io/Blog/eaf27707.html">函数默认值</a>中也存在暂时性死区，而且会不容易发现。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x = y, y = <span class="number">1</span></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x + y;</span><br><span class="line">&#125;</span><br><span class="line">add(); <span class="comment">// ReferenceError</span></span><br></pre></td></tr></table></figure><p>在上面的代码中，就是如此，给<a href="https://hzzzzzzzq.github.io/Blog/eaf27707.html">函数赋默认值</a>时，使用后面的值赋值给前面的 <code>x</code>，而这时候 <code>y</code> 还没有定义，所以会报错。</p><h3 id="不允许重复声明"><a href="#不允许重复声明" class="headerlink" title="不允许重复声明"></a>不允许重复声明</h3><p><code>var</code> 变量是允许进行重复声明的，但是 <code>let</code> 变量是不允许的。</p><p>来，上代码。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> a = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> b = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">console</span>.log(b); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> c = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">var</span> c = <span class="number">20</span>;</span><br><span class="line"><span class="comment">// 报错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> d = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">let</span> d = <span class="number">20</span>;</span><br><span class="line"><span class="comment">// 报错</span></span><br></pre></td></tr></table></figure><hr><h2 id="const-命令"><a href="#const-命令" class="headerlink" title="const 命令"></a>const 命令</h2><p><code>const</code> 命令 声明一个只读的常量。一旦声明，常量的值就不能改变</p><h3 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="number">3.14159</span>;</span><br><span class="line"><span class="built_in">console</span>.log(PI); <span class="comment">// 3.14159</span></span><br><span class="line"></span><br><span class="line">PI = <span class="number">3.14</span>; <span class="comment">// TypeError: Assignment to constant variable</span></span><br></pre></td></tr></table></figure><p><code>const</code> 声明时，必须立即进行初始化，不能进行赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cosnt PI; <span class="comment">// 报错 SyntaxError</span></span><br></pre></td></tr></table></figure><p><code>const</code> 只声明，不赋值就会报错。</p><p><code>const</code> 作用域与 <code>let</code> 相同：只在声明所在的块级作用域内有效。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="keyword">const</span> PI = <span class="number">3.14159</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(PI); <span class="comment">//Uncaught ReferenceError</span></span><br></pre></td></tr></table></figure><p><code>const</code> 命令也不存在变量提升，但是存在暂时性死区，只能在声明后使用。</p><p>与 <code>let</code> 一样，不可进行重复声明。</p><h3 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h3><p>首先，我们来看一个对象的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> obj = &#123;&#125;;</span><br><span class="line">obj.prop = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(obj.prop); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">obj = &#123;&#125;; <span class="comment">// TypeError</span></span><br></pre></td></tr></table></figure><p>由上面可以看出，常量 <code>obj</code> 储存的是一个地址，这个地址指向一个对象。不可变的只是这个地址，即不能把 obj 指向另一个地址，但对象本身是可变的，所以依然可以添加新属性。</p><p>再来看一个数组的例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [];</span><br><span class="line">arr.push(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">console</span>.log(arr); <span class="comment">// 1</span></span><br><span class="line"></span><br><span class="line">arr = [];</span><br></pre></td></tr></table></figure><p>同对象，常量 <code>arr</code> 是一个数组，这个数组本身是可写的，但是如果将另一个数组赋值给 <code>arr</code>，就会报错。</p><p>由此可见</p><ul><li><p><code>const</code> 保证的 实际上并不是变量的值不改动，而是变量指向的那个内存地址所保存的数据不得改动。</p></li><li><p><code>const</code> 只能保证这个指针式固定的，至于他指向的数据结构是不是可变的，就完全不能控制了。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES 6 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES 6 系列之了解ES 6</title>
      <link href="//Blog/3dc68d81.html"/>
      <url>//Blog/3dc68d81.html</url>
      
        <content type="html"><![CDATA[<p>首先呢，我们来说一下 <code>ECMAScript</code>，<code>ECMAScript</code> 是 <code>JavaScript</code> 中的语法规范。那我们来看看<a href="https://zh.wikipedia.org/wiki/ECMAScript"><strong>维基百科</strong>中的定义</a>。</p><span id="more"></span><blockquote><p>ECMAScript 是一种由 Ecma 国际（前身为欧洲计算机制造商协会）在标准 ECMA-262 中定义的脚本语言规范。这种语言在万维网上应用广泛，它往往被称为 JavaScript 或 JScript，但实际上后两者是 ECMA-262 标准的实现和扩展。</p></blockquote><p>那 <code>ECMAScript</code> 的主要作用是什么呢？定义了很多我们需要使用的重要的东西。</p><ul><li>语法： 解析规则，关键词，语句，声明，操作等</li><li>类型： 布尔型，数字，字符串，对象等</li><li>原型和继承</li><li>内置对象和函数的标准库： JSON，Math，数组方法等等</li></ul><p>说完了 <code>ECMAScript</code> ，那我们就可以来看看 <code>ES 6</code> 了。<br><code>ES 6</code> 全称 <code>ECMASCript 6</code>，我们可以看出，是 <code>ECMAScript</code> 的第六版，是 <code>JavaScript</code> 的一个标准， 2015 年 6 月发版，主要目的是解决 <code>ES 5</code> 的不足。截止 2020 年 6 月已经更新至 <code>11</code> 版。</p><h2 id="为什么要学习-ES-6？"><a href="#为什么要学习-ES-6？" class="headerlink" title="为什么要学习 ES 6？"></a>为什么要学习 ES 6？</h2><p>首先，<code>ES 6</code> 是 <code>ECMAScript 2015</code> 出版的一个标准，各个浏览器厂商都相当踊跃的遵循了这个标准，目前 <strong>Chrome 已经支持了超过 80% 的 <code>ES 6</code> 特性</strong>，业界流行框架类库都开始使用 <code>ES6</code> 编写。<br>从 2011 年更新了 5.1 版本之后，直到 2015 年才更新了 <code>ES 6</code>， 它已成为 <code>JavaScript</code> 有史以来最实质的一次升级，新的语言和库特性就像无主之宝，等待有识之士的发掘。新的语言特性涵盖范围甚广，小到受欢迎的语法糖，例如箭头函数和简单的字符串插值，大到复杂的新概念，例如代理、生成器和承诺(<code>Promise</code>)等。<br><code>ES 6</code> 彻底改变了我们的编写 <code>JavaScript</code> 代码方式，况且目前 <code>ES 5</code> 的使用已经很少，基本上都采用了 <code>ES 6</code> 的写法。<br>所以在这个复杂的前端时代，学习 <code>ES 6</code> 已经成为了必然。</p><h2 id="如何怎么学习？"><a href="#如何怎么学习？" class="headerlink" title="如何怎么学习？"></a>如何怎么学习？</h2><p>那我们来看看应该怎么学吧，我在接下来的文章中，将 <code>ES 6</code> 中重要的内容挖出来，并进行简单化教程，可以观看我之后的文章进行快速性学习，然后通过不断联系，去加快自己的掌握。</p>]]></content>
      
      
      <categories>
          
          <category> ECMAScript 6 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ES 6 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
